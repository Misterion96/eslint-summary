{
    "@angular-eslint/eslint-plugin-template": {
        "fields": [
            "type",
            "description",
            "recommended",
            "hasSuggestions",
            "fixable"
        ],
        "rules": {
            "accessibility-alt-text": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "accessibilityAltText": "<{{element}}/> element must have a text alternative."
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/accessibility-alt-text.md",
                "description": "Enforces alternate text for elements which require the alt, aria-label, aria-labelledby attributes.",
                "recommended": false,
                "html": { "severity": "error" }
            },
            "no-positive-tabindex": {
                "type": "suggestion",
                "hasSuggestions": true,
                "schema": [],
                "messages": {
                    "noPositiveTabindex": "The `tabindex` attribute should not be positive",
                    "suggestNonNegativeTabindex": "Use `tabindex=\"{{tabindex}}\"`"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/no-positive-tabindex.md",
                "description": "Ensures that the `tabindex` attribute is not positive",
                "recommended": false,
                "html": { "severity": "error" }
            },
            "accessibility-valid-aria": {
                "type": "suggestion",
                "hasSuggestions": true,
                "schema": [],
                "messages": {
                    "accessibilityValidAria": "The `{{attribute}}` is an invalid ARIA attribute",
                    "accessibilityValidAriaValue": "The `{{attribute}}` has an invalid value. Check the valid values at https://raw.githack.com/w3c/aria/stable/#roles",
                    "suggestRemoveInvalidAria": "Remove attribute `{{attribute}}`"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/accessibility-valid-aria.md",
                "description": "Ensures that correct ARIA attributes and respective values are used",
                "recommended": false,
                "html": { "severity": "error" }
            },
            "no-distracting-elements": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [],
                "messages": {
                    "noDistractingElements": "Do not use <{{element}}> elements as they can create visual accessibility issues and are deprecated"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/no-distracting-elements.md",
                "description": "Enforces that no distracting elements are used",
                "recommended": false,
                "html": { "severity": "error" }
            },
            "use-track-by-function": {
                "type": "suggestion",
                "schema": [],
                "messages": { "useTrackByFunction": "Missing trackBy function in ngFor directive" },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/use-track-by-function.md",
                "description": "Ensures trackBy function is used",
                "recommended": false,
                "html": { "severity": "warn" }
            },
            "no-negated-async": {
                "type": "suggestion",
                "hasSuggestions": true,
                "schema": [],
                "messages": {
                    "noNegatedAsync": "Async pipe results should not be negated. Use `(observable | async) === false`, `(observable | async) === null`, or `(observable | async) === undefined` to check its value instead",
                    "suggestFalseComparison": "Compare with `false`",
                    "suggestNullComparison": "Compare with `null`",
                    "suggestUndefinedComparison": "Compare with `undefined`"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/no-negated-async.md",
                "description": "Ensures that async pipe results are not negated",
                "recommended": "error",
                "html": { "severity": "warn" }
            },
            "banana-in-box": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [],
                "messages": { "bananaInBox": "Invalid binding syntax. Use [(expr)] instead" },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/banana-in-box.md",
                "description": "Ensures that the two-way data binding syntax is correct",
                "recommended": "error",
                "html": { "severity": "error" }
            },
            "eqeqeq": {
                "type": "suggestion",
                "hasSuggestions": true,
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowNullOrUndefined": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "eqeqeq": "Expected `{{expectedOperation}}` but received `{{actualOperation}}`",
                    "suggestStrictEquality": "Replace `{{actualOperation}}` with `{{expectedOperation}}`"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/eqeqeq.md",
                "description": "Requires `===` and `!==` in place of `==` and `!=`",
                "recommended": "error",
                "html": { "severity": "error" }
            }
        }
    },
    "eslint": {
        "fields": [
            "type",
            "fixable",
            "description",
            "recommended",
            "deprecated",
            "replacedBy",
            "hasSuggestions"
        ],
        "rules": {
            "curly": {
                "type": "suggestion",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [{ "enum": ["all"] }],
                            "minItems": 0,
                            "maxItems": 1
                        },
                        { "type": "array", "items": [{ "enum": [
                                        "multi",
                                        "multi-line",
                                        "multi-or-nest"
                                    ] }, { "enum": ["consistent"] }], "minItems": 0, "maxItems": 2 }
                    ]
                },
                "fixable": "code",
                "messages": {
                    "missingCurlyAfter": "Expected { after '{{name}}'.",
                    "missingCurlyAfterCondition": "Expected { after '{{name}}' condition.",
                    "unexpectedCurlyAfter": "Unnecessary { after '{{name}}'.",
                    "unexpectedCurlyAfterCondition": "Unnecessary { after '{{name}}' condition."
                },
                "url": "https://eslint.org/docs/rules/curly",
                "description": "Enforce consistent brace style for all control statements",
                "recommended": false,
                "ts": { "severity": 0 }
            },
            "lines-around-comment": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "beforeBlockComment": { "type": "boolean", "default": true },
                            "afterBlockComment": { "type": "boolean", "default": false },
                            "beforeLineComment": { "type": "boolean", "default": false },
                            "afterLineComment": { "type": "boolean", "default": false },
                            "allowBlockStart": { "type": "boolean", "default": false },
                            "allowBlockEnd": { "type": "boolean", "default": false },
                            "allowClassStart": { "type": "boolean" },
                            "allowClassEnd": { "type": "boolean" },
                            "allowObjectStart": { "type": "boolean" },
                            "allowObjectEnd": { "type": "boolean" },
                            "allowArrayStart": { "type": "boolean" },
                            "allowArrayEnd": { "type": "boolean" },
                            "ignorePattern": { "type": "string" },
                            "applyDefaultIgnorePatterns": { "type": "boolean" },
                            "afterHashbangComment": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "after": "Expected line after comment.",
                    "before": "Expected line before comment."
                },
                "url": "https://eslint.org/docs/rules/lines-around-comment",
                "description": "Require empty lines around comments",
                "recommended": false,
                "ts": { "severity": 0 }
            },
            "max-len": {
                "type": "layout",
                "schema": [
                    {
                        "anyOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "code": { "type": "integer", "minimum": 0 },
                                    "comments": { "type": "integer", "minimum": 0 },
                                    "tabWidth": { "type": "integer", "minimum": 0 },
                                    "ignorePattern": { "type": "string" },
                                    "ignoreComments": { "type": "boolean" },
                                    "ignoreStrings": { "type": "boolean" },
                                    "ignoreUrls": { "type": "boolean" },
                                    "ignoreTemplateLiterals": { "type": "boolean" },
                                    "ignoreRegExpLiterals": { "type": "boolean" },
                                    "ignoreTrailingComments": { "type": "boolean" }
                                },
                                "additionalProperties": false
                            },
                            { "type": "integer", "minimum": 0 }
                        ]
                    },
                    {
                        "anyOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "code": { "type": "integer", "minimum": 0 },
                                    "comments": { "type": "integer", "minimum": 0 },
                                    "tabWidth": { "type": "integer", "minimum": 0 },
                                    "ignorePattern": { "type": "string" },
                                    "ignoreComments": { "type": "boolean" },
                                    "ignoreStrings": { "type": "boolean" },
                                    "ignoreUrls": { "type": "boolean" },
                                    "ignoreTemplateLiterals": { "type": "boolean" },
                                    "ignoreRegExpLiterals": { "type": "boolean" },
                                    "ignoreTrailingComments": { "type": "boolean" }
                                },
                                "additionalProperties": false
                            },
                            { "type": "integer", "minimum": 0 }
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "code": { "type": "integer", "minimum": 0 },
                            "comments": { "type": "integer", "minimum": 0 },
                            "tabWidth": { "type": "integer", "minimum": 0 },
                            "ignorePattern": { "type": "string" },
                            "ignoreComments": { "type": "boolean" },
                            "ignoreStrings": { "type": "boolean" },
                            "ignoreUrls": { "type": "boolean" },
                            "ignoreTemplateLiterals": { "type": "boolean" },
                            "ignoreRegExpLiterals": { "type": "boolean" },
                            "ignoreTrailingComments": { "type": "boolean" }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "max": "This line has a length of {{lineLength}}. Maximum allowed is {{maxLength}}.",
                    "maxComment": "This line has a comment length of {{lineLength}}. Maximum allowed is {{maxCommentLength}}."
                },
                "url": "https://eslint.org/docs/rules/max-len",
                "description": "Enforce a maximum line length",
                "recommended": false,
                "ts": { "severity": 0 }
            },
            "no-confusing-arrow": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowParens": { "type": "boolean", "default": true },
                            "onlyOneSimpleParam": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "confusing": "Arrow function used ambiguously with a conditional expression."
                },
                "url": "https://eslint.org/docs/rules/no-confusing-arrow",
                "description": "Disallow arrow functions where they could be confused with comparisons",
                "recommended": false,
                "ts": { "severity": 0 }
            },
            "no-mixed-operators": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "groups": {
                                "type": "array",
                                "items": { "type": "array", "items": { "enum": [
                                            "+",
                                            "-",
                                            "*",
                                            "/",
                                            "%",
                                            "**",
                                            "&",
                                            "|",
                                            "^",
                                            "~",
                                            "<<",
                                            ">>",
                                            ">>>",
                                            "==",
                                            "!=",
                                            "===",
                                            "!==",
                                            ">",
                                            ">=",
                                            "<",
                                            "<=",
                                            "&&",
                                            "||",
                                            "in",
                                            "instanceof",
                                            "?:",
                                            "??"
                                        ] }, "minItems": 2, "uniqueItems": true },
                                "uniqueItems": true
                            },
                            "allowSamePrecedence": { "type": "boolean", "default": true }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedMixedOperator": "Unexpected mix of '{{leftOperator}}' and '{{rightOperator}}'. Use parentheses to clarify the intended order of operations."
                },
                "url": "https://eslint.org/docs/rules/no-mixed-operators",
                "description": "Disallow mixed binary operators",
                "recommended": false,
                "ts": { "severity": 0 }
            },
            "no-tabs": {
                "type": "layout",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowIndentationTabs": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": { "unexpectedTab": "Unexpected tab character." },
                "url": "https://eslint.org/docs/rules/no-tabs",
                "description": "Disallow all tabs",
                "recommended": false,
                "ts": { "severity": 0 }
            },
            "no-unexpected-multiline": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "function": "Unexpected newline between function and ( of function call.",
                    "property": "Unexpected newline between object and [ of property access.",
                    "taggedTemplate": "Unexpected newline between template tag and template literal.",
                    "division": "Unexpected newline between numerator and division operator."
                },
                "url": "https://eslint.org/docs/rules/no-unexpected-multiline",
                "description": "Disallow confusing multiline expressions",
                "recommended": true,
                "ts": { "severity": 0 }
            },
            "quotes": {
                "type": "layout",
                "fixable": "code",
                "schema": [
                    { "enum": [
                            "single",
                            "double",
                            "backtick"
                        ] },
                    {
                        "anyOf": [
                            { "enum": ["avoid-escape"] },
                            {
                                "type": "object",
                                "properties": {
                                    "avoidEscape": { "type": "boolean" },
                                    "allowTemplateLiterals": { "type": "boolean" }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": { "wrongQuotes": "Strings must use {{description}}." },
                "url": "https://eslint.org/docs/rules/quotes",
                "description": "Enforce the consistent use of either backticks, double, or single quotes",
                "recommended": false,
                "ts": { "severity": 0 }
            },
            "array-bracket-newline": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            { "enum": [
                                    "always",
                                    "never",
                                    "consistent"
                                ] },
                            {
                                "type": "object",
                                "properties": {
                                    "multiline": { "type": "boolean" },
                                    "minItems": { "type": ["integer", "null"], "minimum": 0 }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
                    "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                    "missingOpeningLinebreak": "A linebreak is required after '['.",
                    "missingClosingLinebreak": "A linebreak is required before ']'."
                },
                "url": "https://eslint.org/docs/rules/array-bracket-newline",
                "description": "Enforce linebreaks after opening and before closing array brackets",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "array-bracket-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    { "enum": ["always", "never"] },
                    {
                        "type": "object",
                        "properties": {
                            "singleValue": { "type": "boolean" },
                            "objectsInArrays": { "type": "boolean" },
                            "arraysInArrays": { "type": "boolean" }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                    "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                    "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                    "missingSpaceBefore": "A space is required before '{{tokenValue}}'."
                },
                "url": "https://eslint.org/docs/rules/array-bracket-spacing",
                "description": "Enforce consistent spacing inside array brackets",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "array-element-newline": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": {
                    "definitions": {
                        "basicConfig": {
                            "oneOf": [
                                { "enum": [
                                        "always",
                                        "never",
                                        "consistent"
                                    ] },
                                {
                                    "type": "object",
                                    "properties": {
                                        "multiline": { "type": "boolean" },
                                        "minItems": { "type": ["integer", "null"], "minimum": 0 }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        }
                    },
                    "type": "array",
                    "items": [
                        {
                            "oneOf": [
                                { "$ref": "#/definitions/basicConfig" },
                                {
                                    "type": "object",
                                    "properties": {
                                        "ArrayExpression": { "$ref": "#/definitions/basicConfig" },
                                        "ArrayPattern": { "$ref": "#/definitions/basicConfig" }
                                    },
                                    "additionalProperties": false,
                                    "minProperties": 1
                                }
                            ]
                        }
                    ]
                },
                "messages": {
                    "unexpectedLineBreak": "There should be no linebreak here.",
                    "missingLineBreak": "There should be a linebreak after this element."
                },
                "url": "https://eslint.org/docs/rules/array-element-newline",
                "description": "Enforce line breaks after each array element",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "arrow-parens": {
                "type": "layout",
                "fixable": "code",
                "schema": [
                    { "enum": ["always", "as-needed"] },
                    {
                        "type": "object",
                        "properties": {
                            "requireForBlockBody": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedParens": "Unexpected parentheses around single function argument.",
                    "expectedParens": "Expected parentheses around arrow function argument.",
                    "unexpectedParensInline": "Unexpected parentheses around single function argument having a body with no curly braces.",
                    "expectedParensBlock": "Expected parentheses around arrow function argument having a body with curly braces."
                },
                "url": "https://eslint.org/docs/rules/arrow-parens",
                "description": "Require parentheses around arrow function arguments",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "arrow-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "before": { "type": "boolean", "default": true },
                            "after": { "type": "boolean", "default": true }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "expectedBefore": "Missing space before =>.",
                    "unexpectedBefore": "Unexpected space before =>.",
                    "expectedAfter": "Missing space after =>.",
                    "unexpectedAfter": "Unexpected space after =>."
                },
                "url": "https://eslint.org/docs/rules/arrow-spacing",
                "description": "Enforce consistent spacing before and after the arrow in arrow functions",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "block-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [{ "enum": ["always", "never"] }],
                "messages": {
                    "missing": "Requires a space {{location}} '{{token}}'.",
                    "extra": "Unexpected space(s) {{location}} '{{token}}'."
                },
                "url": "https://eslint.org/docs/rules/block-spacing",
                "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "brace-style": {
                "type": "layout",
                "schema": [
                    { "enum": [
                            "1tbs",
                            "stroustrup",
                            "allman"
                        ] },
                    {
                        "type": "object",
                        "properties": {
                            "allowSingleLine": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "whitespace",
                "messages": {
                    "nextLineOpen": "Opening curly brace does not appear on the same line as controlling statement.",
                    "sameLineOpen": "Opening curly brace appears on the same line as controlling statement.",
                    "blockSameLine": "Statement inside of curly braces should be on next line.",
                    "nextLineClose": "Closing curly brace does not appear on the same line as the subsequent block.",
                    "singleLineClose": "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
                    "sameLineClose": "Closing curly brace appears on the same line as the subsequent block."
                },
                "url": "https://eslint.org/docs/rules/brace-style",
                "description": "Enforce consistent brace style for blocks",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "comma-dangle": {
                "type": "layout",
                "fixable": "code",
                "schema": { "definitions": { "value": { "enum": [
                                "always-multiline",
                                "always",
                                "never",
                                "only-multiline"
                            ] }, "valueWithIgnore": { "enum": [
                                "always-multiline",
                                "always",
                                "ignore",
                                "never",
                                "only-multiline"
                            ] } }, "type": "array", "items": [{ "oneOf": [{ "$ref": "#/definitions/value" }, { "type": "object", "properties": { "arrays": { "$ref": "#/definitions/valueWithIgnore" }, "objects": { "$ref": "#/definitions/valueWithIgnore" }, "imports": { "$ref": "#/definitions/valueWithIgnore" }, "exports": { "$ref": "#/definitions/valueWithIgnore" }, "functions": { "$ref": "#/definitions/valueWithIgnore" } }, "additionalProperties": false }] }], "additionalItems": false },
                "messages": {
                    "unexpected": "Unexpected trailing comma.",
                    "missing": "Missing trailing comma."
                },
                "url": "https://eslint.org/docs/rules/comma-dangle",
                "description": "Require or disallow trailing commas",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "comma-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "before": { "type": "boolean", "default": false },
                            "after": { "type": "boolean", "default": true }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "missing": "A space is required {{loc}} ','.",
                    "unexpected": "There should be no space {{loc}} ','."
                },
                "url": "https://eslint.org/docs/rules/comma-spacing",
                "description": "Enforce consistent spacing before and after commas",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "comma-style": {
                "type": "layout",
                "fixable": "code",
                "schema": [
                    { "enum": ["first", "last"] },
                    {
                        "type": "object",
                        "properties": {
                            "exceptions": {
                                "type": "object",
                                "additionalProperties": { "type": "boolean" }
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
                    "expectedCommaFirst": "',' should be placed first.",
                    "expectedCommaLast": "',' should be placed last."
                },
                "url": "https://eslint.org/docs/rules/comma-style",
                "description": "Enforce consistent comma style",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "computed-property-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    { "enum": ["always", "never"] },
                    {
                        "type": "object",
                        "properties": {
                            "enforceForClassMembers": { "type": "boolean", "default": true }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                    "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                    "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                    "missingSpaceAfter": "A space is required after '{{tokenValue}}'."
                },
                "url": "https://eslint.org/docs/rules/computed-property-spacing",
                "description": "Enforce consistent spacing inside computed property brackets",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "dot-location": {
                "type": "layout",
                "schema": [{ "enum": ["object", "property"] }],
                "fixable": "code",
                "messages": {
                    "expectedDotAfterObject": "Expected dot to be on same line as object.",
                    "expectedDotBeforeProperty": "Expected dot to be on same line as property."
                },
                "url": "https://eslint.org/docs/rules/dot-location",
                "description": "Enforce consistent newlines before and after dots",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "eol-last": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [{ "enum": [
                            "always",
                            "never",
                            "unix",
                            "windows"
                        ] }],
                "messages": {
                    "missing": "Newline required at end of file but not found.",
                    "unexpected": "Newline not allowed at end of file."
                },
                "url": "https://eslint.org/docs/rules/eol-last",
                "description": "Require or disallow newline at the end of files",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "func-call-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [{ "enum": ["never"] }],
                            "minItems": 0,
                            "maxItems": 1
                        },
                        {
                            "type": "array",
                            "items": [
                                { "enum": ["always"] },
                                {
                                    "type": "object",
                                    "properties": { "allowNewlines": { "type": "boolean" } },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "messages": {
                    "unexpectedWhitespace": "Unexpected whitespace between function name and paren.",
                    "unexpectedNewline": "Unexpected newline between function name and paren.",
                    "missing": "Missing space between function name and paren."
                },
                "url": "https://eslint.org/docs/rules/func-call-spacing",
                "description": "Require or disallow spacing between function identifiers and their invocations",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "function-call-argument-newline": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [{ "enum": [
                            "always",
                            "never",
                            "consistent"
                        ] }],
                "messages": {
                    "unexpectedLineBreak": "There should be no line break here.",
                    "missingLineBreak": "There should be a line break after this argument."
                },
                "url": "https://eslint.org/docs/rules/function-call-argument-newline",
                "description": "Enforce line breaks between arguments of a function call",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "function-paren-newline": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            { "enum": [
                                    "always",
                                    "never",
                                    "consistent",
                                    "multiline",
                                    "multiline-arguments"
                                ] },
                            {
                                "type": "object",
                                "properties": { "minItems": { "type": "integer", "minimum": 0 } },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "expectedBefore": "Expected newline before ')'.",
                    "expectedAfter": "Expected newline after '('.",
                    "expectedBetween": "Expected newline between arguments/params.",
                    "unexpectedBefore": "Unexpected newline before ')'.",
                    "unexpectedAfter": "Unexpected newline after '('."
                },
                "url": "https://eslint.org/docs/rules/function-paren-newline",
                "description": "Enforce consistent line breaks inside function parentheses",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "generator-star": {
                "url": "https://www.google.com/search?q=generator-star",
                "ts": { "severity": "off" }
            },
            "generator-star-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            { "enum": [
                                    "before",
                                    "after",
                                    "both",
                                    "neither"
                                ] },
                            {
                                "type": "object",
                                "properties": {
                                    "before": { "type": "boolean" },
                                    "after": { "type": "boolean" },
                                    "named": {
                                        "oneOf": [
                                            { "enum": [
                                                    "before",
                                                    "after",
                                                    "both",
                                                    "neither"
                                                ] },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "before": { "type": "boolean" },
                                                    "after": { "type": "boolean" }
                                                },
                                                "additionalProperties": false
                                            }
                                        ]
                                    },
                                    "anonymous": {
                                        "oneOf": [
                                            { "enum": [
                                                    "before",
                                                    "after",
                                                    "both",
                                                    "neither"
                                                ] },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "before": { "type": "boolean" },
                                                    "after": { "type": "boolean" }
                                                },
                                                "additionalProperties": false
                                            }
                                        ]
                                    },
                                    "method": {
                                        "oneOf": [
                                            { "enum": [
                                                    "before",
                                                    "after",
                                                    "both",
                                                    "neither"
                                                ] },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "before": { "type": "boolean" },
                                                    "after": { "type": "boolean" }
                                                },
                                                "additionalProperties": false
                                            }
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "missingBefore": "Missing space before *.",
                    "missingAfter": "Missing space after *.",
                    "unexpectedBefore": "Unexpected space before *.",
                    "unexpectedAfter": "Unexpected space after *."
                },
                "url": "https://eslint.org/docs/rules/generator-star-spacing",
                "description": "Enforce consistent spacing around `*` operators in generator functions",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "implicit-arrow-linebreak": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [{ "enum": ["beside", "below"] }],
                "messages": {
                    "expected": "Expected a linebreak before this expression.",
                    "unexpected": "Expected no linebreak before this expression."
                },
                "url": "https://eslint.org/docs/rules/implicit-arrow-linebreak",
                "description": "Enforce the location of arrow function bodies",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "indent": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    { "oneOf": [{ "enum": ["tab"] }, { "type": "integer", "minimum": 0 }] },
                    {
                        "type": "object",
                        "properties": {
                            "SwitchCase": { "type": "integer", "minimum": 0, "default": 0 },
                            "VariableDeclarator": {
                                "oneOf": [
                                    {
                                        "oneOf": [
                                            { "type": "integer", "minimum": 0 },
                                            { "enum": ["first", "off"] }
                                        ]
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "var": {
                                                "oneOf": [
                                                    { "type": "integer", "minimum": 0 },
                                                    { "enum": ["first", "off"] }
                                                ]
                                            },
                                            "let": {
                                                "oneOf": [
                                                    { "type": "integer", "minimum": 0 },
                                                    { "enum": ["first", "off"] }
                                                ]
                                            },
                                            "const": {
                                                "oneOf": [
                                                    { "type": "integer", "minimum": 0 },
                                                    { "enum": ["first", "off"] }
                                                ]
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                ]
                            },
                            "outerIIFEBody": {
                                "oneOf": [{ "type": "integer", "minimum": 0 }, { "enum": ["off"] }]
                            },
                            "MemberExpression": {
                                "oneOf": [{ "type": "integer", "minimum": 0 }, { "enum": ["off"] }]
                            },
                            "FunctionDeclaration": {
                                "type": "object",
                                "properties": {
                                    "parameters": {
                                        "oneOf": [
                                            { "type": "integer", "minimum": 0 },
                                            { "enum": ["first", "off"] }
                                        ]
                                    },
                                    "body": { "type": "integer", "minimum": 0 }
                                },
                                "additionalProperties": false
                            },
                            "FunctionExpression": {
                                "type": "object",
                                "properties": {
                                    "parameters": {
                                        "oneOf": [
                                            { "type": "integer", "minimum": 0 },
                                            { "enum": ["first", "off"] }
                                        ]
                                    },
                                    "body": { "type": "integer", "minimum": 0 }
                                },
                                "additionalProperties": false
                            },
                            "StaticBlock": {
                                "type": "object",
                                "properties": { "body": { "type": "integer", "minimum": 0 } },
                                "additionalProperties": false
                            },
                            "CallExpression": {
                                "type": "object",
                                "properties": {
                                    "arguments": {
                                        "oneOf": [
                                            { "type": "integer", "minimum": 0 },
                                            { "enum": ["first", "off"] }
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            },
                            "ArrayExpression": {
                                "oneOf": [
                                    { "type": "integer", "minimum": 0 },
                                    { "enum": ["first", "off"] }
                                ]
                            },
                            "ObjectExpression": {
                                "oneOf": [
                                    { "type": "integer", "minimum": 0 },
                                    { "enum": ["first", "off"] }
                                ]
                            },
                            "ImportDeclaration": {
                                "oneOf": [
                                    { "type": "integer", "minimum": 0 },
                                    { "enum": ["first", "off"] }
                                ]
                            },
                            "flatTernaryExpressions": { "type": "boolean", "default": false },
                            "offsetTernaryExpressions": { "type": "boolean", "default": false },
                            "ignoredNodes": {
                                "type": "array",
                                "items": { "type": "string", "not": { "pattern": ":exit$" } }
                            },
                            "ignoreComments": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}."
                },
                "url": "https://eslint.org/docs/rules/indent",
                "description": "Enforce consistent indentation",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "jsx-quotes": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [{ "enum": ["prefer-single", "prefer-double"] }],
                "messages": { "unexpected": "Unexpected usage of {{description}}." },
                "url": "https://eslint.org/docs/rules/jsx-quotes",
                "description": "Enforce the consistent use of either double or single quotes in JSX attributes",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "key-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "anyOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "align": {
                                        "anyOf": [
                                            { "enum": ["colon", "value"] },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "mode": { "enum": ["strict", "minimum"] },
                                                    "on": { "enum": ["colon", "value"] },
                                                    "beforeColon": { "type": "boolean" },
                                                    "afterColon": { "type": "boolean" }
                                                },
                                                "additionalProperties": false
                                            }
                                        ]
                                    },
                                    "mode": { "enum": ["strict", "minimum"] },
                                    "beforeColon": { "type": "boolean" },
                                    "afterColon": { "type": "boolean" }
                                },
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "singleLine": {
                                        "type": "object",
                                        "properties": {
                                            "mode": { "enum": ["strict", "minimum"] },
                                            "beforeColon": { "type": "boolean" },
                                            "afterColon": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "multiLine": {
                                        "type": "object",
                                        "properties": {
                                            "align": {
                                                "anyOf": [
                                                    { "enum": ["colon", "value"] },
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "mode": {
                                                                "enum": ["strict", "minimum"]
                                                            },
                                                            "on": { "enum": ["colon", "value"] },
                                                            "beforeColon": { "type": "boolean" },
                                                            "afterColon": { "type": "boolean" }
                                                        },
                                                        "additionalProperties": false
                                                    }
                                                ]
                                            },
                                            "mode": { "enum": ["strict", "minimum"] },
                                            "beforeColon": { "type": "boolean" },
                                            "afterColon": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "singleLine": {
                                        "type": "object",
                                        "properties": {
                                            "mode": { "enum": ["strict", "minimum"] },
                                            "beforeColon": { "type": "boolean" },
                                            "afterColon": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "multiLine": {
                                        "type": "object",
                                        "properties": {
                                            "mode": { "enum": ["strict", "minimum"] },
                                            "beforeColon": { "type": "boolean" },
                                            "afterColon": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "align": {
                                        "type": "object",
                                        "properties": {
                                            "mode": { "enum": ["strict", "minimum"] },
                                            "on": { "enum": ["colon", "value"] },
                                            "beforeColon": { "type": "boolean" },
                                            "afterColon": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                    "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                    "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                    "missingValue": "Missing space before value for {{computed}}key '{{key}}'."
                },
                "url": "https://eslint.org/docs/rules/key-spacing",
                "description": "Enforce consistent spacing between keys and values in object literal properties",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "keyword-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "before": { "type": "boolean", "default": true },
                            "after": { "type": "boolean", "default": true },
                            "overrides": {
                                "type": "object",
                                "properties": {
                                    "abstract": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "as": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "async": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "await": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "boolean": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "break": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "byte": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "case": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "catch": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "char": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "class": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "const": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "continue": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "debugger": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "default": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "delete": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "do": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "double": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "else": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "enum": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "export": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "extends": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "false": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "final": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "finally": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "float": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "for": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "from": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "function": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "get": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "goto": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "if": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "implements": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "import": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "in": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "instanceof": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "int": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "interface": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "let": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "long": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "native": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "new": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "null": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "of": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "package": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "private": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "protected": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "public": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "return": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "set": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "short": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "static": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "super": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "switch": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "synchronized": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "this": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "throw": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "throws": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "transient": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "true": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "try": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "typeof": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "var": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "void": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "volatile": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "while": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "with": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "yield": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "expectedBefore": "Expected space(s) before \"{{value}}\".",
                    "expectedAfter": "Expected space(s) after \"{{value}}\".",
                    "unexpectedBefore": "Unexpected space(s) before \"{{value}}\".",
                    "unexpectedAfter": "Unexpected space(s) after \"{{value}}\"."
                },
                "url": "https://eslint.org/docs/rules/keyword-spacing",
                "description": "Enforce consistent spacing before and after keywords",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "linebreak-style": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [{ "enum": ["unix", "windows"] }],
                "messages": {
                    "expectedLF": "Expected linebreaks to be 'LF' but found 'CRLF'.",
                    "expectedCRLF": "Expected linebreaks to be 'CRLF' but found 'LF'."
                },
                "url": "https://eslint.org/docs/rules/linebreak-style",
                "description": "Enforce consistent linebreak style",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "multiline-ternary": {
                "type": "layout",
                "schema": [{ "enum": [
                            "always",
                            "always-multiline",
                            "never"
                        ] }],
                "messages": {
                    "expectedTestCons": "Expected newline between test and consequent of ternary expression.",
                    "expectedConsAlt": "Expected newline between consequent and alternate of ternary expression.",
                    "unexpectedTestCons": "Unexpected newline between test and consequent of ternary expression.",
                    "unexpectedConsAlt": "Unexpected newline between consequent and alternate of ternary expression."
                },
                "fixable": "whitespace",
                "url": "https://eslint.org/docs/rules/multiline-ternary",
                "description": "Enforce newlines between operands of ternary expressions",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "newline-per-chained-call": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "ignoreChainWithDepth": {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 10,
                                "default": 2
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": { "expected": "Expected line break before `{{callee}}`." },
                "url": "https://eslint.org/docs/rules/newline-per-chained-call",
                "description": "Require a newline after each call in a method chain",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "new-parens": {
                "type": "layout",
                "fixable": "code",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [{ "enum": ["always", "never"] }],
                            "minItems": 0,
                            "maxItems": 1
                        }
                    ]
                },
                "messages": {
                    "missing": "Missing '()' invoking a constructor.",
                    "unnecessary": "Unnecessary '()' invoking a constructor with no arguments."
                },
                "url": "https://eslint.org/docs/rules/new-parens",
                "description": "Enforce or disallow parentheses when invoking a constructor with no arguments",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "no-arrow-condition": {
                "url": "https://www.google.com/search?q=no-arrow-condition",
                "ts": { "severity": "off" }
            },
            "no-comma-dangle": {
                "url": "https://www.google.com/search?q=no-comma-dangle",
                "ts": { "severity": "off" }
            },
            "no-extra-parens": {
                "type": "layout",
                "fixable": "code",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [{ "enum": ["functions"] }],
                            "minItems": 0,
                            "maxItems": 1
                        },
                        {
                            "type": "array",
                            "items": [
                                { "enum": ["all"] },
                                {
                                    "type": "object",
                                    "properties": {
                                        "conditionalAssign": { "type": "boolean" },
                                        "nestedBinaryExpressions": { "type": "boolean" },
                                        "returnAssign": { "type": "boolean" },
                                        "ignoreJSX": { "enum": [
                                                "none",
                                                "all",
                                                "single-line",
                                                "multi-line"
                                            ] },
                                        "enforceForArrowConditionals": { "type": "boolean" },
                                        "enforceForSequenceExpressions": { "type": "boolean" },
                                        "enforceForNewInMemberExpressions": { "type": "boolean" },
                                        "enforceForFunctionPrototypeMethods": { "type": "boolean" },
                                        "allowParensAfterCommentPattern": { "type": "string" }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "messages": { "unexpected": "Unnecessary parentheses around expression." },
                "url": "https://eslint.org/docs/rules/no-extra-parens",
                "description": "Disallow unnecessary parentheses",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "no-extra-semi": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [],
                "messages": { "unexpected": "Unnecessary semicolon." },
                "url": "https://eslint.org/docs/rules/no-extra-semi",
                "description": "Disallow unnecessary semicolons",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "no-floating-decimal": {
                "type": "suggestion",
                "schema": [],
                "fixable": "code",
                "messages": {
                    "leading": "A leading decimal point can be confused with a dot.",
                    "trailing": "A trailing decimal point can be confused with a dot."
                },
                "url": "https://eslint.org/docs/rules/no-floating-decimal",
                "description": "Disallow leading or trailing decimal points in numeric literals",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "no-mixed-spaces-and-tabs": {
                "type": "layout",
                "schema": [{ "enum": [
                            "smart-tabs",
                            true,
                            false
                        ] }],
                "messages": {
                    "mixedSpacesAndTabs": "Mixed spaces and tabs."
                },
                "url": "https://eslint.org/docs/rules/no-mixed-spaces-and-tabs",
                "description": "Disallow mixed spaces and tabs for indentation",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "no-multi-spaces": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "exceptions": {
                                "type": "object",
                                "patternProperties": { "^([A-Z][a-z]*)+$": { "type": "boolean" } },
                                "additionalProperties": false
                            },
                            "ignoreEOLComments": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "multipleSpaces": "Multiple spaces found before '{{displayValue}}'."
                },
                "url": "https://eslint.org/docs/rules/no-multi-spaces",
                "description": "Disallow multiple spaces",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "no-multiple-empty-lines": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "max": { "type": "integer", "minimum": 0 },
                            "maxEOF": { "type": "integer", "minimum": 0 },
                            "maxBOF": { "type": "integer", "minimum": 0 }
                        },
                        "required": ["max"],
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "blankBeginningOfFile": "Too many blank lines at the beginning of file. Max of {{max}} allowed.",
                    "blankEndOfFile": "Too many blank lines at the end of file. Max of {{max}} allowed.",
                    "consecutiveBlank": "More than {{max}} blank {{pluralizedLines}} not allowed."
                },
                "url": "https://eslint.org/docs/rules/no-multiple-empty-lines",
                "description": "Disallow multiple empty lines",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "no-reserved-keys": {
                "url": "https://www.google.com/search?q=no-reserved-keys",
                "ts": { "severity": "off" }
            },
            "no-space-before-semi": {
                "url": "https://www.google.com/search?q=no-space-before-semi",
                "ts": { "severity": "off" }
            },
            "no-trailing-spaces": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "skipBlankLines": { "type": "boolean", "default": false },
                            "ignoreComments": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": { "trailingSpace": "Trailing spaces not allowed." },
                "url": "https://eslint.org/docs/rules/no-trailing-spaces",
                "description": "Disallow trailing whitespace at the end of lines",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "no-whitespace-before-property": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [],
                "messages": {
                    "unexpectedWhitespace": "Unexpected whitespace before property {{propName}}."
                },
                "url": "https://eslint.org/docs/rules/no-whitespace-before-property",
                "description": "Disallow whitespace before properties",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "no-wrap-func": {
                "url": "https://www.google.com/search?q=no-wrap-func",
                "ts": { "severity": "off" }
            },
            "nonblock-statement-body-position": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [{ "enum": [
                            "beside",
                            "below",
                            "any"
                        ] }, { "properties": { "overrides": { "properties": { "if": { "enum": [
                                            "beside",
                                            "below",
                                            "any"
                                        ] }, "else": { "enum": [
                                            "beside",
                                            "below",
                                            "any"
                                        ] }, "while": { "enum": [
                                            "beside",
                                            "below",
                                            "any"
                                        ] }, "do": { "enum": [
                                            "beside",
                                            "below",
                                            "any"
                                        ] }, "for": { "enum": [
                                            "beside",
                                            "below",
                                            "any"
                                        ] } }, "additionalProperties": false } }, "additionalProperties": false }],
                "messages": {
                    "expectNoLinebreak": "Expected no linebreak before this statement.",
                    "expectLinebreak": "Expected a linebreak before this statement."
                },
                "url": "https://eslint.org/docs/rules/nonblock-statement-body-position",
                "description": "Enforce the location of single-line statements",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "object-curly-newline": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "oneOf": [
                                    { "enum": ["always", "never"] },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "multiline": { "type": "boolean" },
                                            "minProperties": { "type": "integer", "minimum": 0 },
                                            "consistent": { "type": "boolean" }
                                        },
                                        "additionalProperties": false,
                                        "minProperties": 1
                                    }
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "ObjectExpression": {
                                        "oneOf": [
                                            { "enum": ["always", "never"] },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "multiline": { "type": "boolean" },
                                                    "minProperties": {
                                                        "type": "integer",
                                                        "minimum": 0
                                                    },
                                                    "consistent": { "type": "boolean" }
                                                },
                                                "additionalProperties": false,
                                                "minProperties": 1
                                            }
                                        ]
                                    },
                                    "ObjectPattern": {
                                        "oneOf": [
                                            { "enum": ["always", "never"] },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "multiline": { "type": "boolean" },
                                                    "minProperties": {
                                                        "type": "integer",
                                                        "minimum": 0
                                                    },
                                                    "consistent": { "type": "boolean" }
                                                },
                                                "additionalProperties": false,
                                                "minProperties": 1
                                            }
                                        ]
                                    },
                                    "ImportDeclaration": {
                                        "oneOf": [
                                            { "enum": ["always", "never"] },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "multiline": { "type": "boolean" },
                                                    "minProperties": {
                                                        "type": "integer",
                                                        "minimum": 0
                                                    },
                                                    "consistent": { "type": "boolean" }
                                                },
                                                "additionalProperties": false,
                                                "minProperties": 1
                                            }
                                        ]
                                    },
                                    "ExportDeclaration": {
                                        "oneOf": [
                                            { "enum": ["always", "never"] },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "multiline": { "type": "boolean" },
                                                    "minProperties": {
                                                        "type": "integer",
                                                        "minimum": 0
                                                    },
                                                    "consistent": { "type": "boolean" }
                                                },
                                                "additionalProperties": false,
                                                "minProperties": 1
                                            }
                                        ]
                                    }
                                },
                                "additionalProperties": false,
                                "minProperties": 1
                            }
                        ]
                    }
                ],
                "messages": {
                    "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                    "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                    "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                    "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace."
                },
                "url": "https://eslint.org/docs/rules/object-curly-newline",
                "description": "Enforce consistent line breaks after opening and before closing braces",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "object-curly-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    { "enum": ["always", "never"] },
                    {
                        "type": "object",
                        "properties": {
                            "arraysInObjects": { "type": "boolean" },
                            "objectsInObjects": { "type": "boolean" }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "requireSpaceBefore": "A space is required before '{{token}}'.",
                    "requireSpaceAfter": "A space is required after '{{token}}'.",
                    "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                    "unexpectedSpaceAfter": "There should be no space after '{{token}}'."
                },
                "url": "https://eslint.org/docs/rules/object-curly-spacing",
                "description": "Enforce consistent spacing inside braces",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "object-property-newline": {
                "type": "layout",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowAllPropertiesOnSameLine": { "type": "boolean", "default": false },
                            "allowMultiplePropertiesPerLine": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "whitespace",
                "messages": {
                    "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
                    "propertiesOnNewline": "Object properties must go on a new line."
                },
                "url": "https://eslint.org/docs/rules/object-property-newline",
                "description": "Enforce placing object properties on separate lines",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "one-var-declaration-per-line": {
                "type": "suggestion",
                "schema": [{ "enum": ["always", "initializations"] }],
                "fixable": "whitespace",
                "messages": {
                    "expectVarOnNewline": "Expected variable declaration to be on a new line."
                },
                "url": "https://eslint.org/docs/rules/one-var-declaration-per-line",
                "description": "Require or disallow newlines around variable declarations",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "operator-linebreak": {
                "type": "layout",
                "schema": [
                    { "enum": [
                            "after",
                            "before",
                            "none",
                            null
                        ] },
                    {
                        "type": "object",
                        "properties": {
                            "overrides": { "type": "object", "additionalProperties": { "enum": [
                                        "after",
                                        "before",
                                        "none",
                                        "ignore"
                                    ] } }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "operatorAtBeginning": "'{{operator}}' should be placed at the beginning of the line.",
                    "operatorAtEnd": "'{{operator}}' should be placed at the end of the line.",
                    "badLinebreak": "Bad line breaking before and after '{{operator}}'.",
                    "noLinebreak": "There should be no line break before or after '{{operator}}'."
                },
                "url": "https://eslint.org/docs/rules/operator-linebreak",
                "description": "Enforce consistent linebreak style for operators",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "padded-blocks": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            { "enum": ["always", "never"] },
                            {
                                "type": "object",
                                "properties": {
                                    "blocks": { "enum": ["always", "never"] },
                                    "switches": { "enum": ["always", "never"] },
                                    "classes": { "enum": ["always", "never"] }
                                },
                                "additionalProperties": false,
                                "minProperties": 1
                            }
                        ]
                    },
                    {
                        "type": "object",
                        "properties": { "allowSingleLineBlocks": { "type": "boolean" } },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "alwaysPadBlock": "Block must be padded by blank lines.",
                    "neverPadBlock": "Block must not be padded by blank lines."
                },
                "url": "https://eslint.org/docs/rules/padded-blocks",
                "description": "Require or disallow padding within blocks",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "quote-props": {
                "type": "suggestion",
                "schema": {
                    "anyOf": [
                        { "type": "array", "items": [{ "enum": [
                                        "always",
                                        "as-needed",
                                        "consistent",
                                        "consistent-as-needed"
                                    ] }], "minItems": 0, "maxItems": 1 },
                        {
                            "type": "array",
                            "items": [
                                { "enum": [
                                        "always",
                                        "as-needed",
                                        "consistent",
                                        "consistent-as-needed"
                                    ] },
                                {
                                    "type": "object",
                                    "properties": {
                                        "keywords": { "type": "boolean" },
                                        "unnecessary": { "type": "boolean" },
                                        "numbers": { "type": "boolean" }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "fixable": "code",
                "messages": {
                    "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                    "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                    "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                    "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
                    "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                    "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                    "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant."
                },
                "url": "https://eslint.org/docs/rules/quote-props",
                "description": "Require quotes around object literal property names",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "rest-spread-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [{ "enum": ["always", "never"] }],
                "messages": {
                    "unexpectedWhitespace": "Unexpected whitespace after {{type}} operator.",
                    "expectedWhitespace": "Expected whitespace after {{type}} operator."
                },
                "url": "https://eslint.org/docs/rules/rest-spread-spacing",
                "description": "Enforce spacing between rest and spread operators and their expressions",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "semi": {
                "type": "layout",
                "fixable": "code",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                { "enum": ["never"] },
                                {
                                    "type": "object",
                                    "properties": { "beforeStatementContinuationChars": { "enum": [
                                                "always",
                                                "any",
                                                "never"
                                            ] } },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        },
                        {
                            "type": "array",
                            "items": [
                                { "enum": ["always"] },
                                {
                                    "type": "object",
                                    "properties": {
                                        "omitLastInOneLineBlock": { "type": "boolean" }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "messages": {
                    "missingSemi": "Missing semicolon.",
                    "extraSemi": "Extra semicolon."
                },
                "url": "https://eslint.org/docs/rules/semi",
                "description": "Require or disallow semicolons instead of ASI",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "semi-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "before": { "type": "boolean", "default": false },
                            "after": { "type": "boolean", "default": true }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedWhitespaceBefore": "Unexpected whitespace before semicolon.",
                    "unexpectedWhitespaceAfter": "Unexpected whitespace after semicolon.",
                    "missingWhitespaceBefore": "Missing whitespace before semicolon.",
                    "missingWhitespaceAfter": "Missing whitespace after semicolon."
                },
                "url": "https://eslint.org/docs/rules/semi-spacing",
                "description": "Enforce consistent spacing before and after semicolons",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "semi-style": {
                "type": "layout",
                "schema": [{ "enum": ["last", "first"] }],
                "fixable": "whitespace",
                "messages": { "expectedSemiColon": "Expected this semicolon to be at {{pos}}." },
                "url": "https://eslint.org/docs/rules/semi-style",
                "description": "Enforce location of semicolons",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "space-after-function-name": {
                "url": "https://www.google.com/search?q=space-after-function-name",
                "ts": { "severity": "off" }
            },
            "space-after-keywords": {
                "url": "https://www.google.com/search?q=space-after-keywords",
                "ts": { "severity": "off" }
            },
            "space-before-blocks": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            { "enum": ["always", "never"] },
                            { "type": "object", "properties": { "keywords": { "enum": [
                                            "always",
                                            "never",
                                            "off"
                                        ] }, "functions": { "enum": [
                                            "always",
                                            "never",
                                            "off"
                                        ] }, "classes": { "enum": [
                                            "always",
                                            "never",
                                            "off"
                                        ] } }, "additionalProperties": false }
                        ]
                    }
                ],
                "messages": {
                    "unexpectedSpace": "Unexpected space before opening brace.",
                    "missingSpace": "Missing space before opening brace."
                },
                "url": "https://eslint.org/docs/rules/space-before-blocks",
                "description": "Enforce consistent spacing before blocks",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "space-before-function-paren": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            { "enum": ["always", "never"] },
                            { "type": "object", "properties": { "anonymous": { "enum": [
                                            "always",
                                            "never",
                                            "ignore"
                                        ] }, "named": { "enum": [
                                            "always",
                                            "never",
                                            "ignore"
                                        ] }, "asyncArrow": { "enum": [
                                            "always",
                                            "never",
                                            "ignore"
                                        ] } }, "additionalProperties": false }
                        ]
                    }
                ],
                "messages": {
                    "unexpectedSpace": "Unexpected space before function parentheses.",
                    "missingSpace": "Missing space before function parentheses."
                },
                "url": "https://eslint.org/docs/rules/space-before-function-paren",
                "description": "Enforce consistent spacing before `function` definition opening parenthesis",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "space-before-function-parentheses": {
                "url": "https://www.google.com/search?q=space-before-function-parentheses",
                "ts": { "severity": "off" }
            },
            "space-before-keywords": {
                "url": "https://www.google.com/search?q=space-before-keywords",
                "ts": { "severity": "off" }
            },
            "space-in-brackets": {
                "url": "https://www.google.com/search?q=space-in-brackets",
                "ts": { "severity": "off" }
            },
            "space-in-parens": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    { "enum": ["always", "never"] },
                    {
                        "type": "object",
                        "properties": { "exceptions": { "type": "array", "items": { "enum": [
                                        "{}",
                                        "[]",
                                        "()",
                                        "empty"
                                    ] }, "uniqueItems": true } },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "missingOpeningSpace": "There must be a space after this paren.",
                    "missingClosingSpace": "There must be a space before this paren.",
                    "rejectedOpeningSpace": "There should be no space after this paren.",
                    "rejectedClosingSpace": "There should be no space before this paren."
                },
                "url": "https://eslint.org/docs/rules/space-in-parens",
                "description": "Enforce consistent spacing inside parentheses",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "space-infix-ops": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": { "int32Hint": { "type": "boolean", "default": false } },
                        "additionalProperties": false
                    }
                ],
                "messages": { "missingSpace": "Operator '{{operator}}' must be spaced." },
                "url": "https://eslint.org/docs/rules/space-infix-ops",
                "description": "Require spacing around infix operators",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "space-return-throw-case": {
                "url": "https://www.google.com/search?q=space-return-throw-case",
                "ts": { "severity": "off" }
            },
            "space-unary-ops": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "words": { "type": "boolean", "default": true },
                            "nonwords": { "type": "boolean", "default": false },
                            "overrides": {
                                "type": "object",
                                "additionalProperties": { "type": "boolean" }
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
                    "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                    "unexpectedAfterWord": "Unexpected space after unary word operator '{{word}}'.",
                    "wordOperator": "Unary word operator '{{word}}' must be followed by whitespace.",
                    "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                    "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'."
                },
                "url": "https://eslint.org/docs/rules/space-unary-ops",
                "description": "Enforce consistent spacing before or after unary operators",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "space-unary-word-ops": {
                "url": "https://www.google.com/search?q=space-unary-word-ops",
                "ts": { "severity": "off" }
            },
            "switch-colon-spacing": {
                "type": "layout",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "before": { "type": "boolean", "default": false },
                            "after": { "type": "boolean", "default": true }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "whitespace",
                "messages": {
                    "expectedBefore": "Expected space(s) before this colon.",
                    "expectedAfter": "Expected space(s) after this colon.",
                    "unexpectedBefore": "Unexpected space(s) before this colon.",
                    "unexpectedAfter": "Unexpected space(s) after this colon."
                },
                "url": "https://eslint.org/docs/rules/switch-colon-spacing",
                "description": "Enforce spacing around colons of switch statements",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "template-curly-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [{ "enum": ["always", "never"] }],
                "messages": {
                    "expectedBefore": "Expected space(s) before '}'.",
                    "expectedAfter": "Expected space(s) after '${'.",
                    "unexpectedBefore": "Unexpected space(s) before '}'.",
                    "unexpectedAfter": "Unexpected space(s) after '${'."
                },
                "url": "https://eslint.org/docs/rules/template-curly-spacing",
                "description": "Require or disallow spacing around embedded expressions of template strings",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "template-tag-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [{ "enum": ["always", "never"] }],
                "messages": {
                    "unexpected": "Unexpected space between template tag and template literal.",
                    "missing": "Missing space between template tag and template literal."
                },
                "url": "https://eslint.org/docs/rules/template-tag-spacing",
                "description": "Require or disallow spacing between template tags and their literals",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "unicode-bom": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [{ "enum": ["always", "never"] }],
                "messages": {
                    "expected": "Expected Unicode BOM (Byte Order Mark).",
                    "unexpected": "Unexpected Unicode BOM (Byte Order Mark)."
                },
                "url": "https://eslint.org/docs/rules/unicode-bom",
                "description": "Require or disallow Unicode byte order mark (BOM)",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "wrap-iife": {
                "type": "layout",
                "schema": [
                    { "enum": [
                            "outside",
                            "inside",
                            "any"
                        ] },
                    {
                        "type": "object",
                        "properties": {
                            "functionPrototypeMethods": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "wrapInvocation": "Wrap an immediate function invocation in parentheses.",
                    "wrapExpression": "Wrap only the function expression in parens.",
                    "moveInvocation": "Move the invocation into the parens that contain the function."
                },
                "url": "https://eslint.org/docs/rules/wrap-iife",
                "description": "Require parentheses around immediate `function` invocations",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "wrap-regex": {
                "type": "layout",
                "schema": [],
                "fixable": "code",
                "messages": {
                    "requireParens": "Wrap the regexp literal in parens to disambiguate the slash."
                },
                "url": "https://eslint.org/docs/rules/wrap-regex",
                "description": "Require parenthesis around regex literals",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "yield-star-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            { "enum": [
                                    "before",
                                    "after",
                                    "both",
                                    "neither"
                                ] },
                            {
                                "type": "object",
                                "properties": {
                                    "before": { "type": "boolean" },
                                    "after": { "type": "boolean" }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "missingBefore": "Missing space before *.",
                    "missingAfter": "Missing space after *.",
                    "unexpectedBefore": "Unexpected space before *.",
                    "unexpectedAfter": "Unexpected space after *."
                },
                "url": "https://eslint.org/docs/rules/yield-star-spacing",
                "description": "Require or disallow spacing around the `*` in `yield*` expressions",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "indent-legacy": {
                "type": "layout",
                "deprecated": true,
                "replacedBy": ["indent"],
                "fixable": "whitespace",
                "schema": [
                    { "oneOf": [{ "enum": ["tab"] }, { "type": "integer", "minimum": 0 }] },
                    {
                        "type": "object",
                        "properties": {
                            "SwitchCase": { "type": "integer", "minimum": 0 },
                            "VariableDeclarator": {
                                "oneOf": [
                                    { "type": "integer", "minimum": 0 },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "var": { "type": "integer", "minimum": 0 },
                                            "let": { "type": "integer", "minimum": 0 },
                                            "const": { "type": "integer", "minimum": 0 }
                                        }
                                    }
                                ]
                            },
                            "outerIIFEBody": { "type": "integer", "minimum": 0 },
                            "MemberExpression": { "type": "integer", "minimum": 0 },
                            "FunctionDeclaration": {
                                "type": "object",
                                "properties": {
                                    "parameters": {
                                        "oneOf": [
                                            { "type": "integer", "minimum": 0 },
                                            { "enum": ["first"] }
                                        ]
                                    },
                                    "body": { "type": "integer", "minimum": 0 }
                                }
                            },
                            "FunctionExpression": {
                                "type": "object",
                                "properties": {
                                    "parameters": {
                                        "oneOf": [
                                            { "type": "integer", "minimum": 0 },
                                            { "enum": ["first"] }
                                        ]
                                    },
                                    "body": { "type": "integer", "minimum": 0 }
                                }
                            },
                            "CallExpression": {
                                "type": "object",
                                "properties": {
                                    "parameters": {
                                        "oneOf": [
                                            { "type": "integer", "minimum": 0 },
                                            { "enum": ["first"] }
                                        ]
                                    }
                                }
                            },
                            "ArrayExpression": {
                                "oneOf": [
                                    { "type": "integer", "minimum": 0 },
                                    { "enum": ["first"] }
                                ]
                            },
                            "ObjectExpression": {
                                "oneOf": [
                                    { "type": "integer", "minimum": 0 },
                                    { "enum": ["first"] }
                                ]
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "expected": "Expected indentation of {{expected}} but found {{actual}}."
                },
                "url": "https://eslint.org/docs/rules/indent-legacy",
                "description": "Enforce consistent indentation",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "no-spaced-func": {
                "type": "layout",
                "deprecated": true,
                "replacedBy": ["func-call-spacing"],
                "fixable": "whitespace",
                "schema": [],
                "messages": {
                    "noSpacedFunction": "Unexpected space between function name and paren."
                },
                "url": "https://eslint.org/docs/rules/no-spaced-func",
                "description": "Disallow spacing between function identifiers and their applications (deprecated)",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "no-redeclare": {
                "type": "suggestion",
                "messages": {
                    "redeclared": "'{{id}}' is already defined.",
                    "redeclaredAsBuiltin": "'{{id}}' is already defined as a built-in global variable.",
                    "redeclaredBySyntax": "'{{id}}' is already defined by a variable declaration."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": { "builtinGlobals": { "type": "boolean", "default": true } },
                        "additionalProperties": false
                    }
                ],
                "url": "https://eslint.org/docs/rules/no-redeclare",
                "description": "Disallow variable redeclaration",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "no-throw-literal": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "object": "Expected an error object to be thrown.",
                    "undef": "Do not throw undefined."
                },
                "url": "https://eslint.org/docs/rules/no-throw-literal",
                "description": "Disallow throwing literals as exceptions",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "no-useless-constructor": {
                "type": "suggestion",
                "schema": [],
                "messages": { "noUselessConstructor": "Useless constructor." },
                "url": "https://eslint.org/docs/rules/no-useless-constructor",
                "description": "Disallow unnecessary constructors",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "no-dupe-class-members": {
                "type": "problem",
                "schema": [],
                "messages": { "unexpected": "Duplicate name '{{name}}'." },
                "url": "https://eslint.org/docs/rules/no-dupe-class-members",
                "description": "Disallow duplicate class members",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "no-extra-boolean-cast": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "enforceForLogicalOperands": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "unexpectedCall": "Redundant Boolean call.",
                    "unexpectedNegation": "Redundant double negation."
                },
                "url": "https://eslint.org/docs/rules/no-extra-boolean-cast",
                "description": "Disallow unnecessary boolean casts",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "no-console": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allow": {
                                "type": "array",
                                "items": { "type": "string" },
                                "minItems": 1,
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": { "unexpected": "Unexpected console statement." },
                "url": "https://eslint.org/docs/rules/no-console",
                "description": "Disallow the use of `console`",
                "recommended": false,
                "ts": { "severity": "warn" }
            },
            "no-array-constructor": {
                "type": "suggestion",
                "schema": [],
                "messages": { "preferLiteral": "The array literal notation [] is preferable." },
                "url": "https://eslint.org/docs/rules/no-array-constructor",
                "description": "Disallow `Array` constructors",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "no-empty-function": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": { "allow": { "type": "array", "items": { "enum": [
                                        "functions",
                                        "arrowFunctions",
                                        "generatorFunctions",
                                        "methods",
                                        "generatorMethods",
                                        "getters",
                                        "setters",
                                        "constructors",
                                        "asyncFunctions",
                                        "asyncMethods"
                                    ] }, "uniqueItems": true } },
                        "additionalProperties": false
                    }
                ],
                "messages": { "unexpected": "Unexpected empty {{name}}." },
                "url": "https://eslint.org/docs/rules/no-empty-function",
                "description": "Disallow empty functions",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "no-loss-of-precision": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "noLossOfPrecision": "This number literal will lose precision at runtime."
                },
                "url": "https://eslint.org/docs/rules/no-loss-of-precision",
                "description": "Disallow literal numbers that lose precision",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "no-unused-vars": {
                "type": "problem",
                "schema": [
                    {
                        "oneOf": [
                            { "enum": ["all", "local"] },
                            {
                                "type": "object",
                                "properties": {
                                    "vars": { "enum": ["all", "local"] },
                                    "varsIgnorePattern": { "type": "string" },
                                    "args": { "enum": [
                                            "all",
                                            "after-used",
                                            "none"
                                        ] },
                                    "ignoreRestSiblings": { "type": "boolean" },
                                    "argsIgnorePattern": { "type": "string" },
                                    "caughtErrors": { "enum": ["all", "none"] },
                                    "caughtErrorsIgnorePattern": { "type": "string" },
                                    "destructuredArrayIgnorePattern": { "type": "string" }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}."
                },
                "url": "https://eslint.org/docs/rules/no-unused-vars",
                "description": "Disallow unused variables",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "constructor-super": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "missingSome": "Lacked a call of 'super()' in some code paths.",
                    "missingAll": "Expected to call 'super()'.",
                    "duplicate": "Unexpected duplicate 'super()'.",
                    "badSuper": "Unexpected 'super()' because 'super' is not a constructor.",
                    "unexpected": "Unexpected 'super()'."
                },
                "url": "https://eslint.org/docs/rules/constructor-super",
                "description": "Require `super()` calls in constructors",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "getter-return": {
                "type": "problem",
                "fixable": null,
                "schema": [
                    {
                        "type": "object",
                        "properties": { "allowImplicit": { "type": "boolean", "default": false } },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "expected": "Expected to return a value in {{name}}.",
                    "expectedAlways": "Expected {{name}} to always return a value."
                },
                "url": "https://eslint.org/docs/rules/getter-return",
                "description": "Enforce `return` statements in getters",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "no-const-assign": {
                "type": "problem",
                "schema": [],
                "messages": { "const": "'{{name}}' is constant." },
                "url": "https://eslint.org/docs/rules/no-const-assign",
                "description": "Disallow reassigning `const` variables",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "no-dupe-args": {
                "type": "problem",
                "schema": [],
                "messages": { "unexpected": "Duplicate param '{{name}}'." },
                "url": "https://eslint.org/docs/rules/no-dupe-args",
                "description": "Disallow duplicate arguments in `function` definitions",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "no-dupe-keys": {
                "type": "problem",
                "schema": [],
                "messages": { "unexpected": "Duplicate key '{{name}}'." },
                "url": "https://eslint.org/docs/rules/no-dupe-keys",
                "description": "Disallow duplicate keys in object literals",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "no-func-assign": {
                "type": "problem",
                "schema": [],
                "messages": { "isAFunction": "'{{name}}' is a function." },
                "url": "https://eslint.org/docs/rules/no-func-assign",
                "description": "Disallow reassigning `function` declarations",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "no-import-assign": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "readonly": "'{{name}}' is read-only.",
                    "readonlyMember": "The members of '{{name}}' are read-only."
                },
                "url": "https://eslint.org/docs/rules/no-import-assign",
                "description": "Disallow assigning to imported bindings",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "no-new-symbol": {
                "type": "problem",
                "schema": [],
                "messages": { "noNewSymbol": "`Symbol` cannot be called as a constructor." },
                "url": "https://eslint.org/docs/rules/no-new-symbol",
                "description": "Disallow `new` operators with the `Symbol` object",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "no-obj-calls": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "unexpectedCall": "'{{name}}' is not a function.",
                    "unexpectedRefCall": "'{{name}}' is reference to '{{ref}}', which is not a function."
                },
                "url": "https://eslint.org/docs/rules/no-obj-calls",
                "description": "Disallow calling global object properties as functions",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "no-setter-return": {
                "type": "problem",
                "schema": [],
                "messages": { "returnsValue": "Setter cannot return a value." },
                "url": "https://eslint.org/docs/rules/no-setter-return",
                "description": "Disallow returning values from setters",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "no-this-before-super": {
                "type": "problem",
                "schema": [],
                "messages": { "noBeforeSuper": "'{{kind}}' is not allowed before 'super()'." },
                "url": "https://eslint.org/docs/rules/no-this-before-super",
                "description": "Disallow `this`/`super` before calling `super()` in constructors",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "no-undef": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": { "typeof": { "type": "boolean", "default": false } },
                        "additionalProperties": false
                    }
                ],
                "messages": { "undef": "'{{name}}' is not defined." },
                "url": "https://eslint.org/docs/rules/no-undef",
                "description": "Disallow the use of undeclared variables unless mentioned in `/*global */` comments",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "no-unreachable": {
                "type": "problem",
                "schema": [],
                "messages": { "unreachableCode": "Unreachable code." },
                "url": "https://eslint.org/docs/rules/no-unreachable",
                "description": "Disallow unreachable code after `return`, `throw`, `continue`, and `break` statements",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "no-unsafe-negation": {
                "type": "problem",
                "hasSuggestions": true,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "enforceForOrderingRelations": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": null,
                "messages": {
                    "unexpected": "Unexpected negating the left operand of '{{operator}}' operator.",
                    "suggestNegatedExpression": "Negate '{{operator}}' expression instead of its left operand. This changes the current behavior.",
                    "suggestParenthesisedNegation": "Wrap negation in '()' to make the intention explicit. This preserves the current behavior."
                },
                "url": "https://eslint.org/docs/rules/no-unsafe-negation",
                "description": "Disallow negating the left operand of relational operators",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "no-var": {
                "type": "suggestion",
                "schema": [],
                "fixable": "code",
                "messages": { "unexpectedVar": "Unexpected var, use let or const instead." },
                "url": "https://eslint.org/docs/rules/no-var",
                "description": "Require `let` or `const` instead of `var`",
                "recommended": false,
                "ts": { "severity": "error" }
            },
            "prefer-const": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "destructuring": { "enum": ["any", "all"], "default": "any" },
                            "ignoreReadBeforeAssign": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": { "useConst": "'{{name}}' is never reassigned. Use 'const' instead." },
                "url": "https://eslint.org/docs/rules/prefer-const",
                "description": "Require `const` declarations for variables that are never reassigned after declared",
                "recommended": false,
                "ts": { "severity": "error" }
            },
            "prefer-rest-params": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "preferRestParams": "Use the rest parameters instead of 'arguments'."
                },
                "url": "https://eslint.org/docs/rules/prefer-rest-params",
                "description": "Require rest parameters instead of `arguments`",
                "recommended": false,
                "ts": { "severity": "error" }
            },
            "prefer-spread": {
                "type": "suggestion",
                "schema": [],
                "fixable": null,
                "messages": { "preferSpread": "Use the spread operator instead of '.apply()'." },
                "url": "https://eslint.org/docs/rules/prefer-spread",
                "description": "Require spread operators instead of `.apply()`",
                "recommended": false,
                "ts": { "severity": "error" }
            },
            "valid-typeof": {
                "type": "problem",
                "hasSuggestions": true,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "requireStringLiterals": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "invalidValue": "Invalid typeof comparison value.",
                    "notString": "Typeof comparisons should be to string literals.",
                    "suggestString": "Use `\"{{type}}\"` instead of `{{type}}`."
                },
                "url": "https://eslint.org/docs/rules/valid-typeof",
                "description": "Enforce comparing `typeof` expressions against valid strings",
                "recommended": true,
                "ts": { "severity": "off" }
            },
            "for-direction": {
                "type": "problem",
                "fixable": null,
                "schema": [],
                "messages": {
                    "incorrectDirection": "The update clause in this loop moves the variable in the wrong direction."
                },
                "url": "https://eslint.org/docs/rules/for-direction",
                "description": "Enforce \"for\" loop update clause moving the counter in the right direction",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-async-promise-executor": {
                "type": "problem",
                "fixable": null,
                "schema": [],
                "messages": { "async": "Promise executor functions should not be async." },
                "url": "https://eslint.org/docs/rules/no-async-promise-executor",
                "description": "Disallow using an async function as a Promise executor",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-case-declarations": {
                "type": "suggestion",
                "schema": [],
                "messages": { "unexpected": "Unexpected lexical declaration in case block." },
                "url": "https://eslint.org/docs/rules/no-case-declarations",
                "description": "Disallow lexical declarations in case clauses",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-class-assign": {
                "type": "problem",
                "schema": [],
                "messages": { "class": "'{{name}}' is a class." },
                "url": "https://eslint.org/docs/rules/no-class-assign",
                "description": "Disallow reassigning class members",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-compare-neg-zero": {
                "type": "problem",
                "fixable": null,
                "schema": [],
                "messages": {
                    "unexpected": "Do not use the '{{operator}}' operator to compare against -0."
                },
                "url": "https://eslint.org/docs/rules/no-compare-neg-zero",
                "description": "Disallow comparing against -0",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-cond-assign": {
                "type": "problem",
                "schema": [{ "enum": ["except-parens", "always"] }],
                "messages": {
                    "unexpected": "Unexpected assignment within {{type}}.",
                    "missing": "Expected a conditional expression and instead saw an assignment."
                },
                "url": "https://eslint.org/docs/rules/no-cond-assign",
                "description": "Disallow assignment operators in conditional expressions",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-constant-condition": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": { "checkLoops": { "type": "boolean", "default": true } },
                        "additionalProperties": false
                    }
                ],
                "messages": { "unexpected": "Unexpected constant condition." },
                "url": "https://eslint.org/docs/rules/no-constant-condition",
                "description": "Disallow constant expressions in conditions",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-control-regex": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "unexpected": "Unexpected control character(s) in regular expression: {{controlChars}}."
                },
                "url": "https://eslint.org/docs/rules/no-control-regex",
                "description": "Disallow control characters in regular expressions",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-debugger": {
                "type": "problem",
                "fixable": null,
                "schema": [],
                "messages": { "unexpected": "Unexpected 'debugger' statement." },
                "url": "https://eslint.org/docs/rules/no-debugger",
                "description": "Disallow the use of `debugger`",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-delete-var": {
                "type": "suggestion",
                "schema": [],
                "messages": { "unexpected": "Variables should not be deleted." },
                "url": "https://eslint.org/docs/rules/no-delete-var",
                "description": "Disallow deleting variables",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-dupe-else-if": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "unexpected": "This branch can never execute. Its condition is a duplicate or covered by previous conditions in the if-else-if chain."
                },
                "url": "https://eslint.org/docs/rules/no-dupe-else-if",
                "description": "Disallow duplicate conditions in if-else-if chains",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-duplicate-case": {
                "type": "problem",
                "schema": [],
                "messages": { "unexpected": "Duplicate case label." },
                "url": "https://eslint.org/docs/rules/no-duplicate-case",
                "description": "Disallow duplicate case labels",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-empty": {
                "hasSuggestions": true,
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowEmptyCatch": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpected": "Empty {{type}} statement.",
                    "suggestComment": "Add comment inside empty {{type}} statement."
                },
                "url": "https://eslint.org/docs/rules/no-empty",
                "description": "Disallow empty block statements",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-empty-character-class": {
                "type": "problem",
                "schema": [],
                "messages": { "unexpected": "Empty class." },
                "url": "https://eslint.org/docs/rules/no-empty-character-class",
                "description": "Disallow empty character classes in regular expressions",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-empty-pattern": {
                "type": "problem",
                "schema": [],
                "messages": { "unexpected": "Unexpected empty {{type}} pattern." },
                "url": "https://eslint.org/docs/rules/no-empty-pattern",
                "description": "Disallow empty destructuring patterns",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-ex-assign": {
                "type": "problem",
                "schema": [],
                "messages": { "unexpected": "Do not assign to the exception parameter." },
                "url": "https://eslint.org/docs/rules/no-ex-assign",
                "description": "Disallow reassigning exceptions in `catch` clauses",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-fallthrough": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commentPattern": { "type": "string", "default": "" },
                            "allowEmptyCase": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "case": "Expected a 'break' statement before 'case'.",
                    "default": "Expected a 'break' statement before 'default'."
                },
                "url": "https://eslint.org/docs/rules/no-fallthrough",
                "description": "Disallow fallthrough of `case` statements",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-global-assign": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "exceptions": {
                                "type": "array",
                                "items": { "type": "string" },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "globalShouldNotBeModified": "Read-only global '{{name}}' should not be modified."
                },
                "url": "https://eslint.org/docs/rules/no-global-assign",
                "description": "Disallow assignments to native objects or read-only global variables",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-inner-declarations": {
                "type": "problem",
                "schema": [{ "enum": ["functions", "both"] }],
                "messages": { "moveDeclToRoot": "Move {{type}} declaration to {{body}} root." },
                "url": "https://eslint.org/docs/rules/no-inner-declarations",
                "description": "Disallow variable or `function` declarations in nested blocks",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-invalid-regexp": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowConstructorFlags": {
                                "type": "array",
                                "items": { "type": "string" }
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": { "regexMessage": "{{message}}." },
                "url": "https://eslint.org/docs/rules/no-invalid-regexp",
                "description": "Disallow invalid regular expression strings in `RegExp` constructors",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-irregular-whitespace": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "skipComments": { "type": "boolean", "default": false },
                            "skipStrings": { "type": "boolean", "default": true },
                            "skipTemplates": { "type": "boolean", "default": false },
                            "skipRegExps": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": { "noIrregularWhitespace": "Irregular whitespace not allowed." },
                "url": "https://eslint.org/docs/rules/no-irregular-whitespace",
                "description": "Disallow irregular whitespace",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-misleading-character-class": {
                "type": "problem",
                "hasSuggestions": true,
                "schema": [],
                "messages": {
                    "surrogatePairWithoutUFlag": "Unexpected surrogate pair in character class. Use 'u' flag.",
                    "combiningClass": "Unexpected combined character in character class.",
                    "emojiModifier": "Unexpected modified Emoji in character class.",
                    "regionalIndicatorSymbol": "Unexpected national flag in character class.",
                    "zwj": "Unexpected joined character sequence in character class.",
                    "suggestUnicodeFlag": "Add unicode 'u' flag to regex."
                },
                "url": "https://eslint.org/docs/rules/no-misleading-character-class",
                "description": "Disallow characters which are made with multiple code points in character class syntax",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-nonoctal-decimal-escape": {
                "type": "suggestion",
                "hasSuggestions": true,
                "schema": [],
                "messages": {
                    "decimalEscape": "Don't use '{{decimalEscape}}' escape sequence.",
                    "refactor": "Replace '{{original}}' with '{{replacement}}'. This maintains the current functionality.",
                    "escapeBackslash": "Replace '{{original}}' with '{{replacement}}' to include the actual backslash character."
                },
                "url": "https://eslint.org/docs/rules/no-nonoctal-decimal-escape",
                "description": "Disallow `\\8` and `\\9` escape sequences in string literals",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-octal": {
                "type": "suggestion",
                "schema": [],
                "messages": { "noOctal": "Octal literals should not be used." },
                "url": "https://eslint.org/docs/rules/no-octal",
                "description": "Disallow octal literals",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-prototype-builtins": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "prototypeBuildIn": "Do not access Object.prototype method '{{prop}}' from target object."
                },
                "url": "https://eslint.org/docs/rules/no-prototype-builtins",
                "description": "Disallow calling some `Object.prototype` methods directly on objects",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-regex-spaces": {
                "type": "suggestion",
                "schema": [],
                "fixable": "code",
                "messages": { "multipleSpaces": "Spaces are hard to count. Use {{{length}}}." },
                "url": "https://eslint.org/docs/rules/no-regex-spaces",
                "description": "Disallow multiple spaces in regular expressions",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-self-assign": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": { "props": { "type": "boolean", "default": true } },
                        "additionalProperties": false
                    }
                ],
                "messages": { "selfAssignment": "'{{name}}' is assigned to itself." },
                "url": "https://eslint.org/docs/rules/no-self-assign",
                "description": "Disallow assignments where both sides are exactly the same",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-shadow-restricted-names": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "shadowingRestrictedName": "Shadowing of global property '{{name}}'."
                },
                "url": "https://eslint.org/docs/rules/no-shadow-restricted-names",
                "description": "Disallow identifiers from shadowing restricted names",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-sparse-arrays": {
                "type": "problem",
                "schema": [],
                "messages": { "unexpectedSparseArray": "Unexpected comma in middle of array." },
                "url": "https://eslint.org/docs/rules/no-sparse-arrays",
                "description": "Disallow sparse arrays",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-unsafe-finally": {
                "type": "problem",
                "schema": [],
                "messages": { "unsafeUsage": "Unsafe usage of {{nodeType}}." },
                "url": "https://eslint.org/docs/rules/no-unsafe-finally",
                "description": "Disallow control flow statements in `finally` blocks",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-unsafe-optional-chaining": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "disallowArithmeticOperators": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": null,
                "messages": {
                    "unsafeOptionalChain": "Unsafe usage of optional chaining. If it short-circuits with 'undefined' the evaluation will throw TypeError.",
                    "unsafeArithmetic": "Unsafe arithmetic operation on optional chaining. It can result in NaN."
                },
                "url": "https://eslint.org/docs/rules/no-unsafe-optional-chaining",
                "description": "Disallow use of optional chaining in contexts where the `undefined` value is not allowed",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-unused-labels": {
                "type": "suggestion",
                "schema": [],
                "fixable": "code",
                "messages": { "unused": "'{{name}}:' is defined but never used." },
                "url": "https://eslint.org/docs/rules/no-unused-labels",
                "description": "Disallow unused labels",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-useless-backreference": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "nested": "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' from within that group.",
                    "forward": "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which appears later in the pattern.",
                    "backward": "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which appears before in the same lookbehind.",
                    "disjunctive": "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which is in another alternative.",
                    "intoNegativeLookaround": "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which is in a negative lookaround."
                },
                "url": "https://eslint.org/docs/rules/no-useless-backreference",
                "description": "Disallow useless backreferences in regular expressions",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-useless-catch": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "unnecessaryCatchClause": "Unnecessary catch clause.",
                    "unnecessaryCatch": "Unnecessary try/catch wrapper."
                },
                "url": "https://eslint.org/docs/rules/no-useless-catch",
                "description": "Disallow unnecessary `catch` clauses",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-useless-escape": {
                "type": "suggestion",
                "hasSuggestions": true,
                "messages": {
                    "unnecessaryEscape": "Unnecessary escape character: \\{{character}}.",
                    "removeEscape": "Remove the `\\`. This maintains the current functionality.",
                    "escapeBackslash": "Replace the `\\` with `\\\\` to include the actual backslash character."
                },
                "schema": [],
                "url": "https://eslint.org/docs/rules/no-useless-escape",
                "description": "Disallow unnecessary escape characters",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-with": {
                "type": "suggestion",
                "schema": [],
                "messages": { "unexpectedWith": "Unexpected use of 'with' statement." },
                "url": "https://eslint.org/docs/rules/no-with",
                "description": "Disallow `with` statements",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "require-yield": {
                "type": "suggestion",
                "schema": [],
                "messages": { "missingYield": "This generator function does not have 'yield'." },
                "url": "https://eslint.org/docs/rules/require-yield",
                "description": "Require generator functions to contain `yield`",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "use-isnan": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "enforceForSwitchCase": { "type": "boolean", "default": true },
                            "enforceForIndexOf": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "comparisonWithNaN": "Use the isNaN function to compare with NaN.",
                    "switchNaN": "'switch(NaN)' can never match a case clause. Use Number.isNaN instead of the switch.",
                    "caseNaN": "'case NaN' can never match. Use Number.isNaN before the switch.",
                    "indexOfNaN": "Array prototype method '{{ methodName }}' cannot find NaN."
                },
                "url": "https://eslint.org/docs/rules/use-isnan",
                "description": "Require calls to `isNaN()` when checking for `NaN`",
                "recommended": true,
                "ts": { "severity": "error" }
            }
        }
    },
    "@typescript-eslint/eslint-plugin": {
        "fields": [
            "type",
            "fixable",
            "hasSuggestions",
            "description",
            "recommended",
            "extendsBaseRule",
            "requiresTypeChecking"
        ],
        "rules": {
            "quotes": {
                "type": "layout",
                "fixable": "code",
                "messages": { "wrongQuotes": "Strings must use {{description}}." },
                "schema": [
                    { "enum": [
                            "single",
                            "double",
                            "backtick"
                        ] },
                    {
                        "anyOf": [
                            { "enum": ["avoid-escape"] },
                            {
                                "type": "object",
                                "properties": {
                                    "avoidEscape": { "type": "boolean" },
                                    "allowTemplateLiterals": { "type": "boolean" }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "url": "https://typescript-eslint.io/rules/quotes",
                "description": "Enforce the consistent use of either backticks, double, or single quotes",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": { "severity": 0 }
            },
            "block-spacing": {
                "url": "https://www.google.com/search?q=block-spacing",
                "ts": { "severity": "off" }
            },
            "brace-style": {
                "type": "layout",
                "messages": {
                    "nextLineOpen": "Opening curly brace does not appear on the same line as controlling statement.",
                    "sameLineOpen": "Opening curly brace appears on the same line as controlling statement.",
                    "blockSameLine": "Statement inside of curly braces should be on next line.",
                    "nextLineClose": "Closing curly brace does not appear on the same line as the subsequent block.",
                    "singleLineClose": "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
                    "sameLineClose": "Closing curly brace appears on the same line as the subsequent block."
                },
                "fixable": "whitespace",
                "schema": [
                    { "enum": [
                            "1tbs",
                            "stroustrup",
                            "allman"
                        ] },
                    {
                        "type": "object",
                        "properties": {
                            "allowSingleLine": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://typescript-eslint.io/rules/brace-style",
                "description": "Enforce consistent brace style for blocks",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": { "severity": "off" }
            },
            "comma-dangle": { "type": "layout", "schema": { "$defs": { "value": { "enum": [
                                "always-multiline",
                                "always",
                                "never",
                                "only-multiline"
                            ] }, "valueWithIgnore": { "enum": [
                                "always-multiline",
                                "always",
                                "never",
                                "only-multiline",
                                "ignore"
                            ] } }, "type": "array", "items": [{ "oneOf": [{ "$ref": "#/$defs/value" }, { "type": "object", "properties": { "arrays": { "$ref": "#/$defs/valueWithIgnore" }, "objects": { "$ref": "#/$defs/valueWithIgnore" }, "imports": { "$ref": "#/$defs/valueWithIgnore" }, "exports": { "$ref": "#/$defs/valueWithIgnore" }, "functions": { "$ref": "#/$defs/valueWithIgnore" }, "enums": { "$ref": "#/$defs/valueWithIgnore" }, "generics": { "$ref": "#/$defs/valueWithIgnore" }, "tuples": { "$ref": "#/$defs/valueWithIgnore" } }, "additionalProperties": false }] }], "additionalProperties": false }, "fixable": "code", "messages": { "unexpected": "Unexpected trailing comma.", "missing": "Missing trailing comma." }, "url": "https://typescript-eslint.io/rules/comma-dangle", "description": "Require or disallow trailing commas", "recommended": false, "extendsBaseRule": true, "ts": { "severity": "off" } },
            "comma-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "before": { "type": "boolean", "default": false },
                            "after": { "type": "boolean", "default": true }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpected": "There should be no space {{loc}} ','.",
                    "missing": "A space is required {{loc}} ','."
                },
                "url": "https://typescript-eslint.io/rules/comma-spacing",
                "description": "Enforce consistent spacing before and after commas",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": { "severity": "off" }
            },
            "func-call-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [{ "enum": ["never"] }],
                            "minItems": 0,
                            "maxItems": 1
                        },
                        {
                            "type": "array",
                            "items": [
                                { "enum": ["always"] },
                                {
                                    "type": "object",
                                    "properties": { "allowNewlines": { "type": "boolean" } },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "messages": {
                    "unexpectedWhitespace": "Unexpected whitespace between function name and paren.",
                    "unexpectedNewline": "Unexpected newline between function name and paren.",
                    "missing": "Missing space between function name and paren."
                },
                "url": "https://typescript-eslint.io/rules/func-call-spacing",
                "description": "Require or disallow spacing between function identifiers and their invocations",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": { "severity": "off" }
            },
            "indent": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    { "oneOf": [{ "enum": ["tab"] }, { "type": "integer", "minimum": 0 }] },
                    {
                        "type": "object",
                        "properties": {
                            "SwitchCase": { "type": "integer", "minimum": 0, "default": 0 },
                            "VariableDeclarator": {
                                "oneOf": [
                                    {
                                        "oneOf": [
                                            { "type": "integer", "minimum": 0 },
                                            { "enum": ["first", "off"] }
                                        ]
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "var": {
                                                "oneOf": [
                                                    { "type": "integer", "minimum": 0 },
                                                    { "enum": ["first", "off"] }
                                                ]
                                            },
                                            "let": {
                                                "oneOf": [
                                                    { "type": "integer", "minimum": 0 },
                                                    { "enum": ["first", "off"] }
                                                ]
                                            },
                                            "const": {
                                                "oneOf": [
                                                    { "type": "integer", "minimum": 0 },
                                                    { "enum": ["first", "off"] }
                                                ]
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                ]
                            },
                            "outerIIFEBody": {
                                "oneOf": [{ "type": "integer", "minimum": 0 }, { "enum": ["off"] }]
                            },
                            "MemberExpression": {
                                "oneOf": [{ "type": "integer", "minimum": 0 }, { "enum": ["off"] }]
                            },
                            "FunctionDeclaration": {
                                "type": "object",
                                "properties": {
                                    "parameters": {
                                        "oneOf": [
                                            { "type": "integer", "minimum": 0 },
                                            { "enum": ["first", "off"] }
                                        ]
                                    },
                                    "body": { "type": "integer", "minimum": 0 }
                                },
                                "additionalProperties": false
                            },
                            "FunctionExpression": {
                                "type": "object",
                                "properties": {
                                    "parameters": {
                                        "oneOf": [
                                            { "type": "integer", "minimum": 0 },
                                            { "enum": ["first", "off"] }
                                        ]
                                    },
                                    "body": { "type": "integer", "minimum": 0 }
                                },
                                "additionalProperties": false
                            },
                            "StaticBlock": {
                                "type": "object",
                                "properties": { "body": { "type": "integer", "minimum": 0 } },
                                "additionalProperties": false
                            },
                            "CallExpression": {
                                "type": "object",
                                "properties": {
                                    "arguments": {
                                        "oneOf": [
                                            { "type": "integer", "minimum": 0 },
                                            { "enum": ["first", "off"] }
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            },
                            "ArrayExpression": {
                                "oneOf": [
                                    { "type": "integer", "minimum": 0 },
                                    { "enum": ["first", "off"] }
                                ]
                            },
                            "ObjectExpression": {
                                "oneOf": [
                                    { "type": "integer", "minimum": 0 },
                                    { "enum": ["first", "off"] }
                                ]
                            },
                            "ImportDeclaration": {
                                "oneOf": [
                                    { "type": "integer", "minimum": 0 },
                                    { "enum": ["first", "off"] }
                                ]
                            },
                            "flatTernaryExpressions": { "type": "boolean", "default": false },
                            "offsetTernaryExpressions": { "type": "boolean", "default": false },
                            "ignoredNodes": {
                                "type": "array",
                                "items": { "type": "string", "not": { "pattern": ":exit$" } }
                            },
                            "ignoreComments": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}."
                },
                "url": "https://typescript-eslint.io/rules/indent",
                "description": "Enforce consistent indentation",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": { "severity": "off" }
            },
            "key-spacing": {
                "url": "https://www.google.com/search?q=key-spacing",
                "ts": { "severity": "off" }
            },
            "keyword-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "before": { "type": "boolean", "default": true },
                            "after": { "type": "boolean", "default": true },
                            "overrides": {
                                "type": "object",
                                "properties": {
                                    "abstract": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "as": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "async": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "await": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "boolean": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "break": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "byte": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "case": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "catch": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "char": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "class": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "const": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "continue": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "debugger": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "default": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "delete": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "do": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "double": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "else": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "enum": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "export": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "extends": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "false": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "final": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "finally": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "float": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "for": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "from": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "function": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "get": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "goto": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "if": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "implements": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "import": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "in": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "instanceof": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "int": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "interface": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "let": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "long": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "native": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "new": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "null": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "of": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "package": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "private": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "protected": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "public": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "return": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "set": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "short": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "static": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "super": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "switch": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "synchronized": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "this": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "throw": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "throws": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "transient": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "true": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "try": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "typeof": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "var": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "void": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "volatile": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "while": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "with": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "yield": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "type": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "expectedBefore": "Expected space(s) before \"{{value}}\".",
                    "expectedAfter": "Expected space(s) after \"{{value}}\".",
                    "unexpectedBefore": "Unexpected space(s) before \"{{value}}\".",
                    "unexpectedAfter": "Unexpected space(s) after \"{{value}}\"."
                },
                "url": "https://typescript-eslint.io/rules/keyword-spacing",
                "description": "Enforce consistent spacing before and after keywords",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": { "severity": "off" }
            },
            "member-delimiter-style": {
                "type": "layout",
                "fixable": "whitespace",
                "messages": {
                    "unexpectedComma": "Unexpected separator (,).",
                    "unexpectedSemi": "Unexpected separator (;).",
                    "expectedComma": "Expected a comma.",
                    "expectedSemi": "Expected a semicolon."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "multiline": {
                                "type": "object",
                                "properties": { "delimiter": { "enum": [
                                            "none",
                                            "semi",
                                            "comma"
                                        ] }, "requireLast": { "type": "boolean" } },
                                "additionalProperties": false
                            },
                            "singleline": {
                                "type": "object",
                                "properties": {
                                    "delimiter": { "enum": ["semi", "comma"] },
                                    "requireLast": { "type": "boolean" }
                                },
                                "additionalProperties": false
                            },
                            "overrides": {
                                "type": "object",
                                "properties": {
                                    "interface": {
                                        "type": "object",
                                        "properties": {
                                            "multiline": {
                                                "type": "object",
                                                "properties": {
                                                    "delimiter": { "enum": [
                                                            "none",
                                                            "semi",
                                                            "comma"
                                                        ] },
                                                    "requireLast": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "singleline": {
                                                "type": "object",
                                                "properties": {
                                                    "delimiter": { "enum": ["semi", "comma"] },
                                                    "requireLast": { "type": "boolean" }
                                                },
                                                "additionalProperties": false
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "typeLiteral": {
                                        "type": "object",
                                        "properties": {
                                            "multiline": {
                                                "type": "object",
                                                "properties": {
                                                    "delimiter": { "enum": [
                                                            "none",
                                                            "semi",
                                                            "comma"
                                                        ] },
                                                    "requireLast": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "singleline": {
                                                "type": "object",
                                                "properties": {
                                                    "delimiter": { "enum": ["semi", "comma"] },
                                                    "requireLast": { "type": "boolean" }
                                                },
                                                "additionalProperties": false
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            },
                            "multilineDetection": { "enum": ["brackets", "last-member"] }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://typescript-eslint.io/rules/member-delimiter-style",
                "description": "Require a specific member delimiter style for interfaces and type literals",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "no-extra-parens": {
                "type": "layout",
                "fixable": "code",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [{ "enum": ["functions"] }],
                            "minItems": 0,
                            "maxItems": 1
                        },
                        {
                            "type": "array",
                            "items": [
                                { "enum": ["all"] },
                                {
                                    "type": "object",
                                    "properties": {
                                        "conditionalAssign": { "type": "boolean" },
                                        "nestedBinaryExpressions": { "type": "boolean" },
                                        "returnAssign": { "type": "boolean" },
                                        "ignoreJSX": { "enum": [
                                                "none",
                                                "all",
                                                "single-line",
                                                "multi-line"
                                            ] },
                                        "enforceForArrowConditionals": { "type": "boolean" },
                                        "enforceForSequenceExpressions": { "type": "boolean" },
                                        "enforceForNewInMemberExpressions": { "type": "boolean" },
                                        "enforceForFunctionPrototypeMethods": { "type": "boolean" },
                                        "allowParensAfterCommentPattern": { "type": "string" }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "messages": { "unexpected": "Unnecessary parentheses around expression." },
                "url": "https://typescript-eslint.io/rules/no-extra-parens",
                "description": "Disallow unnecessary parentheses",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": { "severity": "off" }
            },
            "no-extra-semi": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [],
                "messages": { "unexpected": "Unnecessary semicolon." },
                "url": "https://typescript-eslint.io/rules/no-extra-semi",
                "description": "Disallow unnecessary semicolons",
                "recommended": "error",
                "extendsBaseRule": true,
                "ts": { "severity": "off" }
            },
            "object-curly-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    { "enum": ["always", "never"] },
                    {
                        "type": "object",
                        "properties": {
                            "arraysInObjects": { "type": "boolean" },
                            "objectsInObjects": { "type": "boolean" }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "requireSpaceBefore": "A space is required before '{{token}}'.",
                    "requireSpaceAfter": "A space is required after '{{token}}'.",
                    "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                    "unexpectedSpaceAfter": "There should be no space after '{{token}}'."
                },
                "url": "https://typescript-eslint.io/rules/object-curly-spacing",
                "description": "Enforce consistent spacing inside braces",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": { "severity": "off" }
            },
            "semi": {
                "type": "layout",
                "fixable": "code",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                { "enum": ["never"] },
                                {
                                    "type": "object",
                                    "properties": { "beforeStatementContinuationChars": { "enum": [
                                                "always",
                                                "any",
                                                "never"
                                            ] } },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        },
                        {
                            "type": "array",
                            "items": [
                                { "enum": ["always"] },
                                {
                                    "type": "object",
                                    "properties": {
                                        "omitLastInOneLineBlock": { "type": "boolean" }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "messages": {
                    "missingSemi": "Missing semicolon.",
                    "extraSemi": "Extra semicolon."
                },
                "url": "https://typescript-eslint.io/rules/semi",
                "description": "Require or disallow semicolons instead of ASI",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": { "severity": "off" }
            },
            "space-before-blocks": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            { "enum": ["always", "never"] },
                            { "type": "object", "properties": { "keywords": { "enum": [
                                            "always",
                                            "never",
                                            "off"
                                        ] }, "functions": { "enum": [
                                            "always",
                                            "never",
                                            "off"
                                        ] }, "classes": { "enum": [
                                            "always",
                                            "never",
                                            "off"
                                        ] } }, "additionalProperties": false }
                        ]
                    }
                ],
                "messages": {
                    "unexpectedSpace": "Unexpected space before opening brace.",
                    "missingSpace": "Missing space before opening brace."
                },
                "url": "https://typescript-eslint.io/rules/space-before-blocks",
                "description": "Enforce consistent spacing before blocks",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": { "severity": "off" }
            },
            "space-before-function-paren": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            { "enum": ["always", "never"] },
                            { "type": "object", "properties": { "anonymous": { "enum": [
                                            "always",
                                            "never",
                                            "ignore"
                                        ] }, "named": { "enum": [
                                            "always",
                                            "never",
                                            "ignore"
                                        ] }, "asyncArrow": { "enum": [
                                            "always",
                                            "never",
                                            "ignore"
                                        ] } }, "additionalProperties": false }
                        ]
                    }
                ],
                "messages": {
                    "unexpected": "Unexpected space before function parentheses.",
                    "missing": "Missing space before function parentheses."
                },
                "url": "https://typescript-eslint.io/rules/space-before-function-paren",
                "description": "Enforce consistent spacing before function parenthesis",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": { "severity": "off" }
            },
            "space-infix-ops": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": { "int32Hint": { "type": "boolean", "default": false } },
                        "additionalProperties": false
                    }
                ],
                "messages": { "missingSpace": "Operator '{{operator}}' must be spaced." },
                "url": "https://typescript-eslint.io/rules/space-infix-ops",
                "description": "Require spacing around infix operators",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": { "severity": "off" }
            },
            "type-annotation-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "messages": {
                    "expectedSpaceAfter": "Expected a space after the '{{type}}'.",
                    "expectedSpaceBefore": "Expected a space before the '{{type}}'.",
                    "unexpectedSpaceAfter": "Unexpected space after the '{{type}}'.",
                    "unexpectedSpaceBefore": "Unexpected space before the '{{type}}'.",
                    "unexpectedSpaceBetween": "Unexpected space between the '{{previousToken}}' and the '{{type}}'."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "before": { "type": "boolean" },
                            "after": { "type": "boolean" },
                            "overrides": {
                                "type": "object",
                                "properties": {
                                    "colon": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "arrow": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "variable": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "parameter": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "property": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    },
                                    "returnType": {
                                        "type": "object",
                                        "properties": {
                                            "before": { "type": "boolean" },
                                            "after": { "type": "boolean" }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://typescript-eslint.io/rules/type-annotation-spacing",
                "description": "Require consistent spacing around type annotations",
                "recommended": false,
                "ts": { "severity": "off" }
            },
            "ban-ts-comment": {
                "type": "problem",
                "messages": {
                    "tsDirectiveComment": "Do not use \"@ts-{{directive}}\" because it alters compilation errors.",
                    "tsDirectiveCommentRequiresDescription": "Include a description after the \"@ts-{{directive}}\" directive to explain why the @ts-{{directive}} is necessary. The description must be {{minimumDescriptionLength}} characters or longer.",
                    "tsDirectiveCommentDescriptionNotMatchPattern": "The description for the \"@ts-{{directive}}\" directive must match the {{format}} format."
                },
                "schema": {
                    "$defs": {
                        "directiveConfigSchema": {
                            "oneOf": [
                                { "type": "boolean", "default": true },
                                { "enum": ["allow-with-description"] },
                                {
                                    "type": "object",
                                    "properties": { "descriptionFormat": { "type": "string" } }
                                }
                            ]
                        }
                    },
                    "prefixItems": [
                        {
                            "properties": {
                                "ts-expect-error": { "$ref": "#/$defs/directiveConfigSchema" },
                                "ts-ignore": { "$ref": "#/$defs/directiveConfigSchema" },
                                "ts-nocheck": { "$ref": "#/$defs/directiveConfigSchema" },
                                "ts-check": { "$ref": "#/$defs/directiveConfigSchema" },
                                "minimumDescriptionLength": { "type": "number", "default": 3 }
                            },
                            "additionalProperties": false
                        }
                    ],
                    "type": "array"
                },
                "url": "https://typescript-eslint.io/rules/ban-ts-comment",
                "description": "Disallow `@ts-<directive>` comments or require descriptions after directives",
                "recommended": "error",
                "ts": { "severity": "warn" }
            },
            "no-unsafe-call": {
                "type": "problem",
                "messages": {
                    "unsafeCall": "Unsafe call of an `any` typed value.",
                    "unsafeCallThis": "Unsafe call of an `any` typed value. `this` is typed as `any`.\nYou can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.",
                    "unsafeNew": "Unsafe construction of an any type value.",
                    "unsafeTemplateTag": "Unsafe any typed template tag."
                },
                "schema": [],
                "url": "https://typescript-eslint.io/rules/no-unsafe-call",
                "description": "Disallow calling a value with type `any`",
                "recommended": "error",
                "requiresTypeChecking": true,
                "ts": { "severity": "off" }
            },
            "no-inferrable-types": {
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "noInferrableType": "Type {{type}} trivially inferred from a {{type}} literal, remove type annotation."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "ignoreParameters": { "type": "boolean" },
                            "ignoreProperties": { "type": "boolean" }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://typescript-eslint.io/rules/no-inferrable-types",
                "description": "Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean",
                "recommended": "error",
                "ts": { "severity": "off" }
            },
            "no-namespace": {
                "type": "suggestion",
                "messages": {
                    "moduleSyntaxIsPreferred": "ES2015 module syntax is preferred over namespaces."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowDeclarations": {
                                "description": "Whether to allow `declare` with custom TypeScript namespaces.",
                                "type": "boolean"
                            },
                            "allowDefinitionFiles": {
                                "description": "Whether to allow `declare` with custom TypeScript namespaces inside definition files.",
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://typescript-eslint.io/rules/no-namespace",
                "description": "Disallow TypeScript namespaces",
                "recommended": "error",
                "ts": { "severity": "off" }
            },
            "strict-boolean-expressions": {
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowString": { "type": "boolean" },
                            "allowNumber": { "type": "boolean" },
                            "allowNullableObject": { "type": "boolean" },
                            "allowNullableBoolean": { "type": "boolean" },
                            "allowNullableString": { "type": "boolean" },
                            "allowNullableNumber": { "type": "boolean" },
                            "allowAny": { "type": "boolean" },
                            "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "conditionErrorOther": "Unexpected value in conditional. A boolean expression is required.",
                    "conditionErrorAny": "Unexpected any value in conditional. An explicit comparison or type cast is required.",
                    "conditionErrorNullish": "Unexpected nullish value in conditional. The condition is always false.",
                    "conditionErrorNullableBoolean": "Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.",
                    "conditionErrorString": "Unexpected string value in conditional. An explicit empty string check is required.",
                    "conditionErrorNullableString": "Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.",
                    "conditionErrorNumber": "Unexpected number value in conditional. An explicit zero/NaN check is required.",
                    "conditionErrorNullableNumber": "Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.",
                    "conditionErrorObject": "Unexpected object value in conditional. The condition is always true.",
                    "conditionErrorNullableObject": "Unexpected nullable object value in conditional. An explicit null check is required.",
                    "noStrictNullCheck": "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.",
                    "conditionFixDefaultFalse": "Explicitly treat nullish value the same as false (`value ?? false`)",
                    "conditionFixDefaultEmptyString": "Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)",
                    "conditionFixDefaultZero": "Explicitly treat nullish value the same as 0 (`value ?? 0`)",
                    "conditionFixCompareNullish": "Change condition to check for null/undefined (`value != null`)",
                    "conditionFixCastBoolean": "Explicitly cast value to a boolean (`Boolean(value)`)",
                    "conditionFixCompareTrue": "Change condition to check if true (`value === true`)",
                    "conditionFixCompareFalse": "Change condition to check if false (`value === false`)",
                    "conditionFixCompareStringLength": "Change condition to check string's length (`value.length !== 0`)",
                    "conditionFixCompareEmptyString": "Change condition to check for empty string (`value !== \"\"`)",
                    "conditionFixCompareZero": "Change condition to check for 0 (`value !== 0`)",
                    "conditionFixCompareNaN": "Change condition to check for NaN (`!Number.isNaN(value)`)"
                },
                "url": "https://typescript-eslint.io/rules/strict-boolean-expressions",
                "description": "Disallow certain types in boolean expressions",
                "recommended": false,
                "requiresTypeChecking": true,
                "ts": { "severity": "off" }
            },
            "restrict-plus-operands": {
                "type": "problem",
                "messages": {
                    "notNumbers": "Operands of '+' operation must either be both strings or both numbers.",
                    "notStrings": "Operands of '+' operation must either be both strings or both numbers. Consider using a template literal.",
                    "notBigInts": "Operands of '+' operation must be both bigints.",
                    "notValidAnys": "Operands of '+' operation with any is possible only with string, number, bigint or any",
                    "notValidTypes": "Operands of '+' operation must either be one of string, number, bigint or any (if allowed by option)"
                },
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "checkCompoundAssignments": {
                                "description": "Whether to check compound assignments such as `+=`.",
                                "type": "boolean"
                            },
                            "allowAny": {
                                "description": "Whether to allow `any` typed values.",
                                "type": "boolean"
                            }
                        }
                    }
                ],
                "url": "https://typescript-eslint.io/rules/restrict-plus-operands",
                "description": "Require both operands of addition to be the same type and be `bigint`, `number`, or `string`",
                "recommended": "error",
                "requiresTypeChecking": true,
                "ts": { "severity": "off" }
            },
            "prefer-reduce-type-parameter": {
                "type": "problem",
                "messages": {
                    "preferTypeParameter": "Unnecessary cast: Array#reduce accepts a type parameter for the default value."
                },
                "fixable": "code",
                "schema": [],
                "url": "https://typescript-eslint.io/rules/prefer-reduce-type-parameter",
                "description": "Enforce using type parameter when calling `Array#reduce` instead of casting",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "ts": { "severity": "off" }
            },
            "no-unused-vars": {
                "type": "problem",
                "schema": [
                    {
                        "oneOf": [
                            { "enum": ["all", "local"] },
                            {
                                "type": "object",
                                "properties": {
                                    "vars": { "enum": ["all", "local"] },
                                    "varsIgnorePattern": { "type": "string" },
                                    "args": { "enum": [
                                            "all",
                                            "after-used",
                                            "none"
                                        ] },
                                    "ignoreRestSiblings": { "type": "boolean" },
                                    "argsIgnorePattern": { "type": "string" },
                                    "caughtErrors": { "enum": ["all", "none"] },
                                    "caughtErrorsIgnorePattern": { "type": "string" },
                                    "destructuredArrayIgnorePattern": { "type": "string" }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}."
                },
                "url": "https://typescript-eslint.io/rules/no-unused-vars",
                "description": "Disallow unused variables",
                "recommended": "warn",
                "extendsBaseRule": true,
                "ts": { "severity": "warn" }
            },
            "no-dupe-class-members": {
                "type": "problem",
                "schema": [],
                "messages": { "unexpected": "Duplicate name '{{name}}'." },
                "url": "https://typescript-eslint.io/rules/no-dupe-class-members",
                "description": "Disallow duplicate class members",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": { "severity": "error" }
            },
            "no-redeclare": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "builtinGlobals": { "type": "boolean" },
                            "ignoreDeclarationMerge": { "type": "boolean" }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "redeclared": "'{{id}}' is already defined.",
                    "redeclaredAsBuiltin": "'{{id}}' is already defined as a built-in global variable.",
                    "redeclaredBySyntax": "'{{id}}' is already defined by a variable declaration."
                },
                "url": "https://typescript-eslint.io/rules/no-redeclare",
                "description": "Disallow variable redeclaration",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": { "severity": "error" }
            },
            "no-useless-constructor": {
                "type": "problem",
                "schema": [],
                "messages": { "noUselessConstructor": "Useless constructor." },
                "url": "https://typescript-eslint.io/rules/no-useless-constructor",
                "description": "Disallow unnecessary constructors",
                "recommended": "strict",
                "extendsBaseRule": true,
                "ts": { "severity": "error" }
            },
            "no-throw-literal": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowThrowingAny": { "type": "boolean" },
                            "allowThrowingUnknown": { "type": "boolean" }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "object": "Expected an error object to be thrown.",
                    "undef": "Do not throw undefined."
                },
                "url": "https://typescript-eslint.io/rules/no-throw-literal",
                "description": "Disallow throwing literals as exceptions",
                "recommended": "strict",
                "extendsBaseRule": true,
                "requiresTypeChecking": true,
                "ts": { "severity": "error" }
            },
            "explicit-function-return-type": {
                "type": "problem",
                "messages": { "missingReturnType": "Missing return type on function." },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowConciseArrowFunctionExpressionsStartingWithVoid": {
                                "description": "Whether to allow arrow functions that start with the `void` keyword.",
                                "type": "boolean"
                            },
                            "allowExpressions": {
                                "description": "Whether to ignore function expressions (functions which are not part of a declaration).",
                                "type": "boolean"
                            },
                            "allowHigherOrderFunctions": {
                                "description": "Whether to ignore functions immediately returning another function expression.",
                                "type": "boolean"
                            },
                            "allowTypedFunctionExpressions": {
                                "description": "Whether to ignore type annotations on the variable of function expressions.",
                                "type": "boolean"
                            },
                            "allowDirectConstAssertionInArrowFunctions": {
                                "description": "Whether to ignore arrow functions immediately returning a `as const` value.",
                                "type": "boolean"
                            },
                            "allowedNames": {
                                "description": "An array of function/method names that will not have their arguments or return values checked.",
                                "items": { "type": "string" },
                                "type": "array"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://typescript-eslint.io/rules/explicit-function-return-type",
                "description": "Require explicit return types on functions and class methods",
                "recommended": false,
                "ts": { "severity": "error" }
            },
            "no-confusing-non-null-assertion": {
                "type": "problem",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "confusingEqual": "Confusing combinations of non-null assertion and equal test like \"a! == b\", which looks very similar to not equal \"a !== b\".",
                    "confusingAssign": "Confusing combinations of non-null assertion and equal test like \"a! = b\", which looks very similar to not equal \"a != b\".",
                    "notNeedInEqualTest": "Unnecessary non-null assertion (!) in equal test.",
                    "notNeedInAssign": "Unnecessary non-null assertion (!) in assignment left hand.",
                    "wrapUpLeft": "Wrap up left hand to avoid putting non-null assertion \"!\" and \"=\" together."
                },
                "schema": [],
                "url": "https://typescript-eslint.io/rules/no-confusing-non-null-assertion",
                "description": "Disallow non-null assertion in locations that may be confusing",
                "recommended": "strict",
                "ts": { "severity": "error" }
            },
            "no-duplicate-enum-values": {
                "type": "problem",
                "hasSuggestions": false,
                "messages": { "duplicateValue": "Duplicate enum member value {{value}}." },
                "schema": [],
                "url": "https://typescript-eslint.io/rules/no-duplicate-enum-values",
                "description": "Disallow duplicate enum member values",
                "recommended": "strict",
                "ts": { "severity": "error" }
            },
            "no-dynamic-delete": {
                "fixable": "code",
                "messages": {
                    "dynamicDelete": "Do not delete dynamically computed property keys."
                },
                "schema": [],
                "type": "suggestion",
                "url": "https://typescript-eslint.io/rules/no-dynamic-delete",
                "description": "Disallow using the `delete` operator on computed key expressions",
                "recommended": "strict",
                "ts": { "severity": "error" }
            },
            "no-invalid-void-type": {
                "type": "problem",
                "messages": {
                    "invalidVoidForGeneric": "{{ generic }} may not have void as a type argument.",
                    "invalidVoidNotReturnOrGeneric": "void is only valid as a return type or generic type argument.",
                    "invalidVoidNotReturn": "void is only valid as a return type.",
                    "invalidVoidNotReturnOrThisParam": "void is only valid as return type or type of `this` parameter.",
                    "invalidVoidNotReturnOrThisParamOrGeneric": "void is only valid as a return type or generic type argument or the type of a `this` parameter.",
                    "invalidVoidUnionConstituent": "void is not valid as a constituent in a union type"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowInGenericTypeArguments": {
                                "oneOf": [
                                    { "type": "boolean" },
                                    {
                                        "type": "array",
                                        "items": { "type": "string" },
                                        "minLength": 1
                                    }
                                ]
                            },
                            "allowAsThisParameter": { "type": "boolean" }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://typescript-eslint.io/rules/no-invalid-void-type",
                "description": "Disallow `void` type outside of generic or return types",
                "recommended": "strict",
                "ts": { "severity": "error" }
            },
            "explicit-module-boundary-types": {
                "type": "problem",
                "messages": {
                    "missingReturnType": "Missing return type on function.",
                    "missingArgType": "Argument '{{name}}' should be typed.",
                    "missingArgTypeUnnamed": "{{type}} argument should be typed.",
                    "anyTypedArg": "Argument '{{name}}' should be typed with a non-any type.",
                    "anyTypedArgUnnamed": "{{type}} argument should be typed with a non-any type."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowArgumentsExplicitlyTypedAsAny": {
                                "description": "Whether to ignore arguments that are explicitly typed as `any`.",
                                "type": "boolean"
                            },
                            "allowDirectConstAssertionInArrowFunctions": {
                                "description": "Whether to ignore return type annotations on body-less arrow functions that return an `as const` type assertion.\nYou must still type the parameters of the function.",
                                "type": "boolean"
                            },
                            "allowedNames": {
                                "description": "An array of function/method names that will not have their arguments or return values checked.",
                                "items": { "type": "string" },
                                "type": "array"
                            },
                            "allowHigherOrderFunctions": {
                                "description": "Whether to ignore return type annotations on functions immediately returning another function expression.\nYou must still type the parameters of the function.",
                                "type": "boolean"
                            },
                            "allowTypedFunctionExpressions": {
                                "description": "Whether to ignore type annotations on the variable of a function expresion.",
                                "type": "boolean"
                            },
                            "shouldTrackReferences": { "type": "boolean" }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://typescript-eslint.io/rules/explicit-module-boundary-types",
                "description": "Require explicit return and argument types on exported functions' and classes' public class methods",
                "recommended": false,
                "ts": { "severity": "error" }
            },
            "no-base-to-string": {
                "messages": {
                    "baseToString": "'{{name}}' {{certainty}} evaluate to '[object Object]' when stringified."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "ignoredTypeNames": { "type": "array", "items": { "type": "string" } }
                        },
                        "additionalProperties": false
                    }
                ],
                "type": "suggestion",
                "url": "https://typescript-eslint.io/rules/no-base-to-string",
                "description": "Require `.toString()` to only be called on objects which provide useful information when stringified",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "ts": { "severity": "error" }
            },
            "no-for-in-array": {
                "messages": {
                    "forInViolation": "For-in loops over arrays are forbidden. Use for-of or array.forEach instead."
                },
                "schema": [],
                "type": "problem",
                "url": "https://typescript-eslint.io/rules/no-for-in-array",
                "description": "Disallow iterating over an array with a for-in loop",
                "recommended": "error",
                "requiresTypeChecking": true,
                "ts": { "severity": "error" }
            },
            "no-unnecessary-qualifier": {
                "fixable": "code",
                "messages": {
                    "unnecessaryQualifier": "Qualifier is unnecessary since '{{ name }}' is in scope."
                },
                "schema": [],
                "type": "suggestion",
                "url": "https://typescript-eslint.io/rules/no-unnecessary-qualifier",
                "description": "Disallow unnecessary namespace qualifiers",
                "recommended": false,
                "requiresTypeChecking": true,
                "ts": { "severity": "error" }
            },
            "no-misused-promises": {
                "messages": {
                    "voidReturnArgument": "Promise returned in function argument where a void return was expected.",
                    "voidReturnVariable": "Promise-returning function provided to variable where a void return was expected.",
                    "voidReturnProperty": "Promise-returning function provided to property where a void return was expected.",
                    "voidReturnReturnValue": "Promise-returning function provided to return value where a void return was expected.",
                    "voidReturnAttribute": "Promise-returning function provided to attribute where a void return was expected.",
                    "conditional": "Expected non-Promise value in a boolean conditional.",
                    "spread": "Expected a non-Promise value to be spreaded in an object."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "checksConditionals": { "type": "boolean" },
                            "checksVoidReturn": {
                                "oneOf": [
                                    { "type": "boolean" },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "arguments": { "type": "boolean" },
                                            "attributes": { "type": "boolean" },
                                            "properties": { "type": "boolean" },
                                            "returns": { "type": "boolean" },
                                            "variables": { "type": "boolean" }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "checksSpreads": { "type": "boolean" }
                        }
                    }
                ],
                "type": "problem",
                "url": "https://typescript-eslint.io/rules/no-misused-promises",
                "description": "Disallow Promises in places not designed to handle them",
                "recommended": "error",
                "requiresTypeChecking": true,
                "ts": { "severity": "error" }
            },
            "no-require-imports": {
                "type": "problem",
                "schema": [],
                "messages": { "noRequireImports": "A `require()` style import is forbidden." },
                "url": "https://typescript-eslint.io/rules/no-require-imports",
                "description": "Disallow invocation of `require()`",
                "recommended": false,
                "ts": { "severity": "error" }
            },
            "no-this-alias": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "allowDestructuring": {
                                "description": "Whether to ignore destructurings, such as `const { props, state } = this`.",
                                "type": "boolean"
                            },
                            "allowedNames": {
                                "description": "Names to ignore, such as [\"self\"] for `const self = this;`.",
                                "type": "array",
                                "items": { "type": "string" }
                            }
                        }
                    }
                ],
                "messages": {
                    "thisAssignment": "Unexpected aliasing of 'this' to local variable.",
                    "thisDestructure": "Unexpected aliasing of members of 'this' to local variables."
                },
                "url": "https://typescript-eslint.io/rules/no-this-alias",
                "description": "Disallow aliasing `this`",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-unsafe-argument": {
                "type": "problem",
                "messages": {
                    "unsafeArgument": "Unsafe argument of type `{{sender}}` assigned to a parameter of type `{{receiver}}`.",
                    "unsafeTupleSpread": "Unsafe spread of a tuple type. The argument is of type `{{sender}}` and is assigned to a parameter of type `{{receiver}}`.",
                    "unsafeArraySpread": "Unsafe spread of an `any` array type.",
                    "unsafeSpread": "Unsafe spread of an `any` type."
                },
                "schema": [],
                "url": "https://typescript-eslint.io/rules/no-unsafe-argument",
                "description": "Disallow calling a function with a value with type `any`",
                "recommended": "error",
                "requiresTypeChecking": true,
                "ts": { "severity": "error" }
            },
            "no-unsafe-declaration-merging": {
                "type": "problem",
                "messages": {
                    "unsafeMerging": "Unsafe declaration merging between classes and interfaces."
                },
                "schema": [],
                "url": "https://typescript-eslint.io/rules/no-unsafe-declaration-merging",
                "description": "Disallow unsafe declaration merging",
                "recommended": "strict",
                "requiresTypeChecking": false,
                "ts": { "severity": "error" }
            },
            "no-useless-empty-export": {
                "fixable": "code",
                "hasSuggestions": false,
                "messages": { "uselessExport": "Empty export does nothing and can be removed." },
                "schema": [],
                "type": "suggestion",
                "url": "https://typescript-eslint.io/rules/no-useless-empty-export",
                "description": "Disallow empty exports that don't change anything in a module file",
                "recommended": false,
                "ts": { "severity": "error" }
            },
            "no-var-requires": {
                "type": "problem",
                "messages": { "noVarReqs": "Require statement not part of import statement." },
                "schema": [],
                "url": "https://typescript-eslint.io/rules/no-var-requires",
                "description": "Disallow `require` statements except in import statements",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "non-nullable-type-assertion-style": {
                "fixable": "code",
                "messages": {
                    "preferNonNullAssertion": "Use a ! assertion to more succinctly remove null and undefined from the type."
                },
                "schema": [],
                "type": "suggestion",
                "url": "https://typescript-eslint.io/rules/non-nullable-type-assertion-style",
                "description": "Enforce non-null assertions over explicit type casts",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "ts": { "severity": "error" }
            },
            "prefer-function-type": {
                "fixable": "code",
                "messages": {
                    "functionTypeOverCallableType": "{{ literalOrInterface }} only has a call signature, you should use a function type instead.",
                    "unexpectedThisOnFunctionOnlyInterface": "`this` refers to the function type '{{ interfaceName }}', did you intend to use a generic `this` parameter like `<Self>(this: Self, ...) => Self` instead?"
                },
                "schema": [],
                "type": "suggestion",
                "url": "https://typescript-eslint.io/rules/prefer-function-type",
                "description": "Enforce using function types instead of interfaces with call signatures",
                "recommended": "strict",
                "ts": { "severity": "error" }
            },
            "triple-slash-reference": {
                "type": "suggestion",
                "messages": {
                    "tripleSlashReference": "Do not use a triple slash reference for {{module}}, use `import` style instead."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "lib": { "enum": ["always", "never"] },
                            "path": { "enum": ["always", "never"] },
                            "types": { "enum": [
                                    "always",
                                    "never",
                                    "prefer-import"
                                ] }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://typescript-eslint.io/rules/triple-slash-reference",
                "description": "Disallow certain triple slash directives in favor of ES6-style import declarations",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "prefer-ts-expect-error": {
                "type": "problem",
                "fixable": "code",
                "messages": {
                    "preferExpectErrorComment": "Use \"@ts-expect-error\" to ensure an error is actually being suppressed."
                },
                "schema": [],
                "url": "https://typescript-eslint.io/rules/prefer-ts-expect-error",
                "description": "Enforce using `@ts-expect-error` over `@ts-ignore`",
                "recommended": "strict",
                "ts": { "severity": "error" }
            },
            "unified-signatures": {
                "type": "suggestion",
                "messages": {
                    "omittingRestParameter": "{{failureStringStart}} with a rest parameter.",
                    "omittingSingleParameter": "{{failureStringStart}} with an optional parameter.",
                    "singleParameterDifference": "{{failureStringStart}} taking `{{type1}} | {{type2}}`."
                },
                "schema": [
                    {
                        "additionalProperties": false,
                        "properties": {
                            "ignoreDifferentlyNamedParameters": {
                                "description": "Whether two parameters with different names at the same index should be considered different even if their types are the same.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                ],
                "url": "https://typescript-eslint.io/rules/unified-signatures",
                "description": "Disallow two overloads that could be unified into one with a union or an optional/rest parameter",
                "recommended": "strict",
                "ts": { "severity": "error" }
            },
            "sort-type-constituents": {
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "notSorted": "{{type}} type constituents must be sorted.",
                    "notSortedNamed": "{{type}} type {{name}} constituents must be sorted.",
                    "suggestFix": "Sort constituents of type (removes all comments)."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "checkIntersections": {
                                "description": "Whether to check intersection types.",
                                "type": "boolean"
                            },
                            "checkUnions": {
                                "description": "Whether to check union types.",
                                "type": "boolean"
                            },
                            "groupOrder": {
                                "description": "Ordering of the groups.",
                                "type": "array",
                                "items": { "type": "string", "enum": [
                                        "conditional",
                                        "function",
                                        "import",
                                        "intersection",
                                        "keyword",
                                        "nullish",
                                        "literal",
                                        "named",
                                        "object",
                                        "operator",
                                        "tuple",
                                        "union"
                                    ] }
                            }
                        }
                    }
                ],
                "url": "https://typescript-eslint.io/rules/sort-type-constituents",
                "description": "Enforce constituents of a type union/intersection to be sorted alphabetically",
                "recommended": false,
                "ts": { "severity": "warn" }
            },
            "prefer-optional-chain": {
                "type": "suggestion",
                "hasSuggestions": true,
                "messages": {
                    "preferOptionalChain": "Prefer using an optional chain expression instead, as it's more concise and easier to read.",
                    "optionalChainSuggest": "Change to an optional chain."
                },
                "schema": [],
                "url": "https://typescript-eslint.io/rules/prefer-optional-chain",
                "description": "Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects",
                "recommended": "strict",
                "ts": { "severity": "warn" }
            },
            "no-unnecessary-boolean-literal-compare": {
                "fixable": "code",
                "messages": {
                    "direct": "This expression unnecessarily compares a boolean value to a boolean instead of using it directly.",
                    "negated": "This expression unnecessarily compares a boolean value to a boolean instead of negating it.",
                    "comparingNullableToTrueDirect": "This expression unnecessarily compares a nullable boolean value to true instead of using it directly.",
                    "comparingNullableToTrueNegated": "This expression unnecessarily compares a nullable boolean value to true instead of negating it.",
                    "comparingNullableToFalse": "This expression unnecessarily compares a nullable boolean value to false instead of using the ?? operator to provide a default."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowComparingNullableBooleansToTrue": {
                                "description": "Whether to allow comparisons between nullable boolean variables and `true`.",
                                "type": "boolean"
                            },
                            "allowComparingNullableBooleansToFalse": {
                                "description": "Whether to allow comparisons between nullable boolean variables and `false`.",
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "type": "suggestion",
                "url": "https://typescript-eslint.io/rules/no-unnecessary-boolean-literal-compare",
                "description": "Disallow unnecessary equality comparisons against boolean literals",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "ts": { "severity": "warn" }
            },
            "prefer-string-starts-ends-with": {
                "type": "suggestion",
                "messages": {
                    "preferStartsWith": "Use 'String#startsWith' method instead.",
                    "preferEndsWith": "Use the 'String#endsWith' method instead."
                },
                "schema": [],
                "fixable": "code",
                "url": "https://typescript-eslint.io/rules/prefer-string-starts-ends-with",
                "description": "Enforce using `String#startsWith` and `String#endsWith` over other equivalent methods of checking substrings",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "ts": { "severity": "warn" }
            },
            "switch-exhaustiveness-check": {
                "type": "suggestion",
                "hasSuggestions": true,
                "schema": [],
                "messages": {
                    "switchIsNotExhaustive": "Switch is not exhaustive. Cases not matched: {{missingBranches}}",
                    "addMissingCases": "Add branches for missing cases."
                },
                "url": "https://typescript-eslint.io/rules/switch-exhaustiveness-check",
                "description": "Require switch-case statements to be exhaustive with union type",
                "recommended": false,
                "requiresTypeChecking": true,
                "ts": { "severity": "warn" }
            },
            "prefer-for-of": {
                "type": "suggestion",
                "messages": {
                    "preferForOf": "Expected a `for-of` loop instead of a `for` loop with this simple iteration."
                },
                "schema": [],
                "url": "https://typescript-eslint.io/rules/prefer-for-of",
                "description": "Enforce the use of `for-of` loop over the standard `for` loop where possible",
                "recommended": "strict",
                "ts": { "severity": "warn" }
            },
            "require-array-sort-compare": {
                "type": "problem",
                "messages": { "requireCompare": "Require 'compare' argument." },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "ignoreStringArrays": {
                                "description": "Whether to ignore arrays in which all elements are strings.",
                                "type": "boolean"
                            }
                        }
                    }
                ],
                "url": "https://typescript-eslint.io/rules/require-array-sort-compare",
                "description": "Require `Array#sort` calls to always provide a `compareFunction`",
                "recommended": false,
                "requiresTypeChecking": true,
                "ts": { "severity": "error", "options": { "ignoreStringArrays": true } }
            },
            "no-confusing-void-expression": {
                "messages": {
                    "invalidVoidExpr": "Placing a void expression inside another expression is forbidden. Move it to its own statement instead.",
                    "invalidVoidExprWrapVoid": "Void expressions used inside another expression must be moved to its own statement or marked explicitly with the `void` operator.",
                    "invalidVoidExprArrow": "Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.",
                    "invalidVoidExprArrowWrapVoid": "Void expressions returned from an arrow function shorthand must be marked explicitly with the `void` operator.",
                    "invalidVoidExprReturn": "Returning a void expression from a function is forbidden. Please move it before the `return` statement.",
                    "invalidVoidExprReturnLast": "Returning a void expression from a function is forbidden. Please remove the `return` statement.",
                    "invalidVoidExprReturnWrapVoid": "Void expressions returned from a function must be marked explicitly with the `void` operator.",
                    "voidExprWrapVoid": "Mark with an explicit `void` operator."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "ignoreArrowShorthand": { "type": "boolean" },
                            "ignoreVoidOperator": { "type": "boolean" }
                        },
                        "additionalProperties": false
                    }
                ],
                "type": "problem",
                "fixable": "code",
                "hasSuggestions": true,
                "url": "https://typescript-eslint.io/rules/no-confusing-void-expression",
                "description": "Require expressions of type void to appear in statement position",
                "recommended": false,
                "requiresTypeChecking": true,
                "ts": { "severity": "error", "options": { "ignoreArrowShorthand": true } }
            },
            "no-explicit-any": {
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "unexpectedAny": "Unexpected any. Specify a different type.",
                    "suggestUnknown": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.",
                    "suggestNever": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                },
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "fixToUnknown": {
                                "description": "Whether to enable auto-fixing in which the `any` type is converted to the `unknown` type.",
                                "type": "boolean"
                            },
                            "ignoreRestArgs": {
                                "description": "Whether to ignore rest parameter arrays.",
                                "type": "boolean"
                            }
                        }
                    }
                ],
                "url": "https://typescript-eslint.io/rules/no-explicit-any",
                "description": "Disallow the `any` type",
                "recommended": "warn",
                "ts": {
                    "severity": "warn",
                    "options": { "fixToUnknown": false, "ignoreRestArgs": true }
                }
            },
            "typedef": {
                "messages": {
                    "expectedTypedef": "Expected a type annotation.",
                    "expectedTypedefNamed": "Expected {{name}} to have a type annotation."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "arrayDestructuring": { "type": "boolean" },
                            "arrowParameter": { "type": "boolean" },
                            "memberVariableDeclaration": { "type": "boolean" },
                            "objectDestructuring": { "type": "boolean" },
                            "parameter": { "type": "boolean" },
                            "propertyDeclaration": { "type": "boolean" },
                            "variableDeclaration": { "type": "boolean" },
                            "variableDeclarationIgnoreFunction": { "type": "boolean" }
                        }
                    }
                ],
                "type": "suggestion",
                "url": "https://typescript-eslint.io/rules/typedef",
                "description": "Require type annotations in certain places",
                "recommended": false,
                "ts": {
                    "severity": "error",
                    "options": {
                        "memberVariableDeclaration": true,
                        "variableDeclaration": false,
                        "parameter": true,
                        "propertyDeclaration": true
                    }
                }
            },
            "explicit-member-accessibility": {
                "hasSuggestions": true,
                "type": "problem",
                "fixable": "code",
                "messages": {
                    "missingAccessibility": "Missing accessibility modifier on {{type}} {{name}}.",
                    "unwantedPublicAccessibility": "Public accessibility modifier on {{type}} {{name}}.",
                    "addExplicitAccessibility": "Add '{{ type }}' accessibility modifier"
                },
                "schema": {
                    "$defs": {
                        "accessibilityLevel": {
                            "oneOf": [
                                {
                                    "const": "explicit",
                                    "description": "Always require an accessor."
                                },
                                {
                                    "const": "no-public",
                                    "description": "Require an accessor except when public."
                                },
                                {
                                    "const": "off",
                                    "description": "Never check whether there is an accessor."
                                }
                            ]
                        }
                    },
                    "prefixItems": [
                        {
                            "type": "object",
                            "properties": {
                                "accessibility": { "$ref": "#/$defs/accessibilityLevel" },
                                "overrides": {
                                    "type": "object",
                                    "properties": {
                                        "accessors": { "$ref": "#/$defs/accessibilityLevel" },
                                        "constructors": { "$ref": "#/$defs/accessibilityLevel" },
                                        "methods": { "$ref": "#/$defs/accessibilityLevel" },
                                        "properties": { "$ref": "#/$defs/accessibilityLevel" },
                                        "parameterProperties": {
                                            "$ref": "#/$defs/accessibilityLevel"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "ignoredMethodNames": {
                                    "type": "array",
                                    "items": { "type": "string" }
                                }
                            },
                            "additionalProperties": false
                        }
                    ],
                    "type": "array"
                },
                "url": "https://typescript-eslint.io/rules/explicit-member-accessibility",
                "description": "Require explicit accessibility modifiers on class properties and methods",
                "recommended": false,
                "ts": { "severity": "error", "options": { "overrides": { "constructors": "off" } } }
            },
            "member-ordering": {
                "type": "suggestion",
                "messages": {
                    "incorrectOrder": "Member {{member}} should be declared before member {{beforeMember}}.",
                    "incorrectGroupOrder": "Member {{name}} should be declared before all {{rank}} definitions.",
                    "incorrectRequiredMembersOrder": "Member {{member}} should be declared after all {{optionalOrRequired}} members."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "default": {
                                "oneOf": [
                                    { "type": "string", "enum": ["never"] },
                                    { "type": "array", "items": { "oneOf": [{ "enum": [
                                                        "signature",
                                                        "field",
                                                        "public-field",
                                                        "public-decorated-field",
                                                        "decorated-field",
                                                        "static-field",
                                                        "public-static-field",
                                                        "instance-field",
                                                        "public-instance-field",
                                                        "abstract-field",
                                                        "public-abstract-field",
                                                        "protected-field",
                                                        "protected-decorated-field",
                                                        "protected-static-field",
                                                        "protected-instance-field",
                                                        "protected-abstract-field",
                                                        "private-field",
                                                        "private-decorated-field",
                                                        "private-static-field",
                                                        "private-instance-field",
                                                        "#private-field",
                                                        "#private-static-field",
                                                        "#private-instance-field",
                                                        "method",
                                                        "public-method",
                                                        "public-decorated-method",
                                                        "decorated-method",
                                                        "static-method",
                                                        "public-static-method",
                                                        "instance-method",
                                                        "public-instance-method",
                                                        "abstract-method",
                                                        "public-abstract-method",
                                                        "protected-method",
                                                        "protected-decorated-method",
                                                        "protected-static-method",
                                                        "protected-instance-method",
                                                        "protected-abstract-method",
                                                        "private-method",
                                                        "private-decorated-method",
                                                        "private-static-method",
                                                        "private-instance-method",
                                                        "#private-method",
                                                        "#private-static-method",
                                                        "#private-instance-method",
                                                        "call-signature",
                                                        "constructor",
                                                        "public-constructor",
                                                        "protected-constructor",
                                                        "private-constructor",
                                                        "get",
                                                        "public-get",
                                                        "public-decorated-get",
                                                        "decorated-get",
                                                        "static-get",
                                                        "public-static-get",
                                                        "instance-get",
                                                        "public-instance-get",
                                                        "abstract-get",
                                                        "public-abstract-get",
                                                        "protected-get",
                                                        "protected-decorated-get",
                                                        "protected-static-get",
                                                        "protected-instance-get",
                                                        "protected-abstract-get",
                                                        "private-get",
                                                        "private-decorated-get",
                                                        "private-static-get",
                                                        "private-instance-get",
                                                        "#private-get",
                                                        "#private-static-get",
                                                        "#private-instance-get",
                                                        "set",
                                                        "public-set",
                                                        "public-decorated-set",
                                                        "decorated-set",
                                                        "static-set",
                                                        "public-static-set",
                                                        "instance-set",
                                                        "public-instance-set",
                                                        "abstract-set",
                                                        "public-abstract-set",
                                                        "protected-set",
                                                        "protected-decorated-set",
                                                        "protected-static-set",
                                                        "protected-instance-set",
                                                        "protected-abstract-set",
                                                        "private-set",
                                                        "private-decorated-set",
                                                        "private-static-set",
                                                        "private-instance-set",
                                                        "#private-set",
                                                        "#private-static-set",
                                                        "#private-instance-set",
                                                        "static-initialization",
                                                        "static-static-initialization",
                                                        "public-static-static-initialization",
                                                        "instance-static-initialization",
                                                        "public-instance-static-initialization",
                                                        "abstract-static-initialization",
                                                        "public-abstract-static-initialization",
                                                        "protected-static-static-initialization",
                                                        "protected-instance-static-initialization",
                                                        "protected-abstract-static-initialization",
                                                        "private-static-static-initialization",
                                                        "private-instance-static-initialization",
                                                        "#private-static-static-initialization",
                                                        "#private-instance-static-initialization"
                                                    ] }, { "type": "array", "items": { "enum": [
                                                            "signature",
                                                            "field",
                                                            "public-field",
                                                            "public-decorated-field",
                                                            "decorated-field",
                                                            "static-field",
                                                            "public-static-field",
                                                            "instance-field",
                                                            "public-instance-field",
                                                            "abstract-field",
                                                            "public-abstract-field",
                                                            "protected-field",
                                                            "protected-decorated-field",
                                                            "protected-static-field",
                                                            "protected-instance-field",
                                                            "protected-abstract-field",
                                                            "private-field",
                                                            "private-decorated-field",
                                                            "private-static-field",
                                                            "private-instance-field",
                                                            "#private-field",
                                                            "#private-static-field",
                                                            "#private-instance-field",
                                                            "method",
                                                            "public-method",
                                                            "public-decorated-method",
                                                            "decorated-method",
                                                            "static-method",
                                                            "public-static-method",
                                                            "instance-method",
                                                            "public-instance-method",
                                                            "abstract-method",
                                                            "public-abstract-method",
                                                            "protected-method",
                                                            "protected-decorated-method",
                                                            "protected-static-method",
                                                            "protected-instance-method",
                                                            "protected-abstract-method",
                                                            "private-method",
                                                            "private-decorated-method",
                                                            "private-static-method",
                                                            "private-instance-method",
                                                            "#private-method",
                                                            "#private-static-method",
                                                            "#private-instance-method",
                                                            "call-signature",
                                                            "constructor",
                                                            "public-constructor",
                                                            "protected-constructor",
                                                            "private-constructor",
                                                            "get",
                                                            "public-get",
                                                            "public-decorated-get",
                                                            "decorated-get",
                                                            "static-get",
                                                            "public-static-get",
                                                            "instance-get",
                                                            "public-instance-get",
                                                            "abstract-get",
                                                            "public-abstract-get",
                                                            "protected-get",
                                                            "protected-decorated-get",
                                                            "protected-static-get",
                                                            "protected-instance-get",
                                                            "protected-abstract-get",
                                                            "private-get",
                                                            "private-decorated-get",
                                                            "private-static-get",
                                                            "private-instance-get",
                                                            "#private-get",
                                                            "#private-static-get",
                                                            "#private-instance-get",
                                                            "set",
                                                            "public-set",
                                                            "public-decorated-set",
                                                            "decorated-set",
                                                            "static-set",
                                                            "public-static-set",
                                                            "instance-set",
                                                            "public-instance-set",
                                                            "abstract-set",
                                                            "public-abstract-set",
                                                            "protected-set",
                                                            "protected-decorated-set",
                                                            "protected-static-set",
                                                            "protected-instance-set",
                                                            "protected-abstract-set",
                                                            "private-set",
                                                            "private-decorated-set",
                                                            "private-static-set",
                                                            "private-instance-set",
                                                            "#private-set",
                                                            "#private-static-set",
                                                            "#private-instance-set",
                                                            "static-initialization",
                                                            "static-static-initialization",
                                                            "public-static-static-initialization",
                                                            "instance-static-initialization",
                                                            "public-instance-static-initialization",
                                                            "abstract-static-initialization",
                                                            "public-abstract-static-initialization",
                                                            "protected-static-static-initialization",
                                                            "protected-instance-static-initialization",
                                                            "protected-abstract-static-initialization",
                                                            "private-static-static-initialization",
                                                            "private-instance-static-initialization",
                                                            "#private-static-static-initialization",
                                                            "#private-instance-static-initialization"
                                                        ] } }] } },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "memberTypes": {
                                                "oneOf": [
                                                    {
                                                        "type": "array",
                                                        "items": {
                                                            "oneOf": [
                                                                { "enum": [
                                                                        "signature",
                                                                        "field",
                                                                        "public-field",
                                                                        "public-decorated-field",
                                                                        "decorated-field",
                                                                        "static-field",
                                                                        "public-static-field",
                                                                        "instance-field",
                                                                        "public-instance-field",
                                                                        "abstract-field",
                                                                        "public-abstract-field",
                                                                        "protected-field",
                                                                        "protected-decorated-field",
                                                                        "protected-static-field",
                                                                        "protected-instance-field",
                                                                        "protected-abstract-field",
                                                                        "private-field",
                                                                        "private-decorated-field",
                                                                        "private-static-field",
                                                                        "private-instance-field",
                                                                        "#private-field",
                                                                        "#private-static-field",
                                                                        "#private-instance-field",
                                                                        "method",
                                                                        "public-method",
                                                                        "public-decorated-method",
                                                                        "decorated-method",
                                                                        "static-method",
                                                                        "public-static-method",
                                                                        "instance-method",
                                                                        "public-instance-method",
                                                                        "abstract-method",
                                                                        "public-abstract-method",
                                                                        "protected-method",
                                                                        "protected-decorated-method",
                                                                        "protected-static-method",
                                                                        "protected-instance-method",
                                                                        "protected-abstract-method",
                                                                        "private-method",
                                                                        "private-decorated-method",
                                                                        "private-static-method",
                                                                        "private-instance-method",
                                                                        "#private-method",
                                                                        "#private-static-method",
                                                                        "#private-instance-method",
                                                                        "call-signature",
                                                                        "constructor",
                                                                        "public-constructor",
                                                                        "protected-constructor",
                                                                        "private-constructor",
                                                                        "get",
                                                                        "public-get",
                                                                        "public-decorated-get",
                                                                        "decorated-get",
                                                                        "static-get",
                                                                        "public-static-get",
                                                                        "instance-get",
                                                                        "public-instance-get",
                                                                        "abstract-get",
                                                                        "public-abstract-get",
                                                                        "protected-get",
                                                                        "protected-decorated-get",
                                                                        "protected-static-get",
                                                                        "protected-instance-get",
                                                                        "protected-abstract-get",
                                                                        "private-get",
                                                                        "private-decorated-get",
                                                                        "private-static-get",
                                                                        "private-instance-get",
                                                                        "#private-get",
                                                                        "#private-static-get",
                                                                        "#private-instance-get",
                                                                        "set",
                                                                        "public-set",
                                                                        "public-decorated-set",
                                                                        "decorated-set",
                                                                        "static-set",
                                                                        "public-static-set",
                                                                        "instance-set",
                                                                        "public-instance-set",
                                                                        "abstract-set",
                                                                        "public-abstract-set",
                                                                        "protected-set",
                                                                        "protected-decorated-set",
                                                                        "protected-static-set",
                                                                        "protected-instance-set",
                                                                        "protected-abstract-set",
                                                                        "private-set",
                                                                        "private-decorated-set",
                                                                        "private-static-set",
                                                                        "private-instance-set",
                                                                        "#private-set",
                                                                        "#private-static-set",
                                                                        "#private-instance-set",
                                                                        "static-initialization",
                                                                        "static-static-initialization",
                                                                        "public-static-static-initialization",
                                                                        "instance-static-initialization",
                                                                        "public-instance-static-initialization",
                                                                        "abstract-static-initialization",
                                                                        "public-abstract-static-initialization",
                                                                        "protected-static-static-initialization",
                                                                        "protected-instance-static-initialization",
                                                                        "protected-abstract-static-initialization",
                                                                        "private-static-static-initialization",
                                                                        "private-instance-static-initialization",
                                                                        "#private-static-static-initialization",
                                                                        "#private-instance-static-initialization"
                                                                    ] },
                                                                {
                                                                    "type": "array",
                                                                    "items": { "enum": [
                                                                            "signature",
                                                                            "field",
                                                                            "public-field",
                                                                            "public-decorated-field",
                                                                            "decorated-field",
                                                                            "static-field",
                                                                            "public-static-field",
                                                                            "instance-field",
                                                                            "public-instance-field",
                                                                            "abstract-field",
                                                                            "public-abstract-field",
                                                                            "protected-field",
                                                                            "protected-decorated-field",
                                                                            "protected-static-field",
                                                                            "protected-instance-field",
                                                                            "protected-abstract-field",
                                                                            "private-field",
                                                                            "private-decorated-field",
                                                                            "private-static-field",
                                                                            "private-instance-field",
                                                                            "#private-field",
                                                                            "#private-static-field",
                                                                            "#private-instance-field",
                                                                            "method",
                                                                            "public-method",
                                                                            "public-decorated-method",
                                                                            "decorated-method",
                                                                            "static-method",
                                                                            "public-static-method",
                                                                            "instance-method",
                                                                            "public-instance-method",
                                                                            "abstract-method",
                                                                            "public-abstract-method",
                                                                            "protected-method",
                                                                            "protected-decorated-method",
                                                                            "protected-static-method",
                                                                            "protected-instance-method",
                                                                            "protected-abstract-method",
                                                                            "private-method",
                                                                            "private-decorated-method",
                                                                            "private-static-method",
                                                                            "private-instance-method",
                                                                            "#private-method",
                                                                            "#private-static-method",
                                                                            "#private-instance-method",
                                                                            "call-signature",
                                                                            "constructor",
                                                                            "public-constructor",
                                                                            "protected-constructor",
                                                                            "private-constructor",
                                                                            "get",
                                                                            "public-get",
                                                                            "public-decorated-get",
                                                                            "decorated-get",
                                                                            "static-get",
                                                                            "public-static-get",
                                                                            "instance-get",
                                                                            "public-instance-get",
                                                                            "abstract-get",
                                                                            "public-abstract-get",
                                                                            "protected-get",
                                                                            "protected-decorated-get",
                                                                            "protected-static-get",
                                                                            "protected-instance-get",
                                                                            "protected-abstract-get",
                                                                            "private-get",
                                                                            "private-decorated-get",
                                                                            "private-static-get",
                                                                            "private-instance-get",
                                                                            "#private-get",
                                                                            "#private-static-get",
                                                                            "#private-instance-get",
                                                                            "set",
                                                                            "public-set",
                                                                            "public-decorated-set",
                                                                            "decorated-set",
                                                                            "static-set",
                                                                            "public-static-set",
                                                                            "instance-set",
                                                                            "public-instance-set",
                                                                            "abstract-set",
                                                                            "public-abstract-set",
                                                                            "protected-set",
                                                                            "protected-decorated-set",
                                                                            "protected-static-set",
                                                                            "protected-instance-set",
                                                                            "protected-abstract-set",
                                                                            "private-set",
                                                                            "private-decorated-set",
                                                                            "private-static-set",
                                                                            "private-instance-set",
                                                                            "#private-set",
                                                                            "#private-static-set",
                                                                            "#private-instance-set",
                                                                            "static-initialization",
                                                                            "static-static-initialization",
                                                                            "public-static-static-initialization",
                                                                            "instance-static-initialization",
                                                                            "public-instance-static-initialization",
                                                                            "abstract-static-initialization",
                                                                            "public-abstract-static-initialization",
                                                                            "protected-static-static-initialization",
                                                                            "protected-instance-static-initialization",
                                                                            "protected-abstract-static-initialization",
                                                                            "private-static-static-initialization",
                                                                            "private-instance-static-initialization",
                                                                            "#private-static-static-initialization",
                                                                            "#private-instance-static-initialization"
                                                                        ] }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    { "type": "string", "enum": ["never"] }
                                                ]
                                            },
                                            "order": { "type": "string", "enum": [
                                                    "alphabetically",
                                                    "alphabetically-case-insensitive",
                                                    "as-written",
                                                    "natural",
                                                    "natural-case-insensitive"
                                                ] },
                                            "optionalityOrder": {
                                                "type": "string",
                                                "enum": ["optional-first", "required-first"]
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                ]
                            },
                            "classes": {
                                "oneOf": [
                                    { "type": "string", "enum": ["never"] },
                                    { "type": "array", "items": { "oneOf": [{ "enum": [
                                                        "signature",
                                                        "field",
                                                        "public-field",
                                                        "public-decorated-field",
                                                        "decorated-field",
                                                        "static-field",
                                                        "public-static-field",
                                                        "instance-field",
                                                        "public-instance-field",
                                                        "abstract-field",
                                                        "public-abstract-field",
                                                        "protected-field",
                                                        "protected-decorated-field",
                                                        "protected-static-field",
                                                        "protected-instance-field",
                                                        "protected-abstract-field",
                                                        "private-field",
                                                        "private-decorated-field",
                                                        "private-static-field",
                                                        "private-instance-field",
                                                        "#private-field",
                                                        "#private-static-field",
                                                        "#private-instance-field",
                                                        "method",
                                                        "public-method",
                                                        "public-decorated-method",
                                                        "decorated-method",
                                                        "static-method",
                                                        "public-static-method",
                                                        "instance-method",
                                                        "public-instance-method",
                                                        "abstract-method",
                                                        "public-abstract-method",
                                                        "protected-method",
                                                        "protected-decorated-method",
                                                        "protected-static-method",
                                                        "protected-instance-method",
                                                        "protected-abstract-method",
                                                        "private-method",
                                                        "private-decorated-method",
                                                        "private-static-method",
                                                        "private-instance-method",
                                                        "#private-method",
                                                        "#private-static-method",
                                                        "#private-instance-method",
                                                        "call-signature",
                                                        "constructor",
                                                        "public-constructor",
                                                        "protected-constructor",
                                                        "private-constructor",
                                                        "get",
                                                        "public-get",
                                                        "public-decorated-get",
                                                        "decorated-get",
                                                        "static-get",
                                                        "public-static-get",
                                                        "instance-get",
                                                        "public-instance-get",
                                                        "abstract-get",
                                                        "public-abstract-get",
                                                        "protected-get",
                                                        "protected-decorated-get",
                                                        "protected-static-get",
                                                        "protected-instance-get",
                                                        "protected-abstract-get",
                                                        "private-get",
                                                        "private-decorated-get",
                                                        "private-static-get",
                                                        "private-instance-get",
                                                        "#private-get",
                                                        "#private-static-get",
                                                        "#private-instance-get",
                                                        "set",
                                                        "public-set",
                                                        "public-decorated-set",
                                                        "decorated-set",
                                                        "static-set",
                                                        "public-static-set",
                                                        "instance-set",
                                                        "public-instance-set",
                                                        "abstract-set",
                                                        "public-abstract-set",
                                                        "protected-set",
                                                        "protected-decorated-set",
                                                        "protected-static-set",
                                                        "protected-instance-set",
                                                        "protected-abstract-set",
                                                        "private-set",
                                                        "private-decorated-set",
                                                        "private-static-set",
                                                        "private-instance-set",
                                                        "#private-set",
                                                        "#private-static-set",
                                                        "#private-instance-set",
                                                        "static-initialization",
                                                        "static-static-initialization",
                                                        "public-static-static-initialization",
                                                        "instance-static-initialization",
                                                        "public-instance-static-initialization",
                                                        "abstract-static-initialization",
                                                        "public-abstract-static-initialization",
                                                        "protected-static-static-initialization",
                                                        "protected-instance-static-initialization",
                                                        "protected-abstract-static-initialization",
                                                        "private-static-static-initialization",
                                                        "private-instance-static-initialization",
                                                        "#private-static-static-initialization",
                                                        "#private-instance-static-initialization"
                                                    ] }, { "type": "array", "items": { "enum": [
                                                            "signature",
                                                            "field",
                                                            "public-field",
                                                            "public-decorated-field",
                                                            "decorated-field",
                                                            "static-field",
                                                            "public-static-field",
                                                            "instance-field",
                                                            "public-instance-field",
                                                            "abstract-field",
                                                            "public-abstract-field",
                                                            "protected-field",
                                                            "protected-decorated-field",
                                                            "protected-static-field",
                                                            "protected-instance-field",
                                                            "protected-abstract-field",
                                                            "private-field",
                                                            "private-decorated-field",
                                                            "private-static-field",
                                                            "private-instance-field",
                                                            "#private-field",
                                                            "#private-static-field",
                                                            "#private-instance-field",
                                                            "method",
                                                            "public-method",
                                                            "public-decorated-method",
                                                            "decorated-method",
                                                            "static-method",
                                                            "public-static-method",
                                                            "instance-method",
                                                            "public-instance-method",
                                                            "abstract-method",
                                                            "public-abstract-method",
                                                            "protected-method",
                                                            "protected-decorated-method",
                                                            "protected-static-method",
                                                            "protected-instance-method",
                                                            "protected-abstract-method",
                                                            "private-method",
                                                            "private-decorated-method",
                                                            "private-static-method",
                                                            "private-instance-method",
                                                            "#private-method",
                                                            "#private-static-method",
                                                            "#private-instance-method",
                                                            "call-signature",
                                                            "constructor",
                                                            "public-constructor",
                                                            "protected-constructor",
                                                            "private-constructor",
                                                            "get",
                                                            "public-get",
                                                            "public-decorated-get",
                                                            "decorated-get",
                                                            "static-get",
                                                            "public-static-get",
                                                            "instance-get",
                                                            "public-instance-get",
                                                            "abstract-get",
                                                            "public-abstract-get",
                                                            "protected-get",
                                                            "protected-decorated-get",
                                                            "protected-static-get",
                                                            "protected-instance-get",
                                                            "protected-abstract-get",
                                                            "private-get",
                                                            "private-decorated-get",
                                                            "private-static-get",
                                                            "private-instance-get",
                                                            "#private-get",
                                                            "#private-static-get",
                                                            "#private-instance-get",
                                                            "set",
                                                            "public-set",
                                                            "public-decorated-set",
                                                            "decorated-set",
                                                            "static-set",
                                                            "public-static-set",
                                                            "instance-set",
                                                            "public-instance-set",
                                                            "abstract-set",
                                                            "public-abstract-set",
                                                            "protected-set",
                                                            "protected-decorated-set",
                                                            "protected-static-set",
                                                            "protected-instance-set",
                                                            "protected-abstract-set",
                                                            "private-set",
                                                            "private-decorated-set",
                                                            "private-static-set",
                                                            "private-instance-set",
                                                            "#private-set",
                                                            "#private-static-set",
                                                            "#private-instance-set",
                                                            "static-initialization",
                                                            "static-static-initialization",
                                                            "public-static-static-initialization",
                                                            "instance-static-initialization",
                                                            "public-instance-static-initialization",
                                                            "abstract-static-initialization",
                                                            "public-abstract-static-initialization",
                                                            "protected-static-static-initialization",
                                                            "protected-instance-static-initialization",
                                                            "protected-abstract-static-initialization",
                                                            "private-static-static-initialization",
                                                            "private-instance-static-initialization",
                                                            "#private-static-static-initialization",
                                                            "#private-instance-static-initialization"
                                                        ] } }] } },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "memberTypes": {
                                                "oneOf": [
                                                    {
                                                        "type": "array",
                                                        "items": {
                                                            "oneOf": [
                                                                { "enum": [
                                                                        "signature",
                                                                        "field",
                                                                        "public-field",
                                                                        "public-decorated-field",
                                                                        "decorated-field",
                                                                        "static-field",
                                                                        "public-static-field",
                                                                        "instance-field",
                                                                        "public-instance-field",
                                                                        "abstract-field",
                                                                        "public-abstract-field",
                                                                        "protected-field",
                                                                        "protected-decorated-field",
                                                                        "protected-static-field",
                                                                        "protected-instance-field",
                                                                        "protected-abstract-field",
                                                                        "private-field",
                                                                        "private-decorated-field",
                                                                        "private-static-field",
                                                                        "private-instance-field",
                                                                        "#private-field",
                                                                        "#private-static-field",
                                                                        "#private-instance-field",
                                                                        "method",
                                                                        "public-method",
                                                                        "public-decorated-method",
                                                                        "decorated-method",
                                                                        "static-method",
                                                                        "public-static-method",
                                                                        "instance-method",
                                                                        "public-instance-method",
                                                                        "abstract-method",
                                                                        "public-abstract-method",
                                                                        "protected-method",
                                                                        "protected-decorated-method",
                                                                        "protected-static-method",
                                                                        "protected-instance-method",
                                                                        "protected-abstract-method",
                                                                        "private-method",
                                                                        "private-decorated-method",
                                                                        "private-static-method",
                                                                        "private-instance-method",
                                                                        "#private-method",
                                                                        "#private-static-method",
                                                                        "#private-instance-method",
                                                                        "call-signature",
                                                                        "constructor",
                                                                        "public-constructor",
                                                                        "protected-constructor",
                                                                        "private-constructor",
                                                                        "get",
                                                                        "public-get",
                                                                        "public-decorated-get",
                                                                        "decorated-get",
                                                                        "static-get",
                                                                        "public-static-get",
                                                                        "instance-get",
                                                                        "public-instance-get",
                                                                        "abstract-get",
                                                                        "public-abstract-get",
                                                                        "protected-get",
                                                                        "protected-decorated-get",
                                                                        "protected-static-get",
                                                                        "protected-instance-get",
                                                                        "protected-abstract-get",
                                                                        "private-get",
                                                                        "private-decorated-get",
                                                                        "private-static-get",
                                                                        "private-instance-get",
                                                                        "#private-get",
                                                                        "#private-static-get",
                                                                        "#private-instance-get",
                                                                        "set",
                                                                        "public-set",
                                                                        "public-decorated-set",
                                                                        "decorated-set",
                                                                        "static-set",
                                                                        "public-static-set",
                                                                        "instance-set",
                                                                        "public-instance-set",
                                                                        "abstract-set",
                                                                        "public-abstract-set",
                                                                        "protected-set",
                                                                        "protected-decorated-set",
                                                                        "protected-static-set",
                                                                        "protected-instance-set",
                                                                        "protected-abstract-set",
                                                                        "private-set",
                                                                        "private-decorated-set",
                                                                        "private-static-set",
                                                                        "private-instance-set",
                                                                        "#private-set",
                                                                        "#private-static-set",
                                                                        "#private-instance-set",
                                                                        "static-initialization",
                                                                        "static-static-initialization",
                                                                        "public-static-static-initialization",
                                                                        "instance-static-initialization",
                                                                        "public-instance-static-initialization",
                                                                        "abstract-static-initialization",
                                                                        "public-abstract-static-initialization",
                                                                        "protected-static-static-initialization",
                                                                        "protected-instance-static-initialization",
                                                                        "protected-abstract-static-initialization",
                                                                        "private-static-static-initialization",
                                                                        "private-instance-static-initialization",
                                                                        "#private-static-static-initialization",
                                                                        "#private-instance-static-initialization"
                                                                    ] },
                                                                {
                                                                    "type": "array",
                                                                    "items": { "enum": [
                                                                            "signature",
                                                                            "field",
                                                                            "public-field",
                                                                            "public-decorated-field",
                                                                            "decorated-field",
                                                                            "static-field",
                                                                            "public-static-field",
                                                                            "instance-field",
                                                                            "public-instance-field",
                                                                            "abstract-field",
                                                                            "public-abstract-field",
                                                                            "protected-field",
                                                                            "protected-decorated-field",
                                                                            "protected-static-field",
                                                                            "protected-instance-field",
                                                                            "protected-abstract-field",
                                                                            "private-field",
                                                                            "private-decorated-field",
                                                                            "private-static-field",
                                                                            "private-instance-field",
                                                                            "#private-field",
                                                                            "#private-static-field",
                                                                            "#private-instance-field",
                                                                            "method",
                                                                            "public-method",
                                                                            "public-decorated-method",
                                                                            "decorated-method",
                                                                            "static-method",
                                                                            "public-static-method",
                                                                            "instance-method",
                                                                            "public-instance-method",
                                                                            "abstract-method",
                                                                            "public-abstract-method",
                                                                            "protected-method",
                                                                            "protected-decorated-method",
                                                                            "protected-static-method",
                                                                            "protected-instance-method",
                                                                            "protected-abstract-method",
                                                                            "private-method",
                                                                            "private-decorated-method",
                                                                            "private-static-method",
                                                                            "private-instance-method",
                                                                            "#private-method",
                                                                            "#private-static-method",
                                                                            "#private-instance-method",
                                                                            "call-signature",
                                                                            "constructor",
                                                                            "public-constructor",
                                                                            "protected-constructor",
                                                                            "private-constructor",
                                                                            "get",
                                                                            "public-get",
                                                                            "public-decorated-get",
                                                                            "decorated-get",
                                                                            "static-get",
                                                                            "public-static-get",
                                                                            "instance-get",
                                                                            "public-instance-get",
                                                                            "abstract-get",
                                                                            "public-abstract-get",
                                                                            "protected-get",
                                                                            "protected-decorated-get",
                                                                            "protected-static-get",
                                                                            "protected-instance-get",
                                                                            "protected-abstract-get",
                                                                            "private-get",
                                                                            "private-decorated-get",
                                                                            "private-static-get",
                                                                            "private-instance-get",
                                                                            "#private-get",
                                                                            "#private-static-get",
                                                                            "#private-instance-get",
                                                                            "set",
                                                                            "public-set",
                                                                            "public-decorated-set",
                                                                            "decorated-set",
                                                                            "static-set",
                                                                            "public-static-set",
                                                                            "instance-set",
                                                                            "public-instance-set",
                                                                            "abstract-set",
                                                                            "public-abstract-set",
                                                                            "protected-set",
                                                                            "protected-decorated-set",
                                                                            "protected-static-set",
                                                                            "protected-instance-set",
                                                                            "protected-abstract-set",
                                                                            "private-set",
                                                                            "private-decorated-set",
                                                                            "private-static-set",
                                                                            "private-instance-set",
                                                                            "#private-set",
                                                                            "#private-static-set",
                                                                            "#private-instance-set",
                                                                            "static-initialization",
                                                                            "static-static-initialization",
                                                                            "public-static-static-initialization",
                                                                            "instance-static-initialization",
                                                                            "public-instance-static-initialization",
                                                                            "abstract-static-initialization",
                                                                            "public-abstract-static-initialization",
                                                                            "protected-static-static-initialization",
                                                                            "protected-instance-static-initialization",
                                                                            "protected-abstract-static-initialization",
                                                                            "private-static-static-initialization",
                                                                            "private-instance-static-initialization",
                                                                            "#private-static-static-initialization",
                                                                            "#private-instance-static-initialization"
                                                                        ] }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    { "type": "string", "enum": ["never"] }
                                                ]
                                            },
                                            "order": { "type": "string", "enum": [
                                                    "alphabetically",
                                                    "alphabetically-case-insensitive",
                                                    "as-written",
                                                    "natural",
                                                    "natural-case-insensitive"
                                                ] },
                                            "optionalityOrder": {
                                                "type": "string",
                                                "enum": ["optional-first", "required-first"]
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                ]
                            },
                            "classExpressions": {
                                "oneOf": [
                                    { "type": "string", "enum": ["never"] },
                                    { "type": "array", "items": { "oneOf": [{ "enum": [
                                                        "signature",
                                                        "field",
                                                        "public-field",
                                                        "public-decorated-field",
                                                        "decorated-field",
                                                        "static-field",
                                                        "public-static-field",
                                                        "instance-field",
                                                        "public-instance-field",
                                                        "abstract-field",
                                                        "public-abstract-field",
                                                        "protected-field",
                                                        "protected-decorated-field",
                                                        "protected-static-field",
                                                        "protected-instance-field",
                                                        "protected-abstract-field",
                                                        "private-field",
                                                        "private-decorated-field",
                                                        "private-static-field",
                                                        "private-instance-field",
                                                        "#private-field",
                                                        "#private-static-field",
                                                        "#private-instance-field",
                                                        "method",
                                                        "public-method",
                                                        "public-decorated-method",
                                                        "decorated-method",
                                                        "static-method",
                                                        "public-static-method",
                                                        "instance-method",
                                                        "public-instance-method",
                                                        "abstract-method",
                                                        "public-abstract-method",
                                                        "protected-method",
                                                        "protected-decorated-method",
                                                        "protected-static-method",
                                                        "protected-instance-method",
                                                        "protected-abstract-method",
                                                        "private-method",
                                                        "private-decorated-method",
                                                        "private-static-method",
                                                        "private-instance-method",
                                                        "#private-method",
                                                        "#private-static-method",
                                                        "#private-instance-method",
                                                        "call-signature",
                                                        "constructor",
                                                        "public-constructor",
                                                        "protected-constructor",
                                                        "private-constructor",
                                                        "get",
                                                        "public-get",
                                                        "public-decorated-get",
                                                        "decorated-get",
                                                        "static-get",
                                                        "public-static-get",
                                                        "instance-get",
                                                        "public-instance-get",
                                                        "abstract-get",
                                                        "public-abstract-get",
                                                        "protected-get",
                                                        "protected-decorated-get",
                                                        "protected-static-get",
                                                        "protected-instance-get",
                                                        "protected-abstract-get",
                                                        "private-get",
                                                        "private-decorated-get",
                                                        "private-static-get",
                                                        "private-instance-get",
                                                        "#private-get",
                                                        "#private-static-get",
                                                        "#private-instance-get",
                                                        "set",
                                                        "public-set",
                                                        "public-decorated-set",
                                                        "decorated-set",
                                                        "static-set",
                                                        "public-static-set",
                                                        "instance-set",
                                                        "public-instance-set",
                                                        "abstract-set",
                                                        "public-abstract-set",
                                                        "protected-set",
                                                        "protected-decorated-set",
                                                        "protected-static-set",
                                                        "protected-instance-set",
                                                        "protected-abstract-set",
                                                        "private-set",
                                                        "private-decorated-set",
                                                        "private-static-set",
                                                        "private-instance-set",
                                                        "#private-set",
                                                        "#private-static-set",
                                                        "#private-instance-set",
                                                        "static-initialization",
                                                        "static-static-initialization",
                                                        "public-static-static-initialization",
                                                        "instance-static-initialization",
                                                        "public-instance-static-initialization",
                                                        "abstract-static-initialization",
                                                        "public-abstract-static-initialization",
                                                        "protected-static-static-initialization",
                                                        "protected-instance-static-initialization",
                                                        "protected-abstract-static-initialization",
                                                        "private-static-static-initialization",
                                                        "private-instance-static-initialization",
                                                        "#private-static-static-initialization",
                                                        "#private-instance-static-initialization"
                                                    ] }, { "type": "array", "items": { "enum": [
                                                            "signature",
                                                            "field",
                                                            "public-field",
                                                            "public-decorated-field",
                                                            "decorated-field",
                                                            "static-field",
                                                            "public-static-field",
                                                            "instance-field",
                                                            "public-instance-field",
                                                            "abstract-field",
                                                            "public-abstract-field",
                                                            "protected-field",
                                                            "protected-decorated-field",
                                                            "protected-static-field",
                                                            "protected-instance-field",
                                                            "protected-abstract-field",
                                                            "private-field",
                                                            "private-decorated-field",
                                                            "private-static-field",
                                                            "private-instance-field",
                                                            "#private-field",
                                                            "#private-static-field",
                                                            "#private-instance-field",
                                                            "method",
                                                            "public-method",
                                                            "public-decorated-method",
                                                            "decorated-method",
                                                            "static-method",
                                                            "public-static-method",
                                                            "instance-method",
                                                            "public-instance-method",
                                                            "abstract-method",
                                                            "public-abstract-method",
                                                            "protected-method",
                                                            "protected-decorated-method",
                                                            "protected-static-method",
                                                            "protected-instance-method",
                                                            "protected-abstract-method",
                                                            "private-method",
                                                            "private-decorated-method",
                                                            "private-static-method",
                                                            "private-instance-method",
                                                            "#private-method",
                                                            "#private-static-method",
                                                            "#private-instance-method",
                                                            "call-signature",
                                                            "constructor",
                                                            "public-constructor",
                                                            "protected-constructor",
                                                            "private-constructor",
                                                            "get",
                                                            "public-get",
                                                            "public-decorated-get",
                                                            "decorated-get",
                                                            "static-get",
                                                            "public-static-get",
                                                            "instance-get",
                                                            "public-instance-get",
                                                            "abstract-get",
                                                            "public-abstract-get",
                                                            "protected-get",
                                                            "protected-decorated-get",
                                                            "protected-static-get",
                                                            "protected-instance-get",
                                                            "protected-abstract-get",
                                                            "private-get",
                                                            "private-decorated-get",
                                                            "private-static-get",
                                                            "private-instance-get",
                                                            "#private-get",
                                                            "#private-static-get",
                                                            "#private-instance-get",
                                                            "set",
                                                            "public-set",
                                                            "public-decorated-set",
                                                            "decorated-set",
                                                            "static-set",
                                                            "public-static-set",
                                                            "instance-set",
                                                            "public-instance-set",
                                                            "abstract-set",
                                                            "public-abstract-set",
                                                            "protected-set",
                                                            "protected-decorated-set",
                                                            "protected-static-set",
                                                            "protected-instance-set",
                                                            "protected-abstract-set",
                                                            "private-set",
                                                            "private-decorated-set",
                                                            "private-static-set",
                                                            "private-instance-set",
                                                            "#private-set",
                                                            "#private-static-set",
                                                            "#private-instance-set",
                                                            "static-initialization",
                                                            "static-static-initialization",
                                                            "public-static-static-initialization",
                                                            "instance-static-initialization",
                                                            "public-instance-static-initialization",
                                                            "abstract-static-initialization",
                                                            "public-abstract-static-initialization",
                                                            "protected-static-static-initialization",
                                                            "protected-instance-static-initialization",
                                                            "protected-abstract-static-initialization",
                                                            "private-static-static-initialization",
                                                            "private-instance-static-initialization",
                                                            "#private-static-static-initialization",
                                                            "#private-instance-static-initialization"
                                                        ] } }] } },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "memberTypes": {
                                                "oneOf": [
                                                    {
                                                        "type": "array",
                                                        "items": {
                                                            "oneOf": [
                                                                { "enum": [
                                                                        "signature",
                                                                        "field",
                                                                        "public-field",
                                                                        "public-decorated-field",
                                                                        "decorated-field",
                                                                        "static-field",
                                                                        "public-static-field",
                                                                        "instance-field",
                                                                        "public-instance-field",
                                                                        "abstract-field",
                                                                        "public-abstract-field",
                                                                        "protected-field",
                                                                        "protected-decorated-field",
                                                                        "protected-static-field",
                                                                        "protected-instance-field",
                                                                        "protected-abstract-field",
                                                                        "private-field",
                                                                        "private-decorated-field",
                                                                        "private-static-field",
                                                                        "private-instance-field",
                                                                        "#private-field",
                                                                        "#private-static-field",
                                                                        "#private-instance-field",
                                                                        "method",
                                                                        "public-method",
                                                                        "public-decorated-method",
                                                                        "decorated-method",
                                                                        "static-method",
                                                                        "public-static-method",
                                                                        "instance-method",
                                                                        "public-instance-method",
                                                                        "abstract-method",
                                                                        "public-abstract-method",
                                                                        "protected-method",
                                                                        "protected-decorated-method",
                                                                        "protected-static-method",
                                                                        "protected-instance-method",
                                                                        "protected-abstract-method",
                                                                        "private-method",
                                                                        "private-decorated-method",
                                                                        "private-static-method",
                                                                        "private-instance-method",
                                                                        "#private-method",
                                                                        "#private-static-method",
                                                                        "#private-instance-method",
                                                                        "call-signature",
                                                                        "constructor",
                                                                        "public-constructor",
                                                                        "protected-constructor",
                                                                        "private-constructor",
                                                                        "get",
                                                                        "public-get",
                                                                        "public-decorated-get",
                                                                        "decorated-get",
                                                                        "static-get",
                                                                        "public-static-get",
                                                                        "instance-get",
                                                                        "public-instance-get",
                                                                        "abstract-get",
                                                                        "public-abstract-get",
                                                                        "protected-get",
                                                                        "protected-decorated-get",
                                                                        "protected-static-get",
                                                                        "protected-instance-get",
                                                                        "protected-abstract-get",
                                                                        "private-get",
                                                                        "private-decorated-get",
                                                                        "private-static-get",
                                                                        "private-instance-get",
                                                                        "#private-get",
                                                                        "#private-static-get",
                                                                        "#private-instance-get",
                                                                        "set",
                                                                        "public-set",
                                                                        "public-decorated-set",
                                                                        "decorated-set",
                                                                        "static-set",
                                                                        "public-static-set",
                                                                        "instance-set",
                                                                        "public-instance-set",
                                                                        "abstract-set",
                                                                        "public-abstract-set",
                                                                        "protected-set",
                                                                        "protected-decorated-set",
                                                                        "protected-static-set",
                                                                        "protected-instance-set",
                                                                        "protected-abstract-set",
                                                                        "private-set",
                                                                        "private-decorated-set",
                                                                        "private-static-set",
                                                                        "private-instance-set",
                                                                        "#private-set",
                                                                        "#private-static-set",
                                                                        "#private-instance-set",
                                                                        "static-initialization",
                                                                        "static-static-initialization",
                                                                        "public-static-static-initialization",
                                                                        "instance-static-initialization",
                                                                        "public-instance-static-initialization",
                                                                        "abstract-static-initialization",
                                                                        "public-abstract-static-initialization",
                                                                        "protected-static-static-initialization",
                                                                        "protected-instance-static-initialization",
                                                                        "protected-abstract-static-initialization",
                                                                        "private-static-static-initialization",
                                                                        "private-instance-static-initialization",
                                                                        "#private-static-static-initialization",
                                                                        "#private-instance-static-initialization"
                                                                    ] },
                                                                {
                                                                    "type": "array",
                                                                    "items": { "enum": [
                                                                            "signature",
                                                                            "field",
                                                                            "public-field",
                                                                            "public-decorated-field",
                                                                            "decorated-field",
                                                                            "static-field",
                                                                            "public-static-field",
                                                                            "instance-field",
                                                                            "public-instance-field",
                                                                            "abstract-field",
                                                                            "public-abstract-field",
                                                                            "protected-field",
                                                                            "protected-decorated-field",
                                                                            "protected-static-field",
                                                                            "protected-instance-field",
                                                                            "protected-abstract-field",
                                                                            "private-field",
                                                                            "private-decorated-field",
                                                                            "private-static-field",
                                                                            "private-instance-field",
                                                                            "#private-field",
                                                                            "#private-static-field",
                                                                            "#private-instance-field",
                                                                            "method",
                                                                            "public-method",
                                                                            "public-decorated-method",
                                                                            "decorated-method",
                                                                            "static-method",
                                                                            "public-static-method",
                                                                            "instance-method",
                                                                            "public-instance-method",
                                                                            "abstract-method",
                                                                            "public-abstract-method",
                                                                            "protected-method",
                                                                            "protected-decorated-method",
                                                                            "protected-static-method",
                                                                            "protected-instance-method",
                                                                            "protected-abstract-method",
                                                                            "private-method",
                                                                            "private-decorated-method",
                                                                            "private-static-method",
                                                                            "private-instance-method",
                                                                            "#private-method",
                                                                            "#private-static-method",
                                                                            "#private-instance-method",
                                                                            "call-signature",
                                                                            "constructor",
                                                                            "public-constructor",
                                                                            "protected-constructor",
                                                                            "private-constructor",
                                                                            "get",
                                                                            "public-get",
                                                                            "public-decorated-get",
                                                                            "decorated-get",
                                                                            "static-get",
                                                                            "public-static-get",
                                                                            "instance-get",
                                                                            "public-instance-get",
                                                                            "abstract-get",
                                                                            "public-abstract-get",
                                                                            "protected-get",
                                                                            "protected-decorated-get",
                                                                            "protected-static-get",
                                                                            "protected-instance-get",
                                                                            "protected-abstract-get",
                                                                            "private-get",
                                                                            "private-decorated-get",
                                                                            "private-static-get",
                                                                            "private-instance-get",
                                                                            "#private-get",
                                                                            "#private-static-get",
                                                                            "#private-instance-get",
                                                                            "set",
                                                                            "public-set",
                                                                            "public-decorated-set",
                                                                            "decorated-set",
                                                                            "static-set",
                                                                            "public-static-set",
                                                                            "instance-set",
                                                                            "public-instance-set",
                                                                            "abstract-set",
                                                                            "public-abstract-set",
                                                                            "protected-set",
                                                                            "protected-decorated-set",
                                                                            "protected-static-set",
                                                                            "protected-instance-set",
                                                                            "protected-abstract-set",
                                                                            "private-set",
                                                                            "private-decorated-set",
                                                                            "private-static-set",
                                                                            "private-instance-set",
                                                                            "#private-set",
                                                                            "#private-static-set",
                                                                            "#private-instance-set",
                                                                            "static-initialization",
                                                                            "static-static-initialization",
                                                                            "public-static-static-initialization",
                                                                            "instance-static-initialization",
                                                                            "public-instance-static-initialization",
                                                                            "abstract-static-initialization",
                                                                            "public-abstract-static-initialization",
                                                                            "protected-static-static-initialization",
                                                                            "protected-instance-static-initialization",
                                                                            "protected-abstract-static-initialization",
                                                                            "private-static-static-initialization",
                                                                            "private-instance-static-initialization",
                                                                            "#private-static-static-initialization",
                                                                            "#private-instance-static-initialization"
                                                                        ] }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    { "type": "string", "enum": ["never"] }
                                                ]
                                            },
                                            "order": { "type": "string", "enum": [
                                                    "alphabetically",
                                                    "alphabetically-case-insensitive",
                                                    "as-written",
                                                    "natural",
                                                    "natural-case-insensitive"
                                                ] },
                                            "optionalityOrder": {
                                                "type": "string",
                                                "enum": ["optional-first", "required-first"]
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                ]
                            },
                            "interfaces": {
                                "oneOf": [
                                    { "type": "string", "enum": ["never"] },
                                    { "type": "array", "items": { "oneOf": [{ "enum": [
                                                        "signature",
                                                        "field",
                                                        "method",
                                                        "constructor"
                                                    ] }, { "type": "array", "items": { "enum": [
                                                            "signature",
                                                            "field",
                                                            "method",
                                                            "constructor"
                                                        ] } }] } },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "memberTypes": {
                                                "oneOf": [
                                                    {
                                                        "type": "array",
                                                        "items": {
                                                            "oneOf": [
                                                                { "enum": [
                                                                        "signature",
                                                                        "field",
                                                                        "method",
                                                                        "constructor"
                                                                    ] },
                                                                {
                                                                    "type": "array",
                                                                    "items": { "enum": [
                                                                            "signature",
                                                                            "field",
                                                                            "method",
                                                                            "constructor"
                                                                        ] }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    { "type": "string", "enum": ["never"] }
                                                ]
                                            },
                                            "order": { "type": "string", "enum": [
                                                    "alphabetically",
                                                    "alphabetically-case-insensitive",
                                                    "as-written",
                                                    "natural",
                                                    "natural-case-insensitive"
                                                ] },
                                            "optionalityOrder": {
                                                "type": "string",
                                                "enum": ["optional-first", "required-first"]
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                ]
                            },
                            "typeLiterals": {
                                "oneOf": [
                                    { "type": "string", "enum": ["never"] },
                                    { "type": "array", "items": { "oneOf": [{ "enum": [
                                                        "signature",
                                                        "field",
                                                        "method",
                                                        "constructor"
                                                    ] }, { "type": "array", "items": { "enum": [
                                                            "signature",
                                                            "field",
                                                            "method",
                                                            "constructor"
                                                        ] } }] } },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "memberTypes": {
                                                "oneOf": [
                                                    {
                                                        "type": "array",
                                                        "items": {
                                                            "oneOf": [
                                                                { "enum": [
                                                                        "signature",
                                                                        "field",
                                                                        "method",
                                                                        "constructor"
                                                                    ] },
                                                                {
                                                                    "type": "array",
                                                                    "items": { "enum": [
                                                                            "signature",
                                                                            "field",
                                                                            "method",
                                                                            "constructor"
                                                                        ] }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    { "type": "string", "enum": ["never"] }
                                                ]
                                            },
                                            "order": { "type": "string", "enum": [
                                                    "alphabetically",
                                                    "alphabetically-case-insensitive",
                                                    "as-written",
                                                    "natural",
                                                    "natural-case-insensitive"
                                                ] },
                                            "optionalityOrder": {
                                                "type": "string",
                                                "enum": ["optional-first", "required-first"]
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                ]
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://typescript-eslint.io/rules/member-ordering",
                "description": "Require a consistent member declaration order",
                "recommended": false,
                "ts": { "severity": "error", "options": { "classes": [
                            "field",
                            "signature",
                            "constructor",
                            "method"
                        ], "default": { "optionalityOrder": "required-first" } } }
            },
            "naming-convention": {
                "type": "suggestion",
                "messages": {
                    "unexpectedUnderscore": "{{type}} name `{{name}}` must not have a {{position}} underscore.",
                    "missingUnderscore": "{{type}} name `{{name}}` must have {{count}} {{position}} underscore(s).",
                    "missingAffix": "{{type}} name `{{name}}` must have one of the following {{position}}es: {{affixes}}",
                    "satisfyCustom": "{{type}} name `{{name}}` must {{regexMatch}} the RegExp: {{regex}}",
                    "doesNotMatchFormat": "{{type}} name `{{name}}` must match one of the following formats: {{formats}}",
                    "doesNotMatchFormatTrimmed": "{{type}} name `{{name}}` trimmed as `{{processedName}}` must match one of the following formats: {{formats}}"
                },
                "schema": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "default",
                                                "variableLike",
                                                "memberLike",
                                                "typeLike",
                                                "method",
                                                "property",
                                                "variable",
                                                "function",
                                                "parameter",
                                                "parameterProperty",
                                                "accessor",
                                                "enumMember",
                                                "classMethod",
                                                "objectLiteralMethod",
                                                "typeMethod",
                                                "classProperty",
                                                "objectLiteralProperty",
                                                "typeProperty",
                                                "class",
                                                "interface",
                                                "typeAlias",
                                                "enum",
                                                "typeParameter"
                                            ] },
                                        "additionalItems": false
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "const",
                                                "readonly",
                                                "static",
                                                "public",
                                                "protected",
                                                "private",
                                                "abstract",
                                                "destructured",
                                                "global",
                                                "exported",
                                                "unused",
                                                "requiresQuotes",
                                                "override",
                                                "async"
                                            ] },
                                        "additionalItems": false
                                    },
                                    "types": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "boolean",
                                                "string",
                                                "number",
                                                "function",
                                                "array"
                                            ] },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": { "type": "string", "enum": ["default"] },
                                    "modifiers": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "const",
                                                "readonly",
                                                "static",
                                                "public",
                                                "protected",
                                                "private",
                                                "abstract",
                                                "destructured",
                                                "global",
                                                "exported",
                                                "unused",
                                                "requiresQuotes",
                                                "override",
                                                "async"
                                            ] },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": { "type": "string", "enum": ["variableLike"] },
                                    "modifiers": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": ["unused", "async"] },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": { "type": "string", "enum": ["variable"] },
                                    "modifiers": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "const",
                                                "destructured",
                                                "exported",
                                                "global",
                                                "unused",
                                                "async"
                                            ] },
                                        "additionalItems": false
                                    },
                                    "types": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "boolean",
                                                "string",
                                                "number",
                                                "function",
                                                "array"
                                            ] },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": { "type": "string", "enum": ["function"] },
                                    "modifiers": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "exported",
                                                "global",
                                                "unused",
                                                "async"
                                            ] },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": { "type": "string", "enum": ["parameter"] },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": ["destructured", "unused"]
                                        },
                                        "additionalItems": false
                                    },
                                    "types": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "boolean",
                                                "string",
                                                "number",
                                                "function",
                                                "array"
                                            ] },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": { "type": "string", "enum": ["memberLike"] },
                                    "modifiers": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "abstract",
                                                "private",
                                                "protected",
                                                "public",
                                                "readonly",
                                                "requiresQuotes",
                                                "static",
                                                "override",
                                                "async"
                                            ] },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": { "type": "string", "enum": ["classProperty"] },
                                    "modifiers": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "abstract",
                                                "private",
                                                "protected",
                                                "public",
                                                "readonly",
                                                "requiresQuotes",
                                                "static",
                                                "override"
                                            ] },
                                        "additionalItems": false
                                    },
                                    "types": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "boolean",
                                                "string",
                                                "number",
                                                "function",
                                                "array"
                                            ] },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["objectLiteralProperty"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": ["public", "requiresQuotes"]
                                        },
                                        "additionalItems": false
                                    },
                                    "types": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "boolean",
                                                "string",
                                                "number",
                                                "function",
                                                "array"
                                            ] },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": { "type": "string", "enum": ["typeProperty"] },
                                    "modifiers": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "public",
                                                "readonly",
                                                "requiresQuotes"
                                            ] },
                                        "additionalItems": false
                                    },
                                    "types": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "boolean",
                                                "string",
                                                "number",
                                                "function",
                                                "array"
                                            ] },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": { "type": "string", "enum": ["parameterProperty"] },
                                    "modifiers": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "private",
                                                "protected",
                                                "public",
                                                "readonly"
                                            ] },
                                        "additionalItems": false
                                    },
                                    "types": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "boolean",
                                                "string",
                                                "number",
                                                "function",
                                                "array"
                                            ] },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": { "type": "string", "enum": ["property"] },
                                    "modifiers": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "abstract",
                                                "private",
                                                "protected",
                                                "public",
                                                "readonly",
                                                "requiresQuotes",
                                                "static",
                                                "override",
                                                "async"
                                            ] },
                                        "additionalItems": false
                                    },
                                    "types": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "boolean",
                                                "string",
                                                "number",
                                                "function",
                                                "array"
                                            ] },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": { "type": "string", "enum": ["classMethod"] },
                                    "modifiers": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "abstract",
                                                "private",
                                                "protected",
                                                "public",
                                                "requiresQuotes",
                                                "static",
                                                "override",
                                                "async"
                                            ] },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["objectLiteralMethod"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "public",
                                                "requiresQuotes",
                                                "async"
                                            ] },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": { "type": "string", "enum": ["typeMethod"] },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": ["public", "requiresQuotes"]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": { "type": "string", "enum": ["method"] },
                                    "modifiers": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "abstract",
                                                "private",
                                                "protected",
                                                "public",
                                                "requiresQuotes",
                                                "static",
                                                "override",
                                                "async"
                                            ] },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": { "type": "string", "enum": ["accessor"] },
                                    "modifiers": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "abstract",
                                                "private",
                                                "protected",
                                                "public",
                                                "requiresQuotes",
                                                "static",
                                                "override"
                                            ] },
                                        "additionalItems": false
                                    },
                                    "types": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "boolean",
                                                "string",
                                                "number",
                                                "function",
                                                "array"
                                            ] },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": { "type": "string", "enum": ["enumMember"] },
                                    "modifiers": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": ["requiresQuotes"] },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": { "type": "string", "enum": ["typeLike"] },
                                    "modifiers": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "abstract",
                                                "exported",
                                                "unused"
                                            ] },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": { "type": "string", "enum": ["class"] },
                                    "modifiers": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": [
                                                "abstract",
                                                "exported",
                                                "unused"
                                            ] },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": { "type": "string", "enum": ["interface"] },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": ["exported", "unused"]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": { "type": "string", "enum": ["typeAlias"] },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": ["exported", "unused"]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": { "type": "string", "enum": ["enum"] },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": ["exported", "unused"]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": { "type": "string", "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ] },
                                                "additionalItems": false
                                            },
                                            { "type": "null" }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": { "type": "boolean" },
                                            "regex": { "type": "string" }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "trailingUnderscore": { "type": "string", "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ] },
                                    "prefix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": { "type": "string", "minLength": 1 },
                                        "additionalItems": false
                                    },
                                    "failureMessage": { "type": "string" },
                                    "filter": {
                                        "oneOf": [
                                            { "type": "string", "minLength": 1 },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": { "type": "boolean" },
                                                    "regex": { "type": "string" }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": { "type": "string", "enum": ["typeParameter"] },
                                    "modifiers": {
                                        "type": "array",
                                        "items": { "type": "string", "enum": ["unused"] },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            }
                        ]
                    },
                    "additionalItems": false
                },
                "url": "https://typescript-eslint.io/rules/naming-convention",
                "description": "Enforce naming conventions for everything across a codebase",
                "recommended": false,
                "requiresTypeChecking": true,
                "ts": { "severity": "error" }
            },
            "adjacent-overload-signatures": {
                "type": "suggestion",
                "schema": [],
                "messages": { "adjacentSignature": "All {{name}} signatures should be adjacent." },
                "url": "https://typescript-eslint.io/rules/adjacent-overload-signatures",
                "description": "Require that function overload signatures be consecutive",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "ban-types": {
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "bannedTypeMessage": "Don't use `{{name}}` as a type.{{customMessage}}"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "types": {
                                "type": "object",
                                "additionalProperties": {
                                    "oneOf": [
                                        { "type": "null" },
                                        { "type": "boolean" },
                                        { "type": "string" },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "message": { "type": "string" },
                                                "fixWith": { "type": "string" }
                                            },
                                            "additionalProperties": false
                                        }
                                    ]
                                }
                            },
                            "extendDefaults": { "type": "boolean" }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://typescript-eslint.io/rules/ban-types",
                "description": "Disallow certain types",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-array-constructor": {
                "type": "suggestion",
                "fixable": "code",
                "messages": { "useLiteral": "The array literal notation [] is preferable." },
                "schema": [],
                "url": "https://typescript-eslint.io/rules/no-array-constructor",
                "description": "Disallow generic `Array` constructors",
                "recommended": "error",
                "extendsBaseRule": true,
                "ts": { "severity": "error" }
            },
            "no-empty-function": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": { "allow": { "type": "array", "items": { "enum": [
                                        "functions",
                                        "arrowFunctions",
                                        "generatorFunctions",
                                        "methods",
                                        "generatorMethods",
                                        "getters",
                                        "setters",
                                        "constructors",
                                        "private-constructors",
                                        "protected-constructors",
                                        "asyncFunctions",
                                        "asyncMethods",
                                        "decoratedFunctions",
                                        "overrideMethods"
                                    ] }, "uniqueItems": true } },
                        "additionalProperties": false
                    }
                ],
                "messages": { "unexpected": "Unexpected empty {{name}}." },
                "url": "https://typescript-eslint.io/rules/no-empty-function",
                "description": "Disallow empty functions",
                "recommended": "error",
                "extendsBaseRule": true,
                "ts": { "severity": "error" }
            },
            "no-empty-interface": {
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "noEmpty": "An empty interface is equivalent to `{}`.",
                    "noEmptyWithSuper": "An interface declaring no members is equivalent to its supertype."
                },
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": { "allowSingleExtends": { "type": "boolean" } }
                    }
                ],
                "url": "https://typescript-eslint.io/rules/no-empty-interface",
                "description": "Disallow the declaration of empty interfaces",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-extra-non-null-assertion": {
                "type": "problem",
                "fixable": "code",
                "schema": [],
                "messages": { "noExtraNonNullAssertion": "Forbidden extra non-null assertion." },
                "url": "https://typescript-eslint.io/rules/no-extra-non-null-assertion",
                "description": "Disallow extra non-null assertions",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-loss-of-precision": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "noLossOfPrecision": "This number literal will lose precision at runtime."
                },
                "url": "https://typescript-eslint.io/rules/no-loss-of-precision",
                "description": "Disallow literal numbers that lose precision",
                "recommended": "error",
                "extendsBaseRule": true,
                "ts": { "severity": "error" }
            },
            "no-misused-new": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "errorMessageInterface": "Interfaces cannot be constructed, only classes.",
                    "errorMessageClass": "Class cannot have method named `new`."
                },
                "url": "https://typescript-eslint.io/rules/no-misused-new",
                "description": "Enforce valid definition of `new` and `constructor`",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-non-null-asserted-optional-chain": {
                "type": "problem",
                "hasSuggestions": true,
                "messages": {
                    "noNonNullOptionalChain": "Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.",
                    "suggestRemovingNonNull": "You should remove the non-null assertion."
                },
                "schema": [],
                "url": "https://typescript-eslint.io/rules/no-non-null-asserted-optional-chain",
                "description": "Disallow non-null assertions after an optional chain expression",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-non-null-assertion": {
                "type": "problem",
                "hasSuggestions": true,
                "messages": {
                    "noNonNull": "Forbidden non-null assertion.",
                    "suggestOptionalChain": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
                },
                "schema": [],
                "url": "https://typescript-eslint.io/rules/no-non-null-assertion",
                "description": "Disallow non-null assertions using the `!` postfix operator",
                "recommended": "warn",
                "ts": { "severity": "warn" }
            },
            "no-unnecessary-type-constraint": {
                "hasSuggestions": true,
                "messages": {
                    "unnecessaryConstraint": "Constraining the generic type `{{name}}` to `{{constraint}}` does nothing and is unnecessary.",
                    "removeUnnecessaryConstraint": "Remove the unnecessary `{{constraint}}` constraint."
                },
                "schema": [],
                "type": "suggestion",
                "url": "https://typescript-eslint.io/rules/no-unnecessary-type-constraint",
                "description": "Disallow unnecessary constraints on generic types",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "prefer-as-const": {
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "preferConstAssertion": "Expected a `const` instead of a literal type assertion.",
                    "variableConstAssertion": "Expected a `const` assertion instead of a literal type annotation.",
                    "variableSuggest": "You should use `as const` instead of type annotation."
                },
                "schema": [],
                "url": "https://typescript-eslint.io/rules/prefer-as-const",
                "description": "Enforce the use of `as const` over literal type",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "prefer-namespace-keyword": {
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "useNamespace": "Use 'namespace' instead of 'module' to declare custom TypeScript modules."
                },
                "schema": [],
                "url": "https://typescript-eslint.io/rules/prefer-namespace-keyword",
                "description": "Require using `namespace` keyword over `module` keyword to declare custom TypeScript modules",
                "recommended": "error",
                "ts": { "severity": "error" }
            }
        }
    },
    "eslint-plugin-unicorn": {
        "fields": [],
        "rules": {
            "empty-brace-spaces": {
                "url": "https://www.google.com/search?q=empty-brace-spaces",
                "ts": { "severity": "off" }
            },
            "no-nested-ternary": {
                "url": "https://www.google.com/search?q=no-nested-ternary",
                "ts": { "severity": "off" }
            },
            "number-literal-case": {
                "url": "https://www.google.com/search?q=number-literal-case",
                "ts": { "severity": "off" }
            }
        }
    },
    "@angular-eslint/eslint-plugin": {
        "fields": [
            "type",
            "fixable",
            "hasSuggestions",
            "description",
            "recommended"
        ],
        "rules": {
            "no-output-rename": {
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "schema": [],
                "messages": {
                    "noOutputRename": "Output bindings should not be aliased (https://angular.io/guide/styleguide#style-05-13)",
                    "suggestRemoveAliasName": "Remove alias name",
                    "suggestReplaceOriginalNameWithAliasName": "Remove alias name and use it as the original name"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-output-rename.md",
                "description": "Ensures that output bindings are not aliased",
                "recommended": "error",
                "ts": { "severity": "off" }
            },
            "no-input-rename": {
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowedNames": {
                                "type": "array",
                                "items": { "type": "string" },
                                "description": "A list with allowed input names",
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "noInputRename": "Input bindings should not be aliased (https://angular.io/guide/styleguide#style-05-13)",
                    "suggestRemoveAliasName": "Remove alias name",
                    "suggestReplaceOriginalNameWithAliasName": "Remove alias name and use it as the original name"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-input-rename.md",
                "description": "Ensures that input bindings are not aliased",
                "recommended": "error",
                "ts": { "severity": "off" }
            },
            "contextual-decorator": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "contextualDecorator": "Decorator out of context for \"@{{classDecoratorName}}()\""
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/contextual-decorator.md",
                "description": "Ensures that classes use contextual decorators in its body",
                "recommended": false,
                "ts": { "severity": "error" }
            },
            "contextual-lifecycle": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "contextualLifecycle": "Angular will not invoke the `{{methodName}}` lifecycle method within `@{{classDecoratorName}}()` classes"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/contextual-lifecycle.md",
                "description": "Ensures that lifecycle methods are used in a correct context",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-conflicting-lifecycle": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "noConflictingLifecycleInterface": "Implementing DoCheck and OnChanges in a class is not recommended",
                    "noConflictingLifecycleMethod": "Declaring ngDoCheck and ngOnChanges method in a class is not recommended"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-conflicting-lifecycle.md",
                "description": "Ensures that directives not implement conflicting lifecycle interfaces.",
                "recommended": false,
                "ts": { "severity": "error" }
            },
            "no-lifecycle-call": {
                "type": "suggestion",
                "schema": [],
                "messages": { "noLifecycleCall": "Avoid explicit calls to lifecycle methods" },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-lifecycle-call.md",
                "description": "Disallows explicit calls to lifecycle methods",
                "recommended": false,
                "ts": { "severity": "error" }
            },
            "no-output-on-prefix": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "noOutputOnPrefix": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.io/guide/styleguide#style-05-16)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-output-on-prefix.md",
                "description": "Ensures that output bindings, including aliases, are not named \"on\", nor prefixed with it. See more at https://angular.io/guide/styleguide#style-05-16",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "prefer-on-push-component-change-detection": {
                "type": "suggestion",
                "hasSuggestions": true,
                "schema": [],
                "messages": {
                    "preferOnPushComponentChangeDetection": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                    "suggestAddChangeDetectionOnPush": "Add `ChangeDetectionStrategy.OnPush`"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-on-push-component-change-detection.md",
                "description": "Ensures component's `changeDetection` is set to `ChangeDetectionStrategy.OnPush`",
                "recommended": false,
                "ts": { "severity": "error" }
            },
            "relative-url-prefix": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "relativeUrlPrefix": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/relative-url-prefix.md",
                "description": "The ./ and ../ prefix is standard syntax for relative URLs; don't depend on Angular's current ability to do without that prefix. See more at https://angular.io/styleguide#style-05-04",
                "recommended": false,
                "ts": { "severity": "error" }
            },
            "sort-ngmodule-metadata-arrays": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "locale": {
                                "type": "string",
                                "description": "A string with a BCP 47 language tag.",
                                "default": "en-US"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "sortNgmoduleMetadataArrays": "`NgModule` metadata arrays should be sorted in ASC alphabetical order"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/sort-ngmodule-metadata-arrays.md",
                "description": "Ensures ASC alphabetical order for `NgModule` metadata arrays for easy visual scanning",
                "recommended": false,
                "ts": { "severity": "error" }
            },
            "use-component-selector": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "useComponentSelector": "The selector of the component is mandatory"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/use-component-selector.md",
                "description": "Component selector must be declared",
                "recommended": false,
                "ts": { "severity": "error" }
            },
            "use-lifecycle-interface": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "useLifecycleInterface": "Lifecycle interface '{{interfaceName}}' should be implemented for method '{{methodName}}'. (https://angular.io/styleguide#style-09-01)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/use-lifecycle-interface.md",
                "description": "Ensures that classes implement lifecycle interfaces corresponding to the declared lifecycle methods. See more at https://angular.io/styleguide#style-09-01",
                "recommended": "warn",
                "ts": { "severity": "error" }
            },
            "use-pipe-transform-interface": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [],
                "messages": {
                    "usePipeTransformInterface": "Pipes should implement `PipeTransform` interface"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/use-pipe-transform-interface.md",
                "description": "Ensures that `Pipes` implement `PipeTransform` interface",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "directive-selector": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "oneOf": [
                                    { "type": "string" },
                                    {
                                        "type": "array",
                                        "items": { "enum": ["element", "attribute"] }
                                    }
                                ]
                            },
                            "prefix": { "oneOf": [{ "type": "string" }, { "type": "array" }] },
                            "style": { "type": "string", "enum": ["camelCase", "kebab-case"] }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "prefixFailure": "The selector should start with one of these prefixes: {{prefix}} (https://angular.io/guide/styleguide#style-02-08)",
                    "styleFailure": "The selector should be {{style}} (https://angular.io/guide/styleguide#style-02-06)",
                    "typeFailure": "The selector should be used as an {{type}} (https://angular.io/guide/styleguide#style-02-06)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/directive-selector.md",
                "description": "Directive selectors should follow given naming rules. See more at https://angular.io/guide/styleguide#style-02-06 and https://angular.io/guide/styleguide#style-02-08.",
                "recommended": false,
                "ts": {
                    "severity": "error",
                    "options": { "type": "attribute", "prefix": "noda", "style": "camelCase" }
                }
            },
            "component-selector": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "oneOf": [
                                    { "type": "string" },
                                    {
                                        "type": "array",
                                        "items": { "enum": ["element", "attribute"] }
                                    }
                                ]
                            },
                            "prefix": { "oneOf": [{ "type": "string" }, { "type": "array" }] },
                            "style": { "type": "string", "enum": ["camelCase", "kebab-case"] }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "prefixFailure": "The selector should start with one of these prefixes: {{prefix}} (https://angular.io/guide/styleguide#style-02-07)",
                    "styleFailure": "The selector should be {{style}} (https://angular.io/guide/styleguide#style-05-02)",
                    "styleAndPrefixFailure": "The selector should be {{style}} and start with one of these prefixes: {{prefix}} (https://angular.io/guide/styleguide#style-05-02 and https://angular.io/guide/styleguide#style-02-07)",
                    "typeFailure": "The selector should be used as an {{type}} (https://angular.io/guide/styleguide#style-05-03)",
                    "shadowDomEncapsulatedStyleFailure": "The selector of a ShadowDom-encapsulated component should be `kebab-case` (https://github.com/angular-eslint/angular-eslint/issues/534)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/component-selector.md",
                "description": "Component selectors should follow given naming rules. See more at https://angular.io/guide/styleguide#style-02-07, https://angular.io/guide/styleguide#style-05-02\n      and https://angular.io/guide/styleguide#style-05-03.",
                "recommended": false,
                "ts": {
                    "severity": "error",
                    "options": { "type": "element", "prefix": "noda", "style": "kebab-case" }
                }
            },
            "component-class-suffix": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "suffixes": { "type": "array", "items": { "type": "string" } }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "componentClassSuffix": "Component class names should end with one of these suffixes: {{suffixes}} (https://angular.io/styleguide#style-02-03)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/component-class-suffix.md",
                "description": "Classes decorated with @Component must have suffix \"Component\" (or custom) in their name. See more at https://angular.io/styleguide#style-02-03",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "directive-class-suffix": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "suffixes": { "type": "array", "items": { "type": "string" } }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "directiveClassSuffix": "Directive class names should end with one of these suffixes: {{suffixes}} (https://angular.io/styleguide#style-02-03)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/directive-class-suffix.md",
                "description": "Classes decorated with @Directive must have suffix \"Directive\" (or custom) in their name. See more at https://angular.io/styleguide#style-02-03",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-empty-lifecycle-method": {
                "type": "suggestion",
                "hasSuggestions": true,
                "schema": [],
                "messages": {
                    "noEmptyLifecycleMethod": "Lifecycle methods should not be empty",
                    "suggestRemoveLifecycleMethod": "Remove lifecycle method"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-empty-lifecycle-method.md",
                "description": "Disallows declaring empty lifecycle methods",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-host-metadata-property": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": { "allowStatic": { "type": "boolean", "default": false } },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "noHostMetadataProperty": "Use @HostBinding or @HostListener rather than the `host` metadata property (https://angular.io/styleguide#style-06-03)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-host-metadata-property.md",
                "description": "Disallows usage of the `host` metadata property. See more at https://angular.io/styleguide#style-06-03",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-inputs-metadata-property": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "noInputsMetadataProperty": "Use `@Input` rather than the `inputs` metadata property (https://angular.io/styleguide#style-05-12)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-inputs-metadata-property.md",
                "description": "Disallows usage of the `inputs` metadata property. See more at https://angular.io/styleguide#style-05-12",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-output-native": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "noOutputNative": "Output bindings, including aliases, should not be named as standard DOM events"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-output-native.md",
                "description": "Ensures that output bindings, including aliases, are not named as standard DOM events",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-outputs-metadata-property": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "noOutputsMetadataProperty": "Use `@Output` rather than the `outputs` metadata property (https://angular.io/styleguide#style-05-12)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-outputs-metadata-property.md",
                "description": "Disallows usage of the `outputs` metadata property. See more at https://angular.io/styleguide#style-05-12",
                "recommended": "error",
                "ts": { "severity": "error" }
            }
        }
    },
    "eslint-plugin-decorator-position": {
        "fields": [
            "type",
            "fixable",
            "description",
            "category",
            "recommended"
        ],
        "rules": {
            "decorator-position": {
                "type": "layout",
                "fixable": "code",
                "schema": {
                    "definitions": {
                        "decoratorConfig": {
                            "oneOf": [
                                {
                                    "type": "array",
                                    "minItems": 1,
                                    "maxItems": 2,
                                    "additionalItems": false,
                                    "items": [
                                        { "type": "string" },
                                        {
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": { "withArgs": { "type": "boolean" } }
                                        }
                                    ]
                                },
                                { "type": "string" }
                            ]
                        },
                        "alignmentOptions": { "type": "string", "enum": ["prefer-inline", "above"] }
                    },
                    "additionalItems": false,
                    "items": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "printWidth": { "type": "number" },
                                "properties": { "$ref": "#/definitions/alignmentOptions" },
                                "methods": { "$ref": "#/definitions/alignmentOptions" },
                                "overrides": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                        "above": {
                                            "type": "array",
                                            "uniqeItems": true,
                                            "items": { "$ref": "#/definitions/decoratorConfig" }
                                        },
                                        "prefer-inline": {
                                            "type": "array",
                                            "uniqeItems": true,
                                            "items": { "$ref": "#/definitions/decoratorConfig" }
                                        }
                                    }
                                }
                            }
                        }
                    ]
                },
                "messages": {
                    "expectedInline": "Expected @{{ name }} to be inline.",
                    "expectedAbove": "Expected @{{ name }} to be on the line above."
                },
                "url": "https://github.com/NullVoxPopuli/eslint-plugin-decorator-position/tree/master/docs/rules/decorator-position.md",
                "description": "enforce consistent decorator position on properties and methods",
                "category": "Style",
                "recommended": true,
                "ts": {
                    "severity": "error",
                    "options": {
                        "properties": "prefer-inline",
                        "methods": "above",
                        "printWidth": 100
                    }
                }
            }
        }
    },
    "eslint-plugin-import": {
        "fields": [
            "type",
            "category",
            "description",
            "recommended",
            "fixable"
        ],
        "rules": {
            "no-commonjs": {
                "type": "suggestion",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [{ "enum": ["allow-primitive-modules"] }],
                            "additionalItems": false
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "type": "object",
                                    "properties": {
                                        "allowPrimitiveModules": { "type": "boolean" },
                                        "allowRequire": { "type": "boolean" },
                                        "allowConditionalRequire": { "type": "boolean" }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "additionalItems": false
                        }
                    ]
                },
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/no-commonjs.md",
                "category": "Module systems",
                "description": "Forbid CommonJS `require` calls and `module.exports` or `exports.*`.",
                "ts": { "severity": "error" }
            },
            "no-cycle": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commonjs": { "type": "boolean" },
                            "amd": { "type": "boolean" },
                            "esmodule": { "type": "boolean" },
                            "ignore": {
                                "type": "array",
                                "minItems": 1,
                                "items": { "type": "string" },
                                "uniqueItems": true
                            },
                            "maxDepth": {
                                "anyOf": [
                                    {
                                        "description": "maximum dependency depth to traverse",
                                        "type": "integer",
                                        "minimum": 1
                                    },
                                    { "enum": ["∞"], "type": "string" }
                                ]
                            },
                            "ignoreExternal": {
                                "description": "ignore external modules",
                                "type": "boolean",
                                "default": false
                            },
                            "allowUnsafeDynamicCyclicDependency": {
                                "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/no-cycle.md",
                "category": "Static analysis",
                "description": "Forbid a module from importing a module with a dependency path back to itself.",
                "ts": { "severity": "error" }
            },
            "no-self-import": {
                "type": "problem",
                "schema": [],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/no-self-import.md",
                "category": "Static analysis",
                "description": "Forbid a module from importing itself.",
                "recommended": true,
                "ts": { "severity": "error" }
            },
            "no-unresolved": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commonjs": { "type": "boolean" },
                            "amd": { "type": "boolean" },
                            "esmodule": { "type": "boolean" },
                            "ignore": {
                                "type": "array",
                                "minItems": 1,
                                "items": { "type": "string" },
                                "uniqueItems": true
                            },
                            "caseSensitive": { "type": "boolean", "default": true },
                            "caseSensitiveStrict": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/no-unresolved.md",
                "category": "Static analysis",
                "description": "Ensure imports point to a file/module that can be resolved.",
                "ts": { "severity": "off" }
            },
            "no-extraneous-dependencies": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "devDependencies": { "type": ["boolean", "array"] },
                            "optionalDependencies": { "type": ["boolean", "array"] },
                            "peerDependencies": { "type": ["boolean", "array"] },
                            "bundledDependencies": { "type": ["boolean", "array"] },
                            "packageDir": { "type": ["string", "array"] },
                            "includeInternal": { "type": ["boolean"] },
                            "includeTypes": { "type": ["boolean"] }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/no-extraneous-dependencies.md",
                "category": "Helpful warnings",
                "description": "Forbid the use of extraneous packages.",
                "ts": { "severity": "off" }
            },
            "no-mutable-exports": {
                "type": "suggestion",
                "schema": [],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/no-mutable-exports.md",
                "category": "Helpful warnings",
                "description": "Forbid the use of mutable exports with `var` or `let`.",
                "ts": { "severity": "error" }
            },
            "no-named-as-default-member": {
                "type": "suggestion",
                "schema": [],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/no-named-as-default-member.md",
                "category": "Helpful warnings",
                "description": "Forbid use of exported name as property of default export.",
                "ts": { "severity": "error" }
            },
            "no-unused-modules": {
                "type": "suggestion",
                "schema": [
                    {
                        "properties": {
                            "src": {
                                "description": "files/paths to be analyzed (only for unused exports)",
                                "type": "array",
                                "minItems": 1,
                                "items": { "type": "string", "minLength": 1 }
                            },
                            "ignoreExports": {
                                "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                                "type": "array",
                                "minItems": 1,
                                "items": { "type": "string", "minLength": 1 }
                            },
                            "missingExports": {
                                "description": "report modules without any exports",
                                "type": "boolean"
                            },
                            "unusedExports": {
                                "description": "report exports without any usage",
                                "type": "boolean"
                            }
                        },
                        "not": {
                            "properties": {
                                "unusedExports": { "enum": [false] },
                                "missingExports": { "enum": [false] }
                            }
                        },
                        "anyOf": [
                            {
                                "not": { "properties": { "unusedExports": { "enum": [true] } } },
                                "required": ["missingExports"]
                            },
                            {
                                "not": { "properties": { "missingExports": { "enum": [true] } } },
                                "required": ["unusedExports"]
                            },
                            {
                                "properties": { "unusedExports": { "enum": [true] } },
                                "required": ["unusedExports"]
                            },
                            {
                                "properties": { "missingExports": { "enum": [true] } },
                                "required": ["missingExports"]
                            }
                        ]
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/no-unused-modules.md",
                "category": "Helpful warnings",
                "description": "Forbid modules without exports, or exports without matching import in another module.",
                "ts": { "severity": "error" }
            },
            "no-absolute-path": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commonjs": { "type": "boolean" },
                            "amd": { "type": "boolean" },
                            "esmodule": { "type": "boolean" },
                            "ignore": {
                                "type": "array",
                                "minItems": 1,
                                "items": { "type": "string" },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/no-absolute-path.md",
                "category": "Static analysis",
                "description": "Forbid import of modules using absolute paths.",
                "ts": { "severity": "error" }
            },
            "no-useless-path-segments": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commonjs": { "type": "boolean" },
                            "noUselessIndex": { "type": "boolean" }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/no-useless-path-segments.md",
                "category": "Static analysis",
                "description": "Forbid unnecessary path segments in import and require statements.",
                "ts": { "severity": "error" }
            },
            "first": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [
                    { "type": "string", "enum": ["absolute-first", "disable-absolute-first"] }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/first.md",
                "category": "Style guide",
                "description": "Ensure all imports appear before other statements.",
                "ts": { "severity": "error" }
            },
            "no-default-export": {
                "type": "suggestion",
                "schema": [],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/no-default-export.md",
                "category": "Style guide",
                "description": "Forbid default exports.",
                "ts": { "severity": "error" }
            },
            "no-duplicates": {
                "type": "problem",
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "considerQueryString": { "type": "boolean" },
                            "prefer-inline": { "type": "boolean" }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/no-duplicates.md",
                "category": "Style guide",
                "description": "Forbid repeated import of the same module in multiple places.",
                "ts": { "severity": "error" }
            },
            "no-unassigned-import": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "devDependencies": { "type": ["boolean", "array"] },
                            "optionalDependencies": { "type": ["boolean", "array"] },
                            "peerDependencies": { "type": ["boolean", "array"] },
                            "allow": { "type": "array", "items": { "type": "string" } }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/no-unassigned-import.md",
                "category": "Style guide",
                "description": "Forbid unassigned imports",
                "ts": { "severity": "error" }
            },
            "no-webpack-loader-syntax": {
                "type": "problem",
                "schema": [],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/no-webpack-loader-syntax.md",
                "category": "Static analysis",
                "description": "Forbid webpack loader syntax in imports.",
                "ts": { "severity": "error" }
            },
            "no-relative-packages": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commonjs": { "type": "boolean" },
                            "amd": { "type": "boolean" },
                            "esmodule": { "type": "boolean" },
                            "ignore": {
                                "type": "array",
                                "minItems": 1,
                                "items": { "type": "string" },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/no-relative-packages.md",
                "category": "Static analysis",
                "description": "Forbid importing packages through relative paths.",
                "ts": { "severity": "error" }
            },
            "newline-after-import": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "count": { "type": "integer", "minimum": 1 },
                            "considerComments": { "type": "boolean" }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/newline-after-import.md",
                "category": "Style guide",
                "description": "Enforce a newline after import statements.",
                "ts": { "severity": "error", "options": { "count": 1 } }
            },
            "order": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "groups": { "type": "array" },
                            "pathGroupsExcludedImportTypes": { "type": "array" },
                            "distinctGroup": { "type": "boolean", "default": true },
                            "pathGroups": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "pattern": { "type": "string" },
                                        "patternOptions": { "type": "object" },
                                        "group": { "type": "string", "enum": [
                                                "builtin",
                                                "external",
                                                "internal",
                                                "unknown",
                                                "parent",
                                                "sibling",
                                                "index",
                                                "object",
                                                "type"
                                            ] },
                                        "position": {
                                            "type": "string",
                                            "enum": ["after", "before"]
                                        }
                                    },
                                    "additionalProperties": false,
                                    "required": ["pattern", "group"]
                                }
                            },
                            "newlines-between": { "enum": [
                                    "ignore",
                                    "always",
                                    "always-and-inside-groups",
                                    "never"
                                ] },
                            "alphabetize": {
                                "type": "object",
                                "properties": {
                                    "caseInsensitive": { "type": "boolean", "default": false },
                                    "order": { "enum": [
                                            "ignore",
                                            "asc",
                                            "desc"
                                        ], "default": "ignore" },
                                    "orderImportKind": { "enum": [
                                            "ignore",
                                            "asc",
                                            "desc"
                                        ], "default": "ignore" }
                                },
                                "additionalProperties": false
                            },
                            "warnOnUnassignedImports": { "type": "boolean", "default": false }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/order.md",
                "category": "Style guide",
                "description": "Enforce a convention in module import order.",
                "ts": { "severity": "warn", "options": { "groups": [
                            "builtin",
                            "external",
                            "internal",
                            "index",
                            "unknown",
                            ["sibling", "parent"]
                        ], "newlines-between": "always", "alphabetize": { "order": "asc", "caseInsensitive": true, "orderImportKind": "ignore" }, "distinctGroup": true, "warnOnUnassignedImports": false } }
            },
            "named": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": { "commonjs": { "type": "boolean" } },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/named.md",
                "category": "Static analysis",
                "description": "Ensure named imports correspond to a named export in the remote file.",
                "ts": { "severity": "off" }
            },
            "namespace": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowComputed": {
                                "description": "If `false`, will report computed (and thus, un-lintable) references to namespace members.",
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/namespace.md",
                "category": "Static analysis",
                "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
                "ts": { "severity": "error" }
            },
            "default": {
                "type": "problem",
                "schema": [],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/default.md",
                "category": "Static analysis",
                "description": "Ensure a default export is present, given a default import.",
                "ts": { "severity": "error" }
            },
            "export": {
                "type": "problem",
                "schema": [],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/export.md",
                "category": "Helpful warnings",
                "description": "Forbid any invalid exports, i.e. re-export of the same name.",
                "ts": { "severity": "error" }
            },
            "no-named-as-default": {
                "type": "problem",
                "schema": [],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.27.5/docs/rules/no-named-as-default.md",
                "category": "Helpful warnings",
                "description": "Forbid use of exported name as identifier of default export.",
                "ts": { "severity": "warn" }
            }
        }
    },
    "eslint-plugin-rxjs": {
        "fields": [
            "fixable",
            "hasSuggestions",
            "type",
            "description",
            "recommended",
            "suggestion"
        ],
        "rules": {
            "no-topromise": {
                "hasSuggestions": false,
                "messages": { "forbidden": "The toPromise method is forbidden." },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-topromise.md",
                "description": "Forbids the use of the `toPromise` method.",
                "recommended": false,
                "ts": { "severity": "error" }
            },
            "throw-error": {
                "hasSuggestions": false,
                "messages": { "forbidden": "Passing non-Error values are forbidden." },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/throw-error.md",
                "description": "Enforces the passing of `Error` values to error notifications.",
                "recommended": false,
                "ts": { "severity": "error" }
            },
            "finnish": {
                "hasSuggestions": false,
                "messages": {
                    "shouldBeFinnish": "Finnish notation should be used here.",
                    "shouldNotBeFinnish": "Finnish notation should not be used here."
                },
                "schema": [
                    {
                        "properties": {
                            "functions": { "type": "boolean" },
                            "methods": { "type": "boolean" },
                            "names": { "type": "object" },
                            "parameters": { "type": "boolean" },
                            "properties": { "type": "boolean" },
                            "strict": { "type": "boolean" },
                            "types": { "type": "object" },
                            "variables": { "type": "boolean" }
                        },
                        "type": "object"
                    }
                ],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/finnish.md",
                "description": "Enforces the use of Finnish notation.",
                "recommended": false,
                "ts": {
                    "severity": "error",
                    "options": {
                        "functions": false,
                        "methods": false,
                        "names": {
                            "^(canActivate|canActivateChild|canDeactivate|canLoad|intercept|resolve|validate)$": false
                        },
                        "parameters": true,
                        "properties": true,
                        "strict": false,
                        "types": { "^EventEmitter$": false },
                        "variables": true
                    }
                }
            },
            "no-async-subscribe": {
                "hasSuggestions": false,
                "messages": { "forbidden": "Passing async functions to subscribe is forbidden." },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-async-subscribe.md",
                "description": "Forbids passing `async` functions to `subscribe`.",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-create": {
                "hasSuggestions": false,
                "messages": { "forbidden": "Observable.create is forbidden; use new Observable." },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-create.md",
                "description": "Forbids the calling of `Observable.create`.",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-ignored-notifier": {
                "hasSuggestions": false,
                "messages": { "forbidden": "Ignoring the notifier is forbidden." },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-ignored-notifier.md",
                "description": "Forbids observables not composed from the `repeatWhen` or `retryWhen` notifier.",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-ignored-replay-buffer": {
                "hasSuggestions": false,
                "messages": { "forbidden": "Ignoring the buffer size is forbidden." },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-ignored-replay-buffer.md",
                "description": "Forbids using `ReplaySubject`, `publishReplay` or `shareReplay` without specifying the buffer size.",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-ignored-takewhile-value": {
                "hasSuggestions": false,
                "messages": { "forbidden": "Ignoring the value within takeWhile is forbidden." },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-ignored-takewhile-value.md",
                "description": "Forbids ignoring the value within `takeWhile`.",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-implicit-any-catch": {
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "explicitAny": "Explicit `any` in `catchError`.",
                    "implicitAny": "Implicit `any` in `catchError`.",
                    "narrowed": "Error type must be `unknown` or `any`.",
                    "suggestExplicitUnknown": "Use `unknown` instead, this will force you to explicitly and safely assert the type is correct."
                },
                "schema": [
                    {
                        "additionalProperties": false,
                        "properties": { "allowExplicitAny": { "type": "boolean" } },
                        "type": "object"
                    }
                ],
                "type": "suggestion",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-implicit-any-catch.md",
                "description": "Forbids implicit `any` error parameters in `catchError` operators.",
                "recommended": "error",
                "suggestion": true,
                "ts": { "severity": "error" }
            },
            "no-index": {
                "hasSuggestions": false,
                "messages": { "forbidden": "RxJS imports from index modules are forbidden." },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-index.md",
                "description": "Forbids the importation from index modules.",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-internal": {
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "forbidden": "RxJS imports from internal are forbidden.",
                    "suggest": "Import from a non-internal location."
                },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-internal.md",
                "description": "Forbids the importation of internals.",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-nested-subscribe": {
                "hasSuggestions": false,
                "messages": { "forbidden": "Nested subscribe calls are forbidden." },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-nested-subscribe.md",
                "description": "Forbids the calling of `subscribe` within a `subscribe` callback.",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-redundant-notify": {
                "hasSuggestions": false,
                "messages": { "forbidden": "Redundant notifications are forbidden." },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-redundant-notify.md",
                "description": "Forbids redundant notifications from completed or errored observables.",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-sharereplay": {
                "hasSuggestions": false,
                "messages": {
                    "forbidden": "shareReplay is forbidden.",
                    "forbiddenWithoutConfig": "shareReplay is forbidden unless a config argument is passed."
                },
                "schema": [
                    { "properties": { "allowConfig": { "type": "boolean" } }, "type": "object" }
                ],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-sharereplay.md",
                "description": "Forbids using the `shareReplay` operator.",
                "recommended": "error",
                "ts": { "severity": "error", "options": { "allowConfig": true } }
            },
            "no-subject-unsubscribe": {
                "hasSuggestions": false,
                "messages": { "forbidden": "Calling unsubscribe on a subject is forbidden." },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-subject-unsubscribe.md",
                "description": "Forbids calling the `unsubscribe` method of a subject instance.",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-unbound-methods": {
                "hasSuggestions": false,
                "messages": { "forbidden": "Unbound methods are forbidden." },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-unbound-methods.md",
                "description": "Forbids the passing of unbound methods.",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-unsafe-subject-next": {
                "hasSuggestions": false,
                "messages": { "forbidden": "Unsafe optional next calls are forbidden." },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-unsafe-subject-next.md",
                "description": "Forbids unsafe optional `next` calls.",
                "recommended": "error",
                "ts": { "severity": "error" }
            },
            "no-unsafe-takeuntil": {
                "hasSuggestions": false,
                "messages": { "forbidden": "Applying operators after takeUntil is forbidden." },
                "schema": [
                    {
                        "properties": {
                            "alias": { "type": "array", "items": { "type": "string" } },
                            "allow": { "type": "array", "items": { "type": "string" } }
                        },
                        "type": "object",
                        "description": "An optional object with optional `alias` and `allow` properties.\nThe `alias` property is an array containing the names of operators that aliases for `takeUntil`.\nThe `allow` property is an array containing the names of the operators that are allowed to follow `takeUntil`."
                    }
                ],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-unsafe-takeuntil.md",
                "description": "Forbids the application of operators after `takeUntil`.",
                "recommended": "error",
                "ts": { "severity": "error" }
            }
        }
    }
}
