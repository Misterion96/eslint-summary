{
    "@angular-eslint/eslint-plugin-template": {
        "fields": [
            "type",
            "description",
            "recommended",
            "hasSuggestions",
            "fixable",
            "deprecated",
            "replacedBy"
        ],
        "rules": {
            "cyclomatic-complexity": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "maxComplexity": {
                                "type": "number",
                                "minimum": 1
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "cyclomaticComplexity": "The cyclomatic complexity {{totalComplexity}} exceeds the defined limit {{maxComplexity}}"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/cyclomatic-complexity.md",
                "description": "Checks cyclomatic complexity against a specified limit. It is a quantitative measure of the number of linearly independent paths through a program's source code",
                "recommended": false,
                "html": {
                    "severity": "error",
                    "options": {
                        "maxComplexity": 4
                    }
                }
            },
            "no-inline-styles": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowNgStyle": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowBindToStyle": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "noInlineStyles": "<{{element}}/> element should not have inline styles via style attribute. Please use classes instead."
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/no-inline-styles.md",
                "description": "Disallows the use of inline styles in HTML templates",
                "recommended": false,
                "html": {
                    "severity": "error"
                }
            },
            "no-call-expression": {
                "type": "suggestion",
                "schema": [
                    {
                        "additionalProperties": false,
                        "properties": {
                            "allowList": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "uniqueItems": true
                            }
                        },
                        "type": "object"
                    }
                ],
                "messages": {
                    "noCallExpression": "Avoid calling expressions in templates"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/no-call-expression.md",
                "description": "Disallows calling expressions in templates, except for output handlers",
                "recommended": false,
                "html": {
                    "severity": "error"
                }
            },
            "no-positive-tabindex": {
                "type": "suggestion",
                "hasSuggestions": true,
                "schema": [],
                "messages": {
                    "noPositiveTabindex": "The `tabindex` attribute should not be positive",
                    "suggestNonNegativeTabindex": "Use `tabindex=\"{{tabindex}}\"`"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/no-positive-tabindex.md",
                "description": "Ensures that the `tabindex` attribute is not positive",
                "recommended": false,
                "html": {
                    "severity": "error"
                }
            },
            "use-track-by-function": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "useTrackByFunction": "Missing trackBy function in ngFor directive"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/use-track-by-function.md",
                "description": "Ensures trackBy function is used",
                "recommended": false,
                "html": {
                    "severity": "error"
                }
            },
            "accessibility-alt-text": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "accessibilityAltText": "<{{element}}/> element must have a text alternative."
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/accessibility-alt-text.md",
                "description": "Enforces alternate text for elements which require the alt, aria-label, aria-labelledby attributes.",
                "recommended": false,
                "html": {
                    "severity": "error"
                }
            },
            "no-negated-async": {
                "type": "suggestion",
                "hasSuggestions": true,
                "schema": [],
                "messages": {
                    "noNegatedAsync": "Async pipe results should not be negated. Use `(observable | async) === false`, `(observable | async) === null`, or `(observable | async) === undefined` to check its value instead",
                    "suggestFalseComparison": "Compare with `false`",
                    "suggestNullComparison": "Compare with `null`",
                    "suggestUndefinedComparison": "Compare with `undefined`"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/no-negated-async.md",
                "description": "Ensures that async pipe results are not negated",
                "recommended": "error",
                "html": {
                    "severity": "error"
                }
            },
            "eqeqeq": {
                "type": "suggestion",
                "hasSuggestions": true,
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowNullOrUndefined": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "eqeqeq": "Expected `{{expectedOperation}}` but received `{{actualOperation}}`",
                    "suggestStrictEquality": "Replace `{{actualOperation}}` with `{{expectedOperation}}`"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/eqeqeq.md",
                "description": "Requires `===` and `!==` in place of `==` and `!=`",
                "recommended": "error",
                "html": {
                    "severity": "error"
                }
            },
            "no-duplicate-attributes": {
                "type": "problem",
                "hasSuggestions": true,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowTwoWayDataBinding": {
                                "type": "boolean",
                                "default": true,
                                "description": "Whether or not two-way data binding is allowed as an exception to the rule."
                            },
                            "ignore": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true,
                                "default": [],
                                "description": "Input or output properties for which duplicate presence is allowed as an exception to the rule."
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "noDuplicateAttributes": "Duplicate attribute `{{attributeName}}`",
                    "suggestRemoveAttribute": "Remove attribute `{{attributeName}}`"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/no-duplicate-attributes.md",
                "description": "Ensures that there are no duplicate input properties or output event listeners",
                "recommended": false,
                "html": {
                    "severity": "error"
                }
            },
            "accessibility-elements-content": {
                "type": "suggestion",
                "schema": [
                    {
                        "additionalProperties": false,
                        "properties": {
                            "allowList": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "uniqueItems": true
                            }
                        },
                        "type": "object"
                    }
                ],
                "messages": {
                    "accessibilityElementsContent": "<{{element}}> should have content"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/accessibility-elements-content.md",
                "description": "Ensures that the heading, anchor and button elements have content in it",
                "recommended": false,
                "html": {
                    "severity": "error"
                }
            },
            "conditional-complexity": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "maxComplexity": {
                                "minimum": 1,
                                "type": "number"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "conditionalComplexity": "The conditional complexity {{totalComplexity}} exceeds the defined limit {{maxComplexity}}"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/conditional-complexity.md",
                "description": "The conditional complexity should not exceed a rational limit",
                "recommended": false,
                "html": {
                    "severity": "error",
                    "options": {
                        "maxComplexity": 2
                    }
                }
            },
            "attributes-order": {
                "type": "layout",
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "alphabetical": {
                                "type": "boolean",
                                "default": false
                            },
                            "order": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "STRUCTURAL_DIRECTIVE",
                                        "TEMPLATE_REFERENCE",
                                        "ATTRIBUTE_BINDING",
                                        "INPUT_BINDING",
                                        "TWO_WAY_BINDING",
                                        "OUTPUT_BINDING"
                                    ]
                                },
                                "default": [
                                    "STRUCTURAL_DIRECTIVE",
                                    "TEMPLATE_REFERENCE",
                                    "ATTRIBUTE_BINDING",
                                    "INPUT_BINDING",
                                    "TWO_WAY_BINDING",
                                    "OUTPUT_BINDING"
                                ],
                                "minItems": 6,
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "attributesOrder": "The element's attributes/bindings did not match the expected order: expected {{expected}} instead of {{actual}}"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/attributes-order.md",
                "description": "Ensures that HTML attributes and Angular bindings are sorted based on an expected order",
                "recommended": false,
                "html": {
                    "severity": "off"
                }
            },
            "i18n": {
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "boundTextAllowedPattern": {
                                "type": "string"
                            },
                            "checkAttributes": {
                                "type": "boolean",
                                "default": true
                            },
                            "checkDuplicateId": {
                                "type": "boolean",
                                "default": true
                            },
                            "checkId": {
                                "type": "boolean",
                                "default": true
                            },
                            "checkText": {
                                "type": "boolean",
                                "default": true
                            },
                            "ignoreAttributes": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "default": [
                                    "autocomplete",
                                    "charset",
                                    "class",
                                    "color",
                                    "colspan",
                                    "dir",
                                    "fill",
                                    "for",
                                    "formArrayName",
                                    "formControlName",
                                    "formGroupName",
                                    "height",
                                    "href",
                                    "id",
                                    "lang",
                                    "list",
                                    "name",
                                    "ngClass",
                                    "ngProjectAs",
                                    "role",
                                    "routerLink",
                                    "routerLinkActive",
                                    "src",
                                    "stroke",
                                    "stroke-width",
                                    "style",
                                    "svgIcon",
                                    "tabindex",
                                    "target",
                                    "type",
                                    "value",
                                    "viewBox",
                                    "width",
                                    "xmlns"
                                ]
                            },
                            "ignoreTags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "requireDescription": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "i18nAttribute": "Attribute \"{{attributeName}}\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations",
                    "i18nAttributeOnIcuOrText": "Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations",
                    "i18nCustomIdOnAttribute": "Missing custom ID on attribute \"i18n-{{attributeName}}\". See more at https://angular.io/guide/i18n#manage-marked-text-with-custom-ids",
                    "i18nCustomIdOnElement": "Missing custom ID on element. See more at https://angular.io/guide/i18n#manage-marked-text-with-custom-ids",
                    "i18nDuplicateCustomId": "Duplicate custom ID \"@@{{customId}}\". See more at https://angular.io/guide/i18n#define-unique-custom-ids",
                    "suggestAddI18nAttribute": "Add the `i18n` attribute",
                    "i18nMissingDescription": "Missing i18n description on element. See more at https://angular.io/guide/i18n-common-prepare#i18n-metadata-for-translation"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/i18n.md",
                "description": "Ensures following best practices for i18n. Checks for missing i18n attributes on elements and attributes containing texts. Can also check for texts without i18n attribute, elements that do not use custom ID (@@) feature and duplicate custom IDs",
                "recommended": false,
                "html": {
                    "severity": "off"
                }
            },
            "click-events-have-key-events": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "clickEventsHaveKeyEvents": "click must be accompanied by either keyup, keydown or keypress event for accessibility."
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/click-events-have-key-events.md",
                "description": "Ensures that the click event is accompanied with at least one key event keyup, keydown or keypress.",
                "recommended": false,
                "html": {
                    "severity": "off"
                }
            },
            "button-has-type": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "missingType": "Type for <button> is missing",
                    "invalidType": "\"{{type}}\" can not be used as a type for <button>"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/button-has-type.md",
                "description": "Ensures that a button has a valid type specified",
                "recommended": false,
                "html": {
                    "severity": "off"
                }
            },
            "accessibility-interactive-supports-focus": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "interactiveSupportsFocus": "Elements with interaction handlers must be focusable."
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/accessibility-interactive-supports-focus.md",
                "description": "Ensures that elements with interactive handlers like `(click)` are focusable.",
                "recommended": false,
                "html": {
                    "severity": "off"
                }
            },
            "accessibility-label-for": {
                "deprecated": true,
                "replacedBy": ["accessibility-label-has-associated-control"],
                "type": "suggestion",
                "schema": [
                    {
                        "additionalProperties": false,
                        "properties": {
                            "controlComponents": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "uniqueItems": true
                            },
                            "labelAttributes": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "uniqueItems": true
                            },
                            "labelComponents": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "uniqueItems": true
                            }
                        },
                        "type": "object"
                    }
                ],
                "messages": {
                    "accessibilityLabelFor": "A label element/component must be associated with a form element"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/accessibility-label-for.md",
                "description": "Ensures that a label element/component is associated with a form element",
                "recommended": false,
                "html": {
                    "severity": "warn"
                }
            },
            "accessibility-label-has-associated-control": {
                "type": "suggestion",
                "schema": [
                    {
                        "additionalProperties": false,
                        "properties": {
                            "controlComponents": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "uniqueItems": true
                            },
                            "labelComponents": {
                                "items": {
                                    "additionalProperties": false,
                                    "properties": {
                                        "inputs": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array",
                                            "uniqueItems": true
                                        },
                                        "selector": {
                                            "type": "string"
                                        }
                                    },
                                    "required": ["selector"],
                                    "type": "object"
                                },
                                "type": "array",
                                "uniqueItems": true
                            }
                        },
                        "type": "object"
                    }
                ],
                "messages": {
                    "accessibilityLabelHasAssociatedControl": "A label component must be associated with a form element"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/accessibility-label-has-associated-control.md",
                "description": "Ensures that a label element/component is associated with a form element",
                "recommended": false,
                "html": {
                    "severity": "off"
                }
            },
            "mouse-events-have-key-events": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "mouseEventsHaveKeyEvents": "`{{mouseEvent}}` must be accompanied by `{{keyEvent}}` for accessibility (https://www.w3.org/WAI/WCAG21/Understanding/keyboard)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/mouse-events-have-key-events.md",
                "description": "Ensures that the mouse events `mouseout` and `mouseover` are accompanied by `focus` and `blur` events respectively. Coding for the keyboard is important for users with physical disabilities who cannot use a mouse, AT compatibility, and screenreader users. See more at https://www.w3.org/WAI/WCAG21/Understanding/keyboard",
                "recommended": false,
                "html": {
                    "severity": "off"
                }
            },
            "accessibility-role-has-required-aria": {
                "type": "suggestion",
                "hasSuggestions": true,
                "schema": [],
                "messages": {
                    "roleHasRequiredAria": "The {{element}} with role=\"{{role}}\" does not have required ARIA properties: {{missingProps}}",
                    "suggestRemoveRole": "Remove role `{{role}}`"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/accessibility-role-has-required-aria.md",
                "description": "Ensures elements with ARIA roles have all required properties for that role.",
                "recommended": false,
                "html": {
                    "severity": "error"
                }
            },
            "accessibility-table-scope": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [],
                "messages": {
                    "accessibilityTableScope": "The `scope` attribute should only be on the `<th>` element"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/accessibility-table-scope.md",
                "description": "Ensures that the `scope` attribute is only used on the `<th>` element",
                "recommended": false,
                "html": {
                    "severity": "error"
                }
            },
            "accessibility-valid-aria": {
                "type": "suggestion",
                "hasSuggestions": true,
                "schema": [],
                "messages": {
                    "accessibilityValidAria": "The `{{attribute}}` is an invalid ARIA attribute",
                    "accessibilityValidAriaValue": "The `{{attribute}}` has an invalid value. Check the valid values at https://raw.githack.com/w3c/aria/stable/#roles",
                    "suggestRemoveInvalidAria": "Remove attribute `{{attribute}}`"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/accessibility-valid-aria.md",
                "description": "Ensures that correct ARIA attributes and respective values are used",
                "recommended": false,
                "html": {
                    "severity": "error"
                }
            },
            "banana-in-box": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [],
                "messages": {
                    "bananaInBox": "Invalid binding syntax. Use [(expr)] instead"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/banana-in-box.md",
                "description": "Ensures that the two-way data binding syntax is correct",
                "recommended": "error",
                "html": {
                    "severity": "error"
                }
            },
            "no-any": {
                "type": "suggestion",
                "hasSuggestions": true,
                "schema": [],
                "messages": {
                    "noAny": "Avoid using \"$any\" in templates",
                    "suggestRemoveAny": "Remove $any"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/no-any.md",
                "description": "The use of \"$any\" nullifies the compile-time benefits of Angular's type system",
                "recommended": false,
                "html": {
                    "severity": "error"
                }
            },
            "no-autofocus": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [],
                "messages": {
                    "noAutofocus": "The `autofocus` attribute should not be used, as it reduces usability and accessibility for users"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/no-autofocus.md",
                "description": "Ensures that the `autofocus` attribute is not used",
                "recommended": false,
                "html": {
                    "severity": "error"
                }
            },
            "no-distracting-elements": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [],
                "messages": {
                    "noDistractingElements": "Do not use <{{element}}> elements as they can create visual accessibility issues and are deprecated"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin-template/docs/rules/no-distracting-elements.md",
                "description": "Enforces that no distracting elements are used",
                "recommended": false,
                "html": {
                    "severity": "error"
                }
            }
        }
    },
    "eslint-plugin-prettier": {
        "fields": ["type", "fixable"],
        "rules": {
            "prettier": {
                "type": "layout",
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {},
                        "additionalProperties": true
                    },
                    {
                        "type": "object",
                        "properties": {
                            "usePrettierrc": {
                                "type": "boolean"
                            },
                            "fileInfoOptions": {
                                "type": "object",
                                "properties": {},
                                "additionalProperties": true
                            }
                        },
                        "additionalProperties": true
                    }
                ],
                "messages": {
                    "insert": "Insert `{{ insertText }}`",
                    "delete": "Delete `{{ deleteText }}`",
                    "replace": "Replace `{{ deleteText }}` with `{{ insertText }}`"
                },
                "url": "https://github.com/prettier/eslint-plugin-prettier#options",
                "html": {
                    "severity": "warn",
                    "options": {
                        "endOfLine": "auto"
                    }
                },
                "js": {
                    "severity": "warn",
                    "options": {
                        "endOfLine": "auto"
                    }
                },
                "ts": {
                    "severity": "warn",
                    "options": {
                        "endOfLine": "auto"
                    }
                }
            }
        }
    },
    "eslint": {
        "fields": [
            "type",
            "fixable",
            "description",
            "category",
            "recommended",
            "deprecated",
            "replacedBy",
            "suggestion"
        ],
        "rules": {
            "arrow-body-style": {
                "type": "suggestion",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": ["always", "never"]
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 1
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": ["as-needed"]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "requireReturnForObjectLiteral": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "fixable": "code",
                "messages": {
                    "unexpectedOtherBlock": "Unexpected block statement surrounding arrow body.",
                    "unexpectedEmptyBlock": "Unexpected block statement surrounding arrow body; put a value of `undefined` immediately after the `=>`.",
                    "unexpectedObjectBlock": "Unexpected block statement surrounding arrow body; parenthesize the returned value and move it immediately after the `=>`.",
                    "unexpectedSingleBlock": "Unexpected block statement surrounding arrow body; move the returned value immediately after the `=>`.",
                    "expectedBlock": "Expected block statement surrounding arrow body."
                },
                "url": "https://eslint.org/docs/rules/arrow-body-style",
                "description": "require braces around arrow function bodies",
                "category": "ECMAScript 6",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-arrow-callback": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowNamedFunctions": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowUnboundThis": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "preferArrowCallback": "Unexpected function expression."
                },
                "url": "https://eslint.org/docs/rules/prefer-arrow-callback",
                "description": "require using arrow functions for callbacks",
                "category": "ECMAScript 6",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "curly": {
                "type": "suggestion",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": ["all"]
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 1
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "multi",
                                        "multi-line",
                                        "multi-or-nest"
                                    ]
                                },
                                {
                                    "enum": ["consistent"]
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "fixable": "code",
                "messages": {
                    "missingCurlyAfter": "Expected { after '{{name}}'.",
                    "missingCurlyAfterCondition": "Expected { after '{{name}}' condition.",
                    "unexpectedCurlyAfter": "Unnecessary { after '{{name}}'.",
                    "unexpectedCurlyAfterCondition": "Unnecessary { after '{{name}}' condition."
                },
                "url": "https://eslint.org/docs/rules/curly",
                "description": "enforce consistent brace style for all control statements",
                "category": "Best Practices",
                "recommended": false,
                "html": {
                    "severity": 0
                },
                "js": {
                    "severity": 0
                },
                "ts": {
                    "severity": "error"
                }
            },
            "lines-around-comment": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "beforeBlockComment": {
                                "type": "boolean",
                                "default": true
                            },
                            "afterBlockComment": {
                                "type": "boolean",
                                "default": false
                            },
                            "beforeLineComment": {
                                "type": "boolean",
                                "default": false
                            },
                            "afterLineComment": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowBlockStart": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowBlockEnd": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowClassStart": {
                                "type": "boolean"
                            },
                            "allowClassEnd": {
                                "type": "boolean"
                            },
                            "allowObjectStart": {
                                "type": "boolean"
                            },
                            "allowObjectEnd": {
                                "type": "boolean"
                            },
                            "allowArrayStart": {
                                "type": "boolean"
                            },
                            "allowArrayEnd": {
                                "type": "boolean"
                            },
                            "ignorePattern": {
                                "type": "string"
                            },
                            "applyDefaultIgnorePatterns": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "after": "Expected line after comment.",
                    "before": "Expected line before comment."
                },
                "url": "https://eslint.org/docs/rules/lines-around-comment",
                "description": "require empty lines around comments",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": 0
                },
                "js": {
                    "severity": 0
                },
                "ts": {
                    "severity": 0
                }
            },
            "max-len": {
                "type": "layout",
                "schema": [
                    {
                        "anyOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "code": {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "comments": {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "tabWidth": {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "ignorePattern": {
                                        "type": "string"
                                    },
                                    "ignoreComments": {
                                        "type": "boolean"
                                    },
                                    "ignoreStrings": {
                                        "type": "boolean"
                                    },
                                    "ignoreUrls": {
                                        "type": "boolean"
                                    },
                                    "ignoreTemplateLiterals": {
                                        "type": "boolean"
                                    },
                                    "ignoreRegExpLiterals": {
                                        "type": "boolean"
                                    },
                                    "ignoreTrailingComments": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "type": "integer",
                                "minimum": 0
                            }
                        ]
                    },
                    {
                        "anyOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "code": {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "comments": {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "tabWidth": {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "ignorePattern": {
                                        "type": "string"
                                    },
                                    "ignoreComments": {
                                        "type": "boolean"
                                    },
                                    "ignoreStrings": {
                                        "type": "boolean"
                                    },
                                    "ignoreUrls": {
                                        "type": "boolean"
                                    },
                                    "ignoreTemplateLiterals": {
                                        "type": "boolean"
                                    },
                                    "ignoreRegExpLiterals": {
                                        "type": "boolean"
                                    },
                                    "ignoreTrailingComments": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "type": "integer",
                                "minimum": 0
                            }
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "integer",
                                "minimum": 0
                            },
                            "comments": {
                                "type": "integer",
                                "minimum": 0
                            },
                            "tabWidth": {
                                "type": "integer",
                                "minimum": 0
                            },
                            "ignorePattern": {
                                "type": "string"
                            },
                            "ignoreComments": {
                                "type": "boolean"
                            },
                            "ignoreStrings": {
                                "type": "boolean"
                            },
                            "ignoreUrls": {
                                "type": "boolean"
                            },
                            "ignoreTemplateLiterals": {
                                "type": "boolean"
                            },
                            "ignoreRegExpLiterals": {
                                "type": "boolean"
                            },
                            "ignoreTrailingComments": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "max": "This line has a length of {{lineLength}}. Maximum allowed is {{maxLength}}.",
                    "maxComment": "This line has a comment length of {{lineLength}}. Maximum allowed is {{maxCommentLength}}."
                },
                "url": "https://eslint.org/docs/rules/max-len",
                "description": "enforce a maximum line length",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": 0
                },
                "js": {
                    "severity": 0
                },
                "ts": {
                    "severity": "error",
                    "options": {
                        "code": 140
                    }
                }
            },
            "no-confusing-arrow": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowParens": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "confusing": "Arrow function used ambiguously with a conditional expression."
                },
                "url": "https://eslint.org/docs/rules/no-confusing-arrow",
                "description": "disallow arrow functions where they could be confused with comparisons",
                "category": "ECMAScript 6",
                "recommended": false,
                "html": {
                    "severity": 0
                },
                "js": {
                    "severity": 0
                },
                "ts": {
                    "severity": 0
                }
            },
            "no-mixed-operators": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "groups": {
                                "type": "array",
                                "items": {
                                    "type": "array",
                                    "items": {
                                        "enum": [
                                            "+",
                                            "-",
                                            "*",
                                            "/",
                                            "%",
                                            "**",
                                            "&",
                                            "|",
                                            "^",
                                            "~",
                                            "<<",
                                            ">>",
                                            ">>>",
                                            "==",
                                            "!=",
                                            "===",
                                            "!==",
                                            ">",
                                            ">=",
                                            "<",
                                            "<=",
                                            "&&",
                                            "||",
                                            "in",
                                            "instanceof",
                                            "?:",
                                            "??"
                                        ]
                                    },
                                    "minItems": 2,
                                    "uniqueItems": true
                                },
                                "uniqueItems": true
                            },
                            "allowSamePrecedence": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedMixedOperator": "Unexpected mix of '{{leftOperator}}' and '{{rightOperator}}'. Use parentheses to clarify the intended order of operations."
                },
                "url": "https://eslint.org/docs/rules/no-mixed-operators",
                "description": "disallow mixed binary operators",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": 0
                },
                "js": {
                    "severity": 0
                },
                "ts": {
                    "severity": 0
                }
            },
            "no-tabs": {
                "type": "layout",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowIndentationTabs": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedTab": "Unexpected tab character."
                },
                "url": "https://eslint.org/docs/rules/no-tabs",
                "description": "disallow all tabs",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": 0
                },
                "js": {
                    "severity": 0
                },
                "ts": {
                    "severity": 0
                }
            },
            "no-unexpected-multiline": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "function": "Unexpected newline between function and ( of function call.",
                    "property": "Unexpected newline between object and [ of property access.",
                    "taggedTemplate": "Unexpected newline between template tag and template literal.",
                    "division": "Unexpected newline between numerator and division operator."
                },
                "url": "https://eslint.org/docs/rules/no-unexpected-multiline",
                "description": "disallow confusing multiline expressions",
                "category": "Possible Errors",
                "recommended": true,
                "html": {
                    "severity": 0
                },
                "js": {
                    "severity": 0
                },
                "ts": {
                    "severity": 0
                }
            },
            "quotes": {
                "type": "layout",
                "fixable": "code",
                "schema": [
                    {
                        "enum": [
                            "single",
                            "double",
                            "backtick"
                        ]
                    },
                    {
                        "anyOf": [
                            {
                                "enum": ["avoid-escape"]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "avoidEscape": {
                                        "type": "boolean"
                                    },
                                    "allowTemplateLiterals": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "wrongQuotes": "Strings must use {{description}}."
                },
                "url": "https://eslint.org/docs/rules/quotes",
                "description": "enforce the consistent use of either backticks, double, or single quotes",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": 0
                },
                "js": {
                    "severity": 0
                },
                "ts": {
                    "severity": "off"
                }
            },
            "array-bracket-newline": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": [
                                    "always",
                                    "never",
                                    "consistent"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "multiline": {
                                        "type": "boolean"
                                    },
                                    "minItems": {
                                        "type": ["integer", "null"],
                                        "minimum": 0
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
                    "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                    "missingOpeningLinebreak": "A linebreak is required after '['.",
                    "missingClosingLinebreak": "A linebreak is required before ']'."
                },
                "url": "https://eslint.org/docs/rules/array-bracket-newline",
                "description": "enforce linebreaks after opening and before closing array brackets",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "array-bracket-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": ["always", "never"]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "singleValue": {
                                "type": "boolean"
                            },
                            "objectsInArrays": {
                                "type": "boolean"
                            },
                            "arraysInArrays": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                    "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                    "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                    "missingSpaceBefore": "A space is required before '{{tokenValue}}'."
                },
                "url": "https://eslint.org/docs/rules/array-bracket-spacing",
                "description": "enforce consistent spacing inside array brackets",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "array-element-newline": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": {
                    "definitions": {
                        "basicConfig": {
                            "oneOf": [
                                {
                                    "enum": [
                                        "always",
                                        "never",
                                        "consistent"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "multiline": {
                                            "type": "boolean"
                                        },
                                        "minItems": {
                                            "type": ["integer", "null"],
                                            "minimum": 0
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        }
                    },
                    "items": [
                        {
                            "oneOf": [
                                {
                                    "$ref": "#/definitions/basicConfig"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "ArrayExpression": {
                                            "$ref": "#/definitions/basicConfig"
                                        },
                                        "ArrayPattern": {
                                            "$ref": "#/definitions/basicConfig"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "minProperties": 1
                                }
                            ]
                        }
                    ]
                },
                "messages": {
                    "unexpectedLineBreak": "There should be no linebreak here.",
                    "missingLineBreak": "There should be a linebreak after this element."
                },
                "url": "https://eslint.org/docs/rules/array-element-newline",
                "description": "enforce line breaks after each array element",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "arrow-parens": {
                "type": "layout",
                "fixable": "code",
                "schema": [
                    {
                        "enum": ["always", "as-needed"]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "requireForBlockBody": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedParens": "Unexpected parentheses around single function argument.",
                    "expectedParens": "Expected parentheses around arrow function argument.",
                    "unexpectedParensInline": "Unexpected parentheses around single function argument having a body with no curly braces.",
                    "expectedParensBlock": "Expected parentheses around arrow function argument having a body with curly braces."
                },
                "url": "https://eslint.org/docs/rules/arrow-parens",
                "description": "require parentheses around arrow function arguments",
                "category": "ECMAScript 6",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "error",
                    "options": "as-needed"
                }
            },
            "arrow-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "before": {
                                "type": "boolean",
                                "default": true
                            },
                            "after": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "expectedBefore": "Missing space before =>.",
                    "unexpectedBefore": "Unexpected space before =>.",
                    "expectedAfter": "Missing space after =>.",
                    "unexpectedAfter": "Unexpected space after =>."
                },
                "url": "https://eslint.org/docs/rules/arrow-spacing",
                "description": "enforce consistent spacing before and after the arrow in arrow functions",
                "category": "ECMAScript 6",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "block-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": ["always", "never"]
                    }
                ],
                "messages": {
                    "missing": "Requires a space {{location}} '{{token}}'.",
                    "extra": "Unexpected space(s) {{location}} '{{token}}'."
                },
                "url": "https://eslint.org/docs/rules/block-spacing",
                "description": "disallow or enforce spaces inside of blocks after opening block and before closing block",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "brace-style": {
                "type": "layout",
                "schema": [
                    {
                        "enum": [
                            "1tbs",
                            "stroustrup",
                            "allman"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "allowSingleLine": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "whitespace",
                "messages": {
                    "nextLineOpen": "Opening curly brace does not appear on the same line as controlling statement.",
                    "sameLineOpen": "Opening curly brace appears on the same line as controlling statement.",
                    "blockSameLine": "Statement inside of curly braces should be on next line.",
                    "nextLineClose": "Closing curly brace does not appear on the same line as the subsequent block.",
                    "singleLineClose": "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
                    "sameLineClose": "Closing curly brace appears on the same line as the subsequent block."
                },
                "url": "https://eslint.org/docs/rules/brace-style",
                "description": "enforce consistent brace style for blocks",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "comma-dangle": {
                "type": "layout",
                "fixable": "code",
                "schema": {
                    "definitions": {
                        "value": {
                            "enum": [
                                "always-multiline",
                                "always",
                                "never",
                                "only-multiline"
                            ]
                        },
                        "valueWithIgnore": {
                            "enum": [
                                "always-multiline",
                                "always",
                                "ignore",
                                "never",
                                "only-multiline"
                            ]
                        }
                    },
                    "type": "array",
                    "items": [
                        {
                            "oneOf": [
                                {
                                    "$ref": "#/definitions/value"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "arrays": {
                                            "$ref": "#/definitions/valueWithIgnore"
                                        },
                                        "objects": {
                                            "$ref": "#/definitions/valueWithIgnore"
                                        },
                                        "imports": {
                                            "$ref": "#/definitions/valueWithIgnore"
                                        },
                                        "exports": {
                                            "$ref": "#/definitions/valueWithIgnore"
                                        },
                                        "functions": {
                                            "$ref": "#/definitions/valueWithIgnore"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        }
                    ]
                },
                "messages": {
                    "unexpected": "Unexpected trailing comma.",
                    "missing": "Missing trailing comma."
                },
                "url": "https://eslint.org/docs/rules/comma-dangle",
                "description": "require or disallow trailing commas",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off",
                    "options": {
                        "objects": "always-multiline",
                        "arrays": "always-multiline",
                        "functions": "always-multiline"
                    }
                }
            },
            "comma-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "before": {
                                "type": "boolean",
                                "default": false
                            },
                            "after": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "missing": "A space is required {{loc}} ','.",
                    "unexpected": "There should be no space {{loc}} ','."
                },
                "url": "https://eslint.org/docs/rules/comma-spacing",
                "description": "enforce consistent spacing before and after commas",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "comma-style": {
                "type": "layout",
                "fixable": "code",
                "schema": [
                    {
                        "enum": ["first", "last"]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "exceptions": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "boolean"
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
                    "expectedCommaFirst": "',' should be placed first.",
                    "expectedCommaLast": "',' should be placed last."
                },
                "url": "https://eslint.org/docs/rules/comma-style",
                "description": "enforce consistent comma style",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "computed-property-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": ["always", "never"]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "enforceForClassMembers": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                    "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                    "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                    "missingSpaceAfter": "A space is required after '{{tokenValue}}'."
                },
                "url": "https://eslint.org/docs/rules/computed-property-spacing",
                "description": "enforce consistent spacing inside computed property brackets",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "dot-location": {
                "type": "layout",
                "schema": [
                    {
                        "enum": ["object", "property"]
                    }
                ],
                "fixable": "code",
                "messages": {
                    "expectedDotAfterObject": "Expected dot to be on same line as object.",
                    "expectedDotBeforeProperty": "Expected dot to be on same line as property."
                },
                "url": "https://eslint.org/docs/rules/dot-location",
                "description": "enforce consistent newlines before and after dots",
                "category": "Best Practices",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "eol-last": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never",
                            "unix",
                            "windows"
                        ]
                    }
                ],
                "messages": {
                    "missing": "Newline required at end of file but not found.",
                    "unexpected": "Newline not allowed at end of file."
                },
                "url": "https://eslint.org/docs/rules/eol-last",
                "description": "require or disallow newline at the end of files",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "func-call-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": ["never"]
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 1
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": ["always"]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "allowNewlines": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "messages": {
                    "unexpectedWhitespace": "Unexpected whitespace between function name and paren.",
                    "unexpectedNewline": "Unexpected newline between function name and paren.",
                    "missing": "Missing space between function name and paren."
                },
                "url": "https://eslint.org/docs/rules/func-call-spacing",
                "description": "require or disallow spacing between function identifiers and their invocations",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "function-call-argument-newline": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never",
                            "consistent"
                        ]
                    }
                ],
                "messages": {
                    "unexpectedLineBreak": "There should be no line break here.",
                    "missingLineBreak": "There should be a line break after this argument."
                },
                "url": "https://eslint.org/docs/rules/function-call-argument-newline",
                "description": "enforce line breaks between arguments of a function call",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "function-paren-newline": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": [
                                    "always",
                                    "never",
                                    "consistent",
                                    "multiline",
                                    "multiline-arguments"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "minItems": {
                                        "type": "integer",
                                        "minimum": 0
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "expectedBefore": "Expected newline before ')'.",
                    "expectedAfter": "Expected newline after '('.",
                    "expectedBetween": "Expected newline between arguments/params.",
                    "unexpectedBefore": "Unexpected newline before ')'.",
                    "unexpectedAfter": "Unexpected newline after '('."
                },
                "url": "https://eslint.org/docs/rules/function-paren-newline",
                "description": "enforce consistent line breaks inside function parentheses",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "generator-star": {
                "url": "__NOT__DEFINED__",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "generator-star-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": [
                                    "before",
                                    "after",
                                    "both",
                                    "neither"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "before": {
                                        "type": "boolean"
                                    },
                                    "after": {
                                        "type": "boolean"
                                    },
                                    "named": {
                                        "oneOf": [
                                            {
                                                "enum": [
                                                    "before",
                                                    "after",
                                                    "both",
                                                    "neither"
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "before": {
                                                        "type": "boolean"
                                                    },
                                                    "after": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        ]
                                    },
                                    "anonymous": {
                                        "oneOf": [
                                            {
                                                "enum": [
                                                    "before",
                                                    "after",
                                                    "both",
                                                    "neither"
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "before": {
                                                        "type": "boolean"
                                                    },
                                                    "after": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        ]
                                    },
                                    "method": {
                                        "oneOf": [
                                            {
                                                "enum": [
                                                    "before",
                                                    "after",
                                                    "both",
                                                    "neither"
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "before": {
                                                        "type": "boolean"
                                                    },
                                                    "after": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "missingBefore": "Missing space before *.",
                    "missingAfter": "Missing space after *.",
                    "unexpectedBefore": "Unexpected space before *.",
                    "unexpectedAfter": "Unexpected space after *."
                },
                "url": "https://eslint.org/docs/rules/generator-star-spacing",
                "description": "enforce consistent spacing around `*` operators in generator functions",
                "category": "ECMAScript 6",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "implicit-arrow-linebreak": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": ["beside", "below"]
                    }
                ],
                "messages": {
                    "expected": "Expected a linebreak before this expression.",
                    "unexpected": "Expected no linebreak before this expression."
                },
                "url": "https://eslint.org/docs/rules/implicit-arrow-linebreak",
                "description": "enforce the location of arrow function bodies",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "indent": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": ["tab"]
                            },
                            {
                                "type": "integer",
                                "minimum": 0
                            }
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "SwitchCase": {
                                "type": "integer",
                                "minimum": 0,
                                "default": 0
                            },
                            "VariableDeclarator": {
                                "oneOf": [
                                    {
                                        "oneOf": [
                                            {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            {
                                                "enum": ["first", "off"]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "var": {
                                                "oneOf": [
                                                    {
                                                        "type": "integer",
                                                        "minimum": 0
                                                    },
                                                    {
                                                        "enum": ["first", "off"]
                                                    }
                                                ]
                                            },
                                            "let": {
                                                "oneOf": [
                                                    {
                                                        "type": "integer",
                                                        "minimum": 0
                                                    },
                                                    {
                                                        "enum": ["first", "off"]
                                                    }
                                                ]
                                            },
                                            "const": {
                                                "oneOf": [
                                                    {
                                                        "type": "integer",
                                                        "minimum": 0
                                                    },
                                                    {
                                                        "enum": ["first", "off"]
                                                    }
                                                ]
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                ]
                            },
                            "outerIIFEBody": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    {
                                        "enum": ["off"]
                                    }
                                ]
                            },
                            "MemberExpression": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    {
                                        "enum": ["off"]
                                    }
                                ]
                            },
                            "FunctionDeclaration": {
                                "type": "object",
                                "properties": {
                                    "parameters": {
                                        "oneOf": [
                                            {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            {
                                                "enum": ["first", "off"]
                                            }
                                        ]
                                    },
                                    "body": {
                                        "type": "integer",
                                        "minimum": 0
                                    }
                                },
                                "additionalProperties": false
                            },
                            "FunctionExpression": {
                                "type": "object",
                                "properties": {
                                    "parameters": {
                                        "oneOf": [
                                            {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            {
                                                "enum": ["first", "off"]
                                            }
                                        ]
                                    },
                                    "body": {
                                        "type": "integer",
                                        "minimum": 0
                                    }
                                },
                                "additionalProperties": false
                            },
                            "CallExpression": {
                                "type": "object",
                                "properties": {
                                    "arguments": {
                                        "oneOf": [
                                            {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            {
                                                "enum": ["first", "off"]
                                            }
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            },
                            "ArrayExpression": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    {
                                        "enum": ["first", "off"]
                                    }
                                ]
                            },
                            "ObjectExpression": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    {
                                        "enum": ["first", "off"]
                                    }
                                ]
                            },
                            "ImportDeclaration": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    {
                                        "enum": ["first", "off"]
                                    }
                                ]
                            },
                            "flatTernaryExpressions": {
                                "type": "boolean",
                                "default": false
                            },
                            "offsetTernaryExpressions": {
                                "type": "boolean",
                                "default": false
                            },
                            "ignoredNodes": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "not": {
                                        "pattern": ":exit$"
                                    }
                                }
                            },
                            "ignoreComments": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}."
                },
                "url": "https://eslint.org/docs/rules/indent",
                "description": "enforce consistent indentation",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "jsx-quotes": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": ["prefer-single", "prefer-double"]
                    }
                ],
                "messages": {
                    "unexpected": "Unexpected usage of {{description}}."
                },
                "url": "https://eslint.org/docs/rules/jsx-quotes",
                "description": "enforce the consistent use of either double or single quotes in JSX attributes",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "key-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "anyOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "align": {
                                        "anyOf": [
                                            {
                                                "enum": ["colon", "value"]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "mode": {
                                                        "enum": ["strict", "minimum"]
                                                    },
                                                    "on": {
                                                        "enum": ["colon", "value"]
                                                    },
                                                    "beforeColon": {
                                                        "type": "boolean"
                                                    },
                                                    "afterColon": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        ]
                                    },
                                    "mode": {
                                        "enum": ["strict", "minimum"]
                                    },
                                    "beforeColon": {
                                        "type": "boolean"
                                    },
                                    "afterColon": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "singleLine": {
                                        "type": "object",
                                        "properties": {
                                            "mode": {
                                                "enum": ["strict", "minimum"]
                                            },
                                            "beforeColon": {
                                                "type": "boolean"
                                            },
                                            "afterColon": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "multiLine": {
                                        "type": "object",
                                        "properties": {
                                            "align": {
                                                "anyOf": [
                                                    {
                                                        "enum": ["colon", "value"]
                                                    },
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "mode": {
                                                                "enum": ["strict", "minimum"]
                                                            },
                                                            "on": {
                                                                "enum": ["colon", "value"]
                                                            },
                                                            "beforeColon": {
                                                                "type": "boolean"
                                                            },
                                                            "afterColon": {
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "additionalProperties": false
                                                    }
                                                ]
                                            },
                                            "mode": {
                                                "enum": ["strict", "minimum"]
                                            },
                                            "beforeColon": {
                                                "type": "boolean"
                                            },
                                            "afterColon": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "singleLine": {
                                        "type": "object",
                                        "properties": {
                                            "mode": {
                                                "enum": ["strict", "minimum"]
                                            },
                                            "beforeColon": {
                                                "type": "boolean"
                                            },
                                            "afterColon": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "multiLine": {
                                        "type": "object",
                                        "properties": {
                                            "mode": {
                                                "enum": ["strict", "minimum"]
                                            },
                                            "beforeColon": {
                                                "type": "boolean"
                                            },
                                            "afterColon": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "align": {
                                        "type": "object",
                                        "properties": {
                                            "mode": {
                                                "enum": ["strict", "minimum"]
                                            },
                                            "on": {
                                                "enum": ["colon", "value"]
                                            },
                                            "beforeColon": {
                                                "type": "boolean"
                                            },
                                            "afterColon": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                    "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                    "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                    "missingValue": "Missing space before value for {{computed}}key '{{key}}'."
                },
                "url": "https://eslint.org/docs/rules/key-spacing",
                "description": "enforce consistent spacing between keys and values in object literal properties",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "keyword-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "before": {
                                "type": "boolean",
                                "default": true
                            },
                            "after": {
                                "type": "boolean",
                                "default": true
                            },
                            "overrides": {
                                "type": "object",
                                "properties": {
                                    "abstract": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "as": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "async": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "await": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "boolean": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "break": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "byte": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "case": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "catch": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "char": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "class": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "const": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "continue": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "debugger": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "default": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "delete": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "do": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "double": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "else": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "enum": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "export": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "extends": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "false": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "final": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "finally": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "float": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "for": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "from": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "function": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "get": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "goto": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "if": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "implements": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "import": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "in": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "instanceof": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "int": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "interface": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "let": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "long": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "native": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "new": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "null": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "of": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "package": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "private": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "protected": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "public": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "return": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "set": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "short": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "static": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "super": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "switch": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "synchronized": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "this": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "throw": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "throws": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "transient": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "true": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "try": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "typeof": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "var": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "void": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "volatile": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "while": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "with": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "yield": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "expectedBefore": "Expected space(s) before \"{{value}}\".",
                    "expectedAfter": "Expected space(s) after \"{{value}}\".",
                    "unexpectedBefore": "Unexpected space(s) before \"{{value}}\".",
                    "unexpectedAfter": "Unexpected space(s) after \"{{value}}\"."
                },
                "url": "https://eslint.org/docs/rules/keyword-spacing",
                "description": "enforce consistent spacing before and after keywords",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "linebreak-style": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": ["unix", "windows"]
                    }
                ],
                "messages": {
                    "expectedLF": "Expected linebreaks to be 'LF' but found 'CRLF'.",
                    "expectedCRLF": "Expected linebreaks to be 'CRLF' but found 'LF'."
                },
                "url": "https://eslint.org/docs/rules/linebreak-style",
                "description": "enforce consistent linebreak style",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "multiline-ternary": {
                "type": "layout",
                "schema": [
                    {
                        "enum": [
                            "always",
                            "always-multiline",
                            "never"
                        ]
                    }
                ],
                "messages": {
                    "expectedTestCons": "Expected newline between test and consequent of ternary expression.",
                    "expectedConsAlt": "Expected newline between consequent and alternate of ternary expression.",
                    "unexpectedTestCons": "Unexpected newline between test and consequent of ternary expression.",
                    "unexpectedConsAlt": "Unexpected newline between consequent and alternate of ternary expression."
                },
                "fixable": "whitespace",
                "url": "https://eslint.org/docs/rules/multiline-ternary",
                "description": "enforce newlines between operands of ternary expressions",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "newline-per-chained-call": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "ignoreChainWithDepth": {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 10,
                                "default": 2
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "expected": "Expected line break before `{{callee}}`."
                },
                "url": "https://eslint.org/docs/rules/newline-per-chained-call",
                "description": "require a newline after each call in a method chain",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "new-parens": {
                "type": "layout",
                "fixable": "code",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": ["always", "never"]
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 1
                        }
                    ]
                },
                "messages": {
                    "missing": "Missing '()' invoking a constructor.",
                    "unnecessary": "Unnecessary '()' invoking a constructor with no arguments."
                },
                "url": "https://eslint.org/docs/rules/new-parens",
                "description": "enforce or disallow parentheses when invoking a constructor with no arguments",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-arrow-condition": {
                "url": "__NOT__DEFINED__",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "no-comma-dangle": {
                "url": "__NOT__DEFINED__",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "no-extra-parens": {
                "type": "layout",
                "fixable": "code",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": ["functions"]
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 1
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": ["all"]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "conditionalAssign": {
                                            "type": "boolean"
                                        },
                                        "nestedBinaryExpressions": {
                                            "type": "boolean"
                                        },
                                        "returnAssign": {
                                            "type": "boolean"
                                        },
                                        "ignoreJSX": {
                                            "enum": [
                                                "none",
                                                "all",
                                                "single-line",
                                                "multi-line"
                                            ]
                                        },
                                        "enforceForArrowConditionals": {
                                            "type": "boolean"
                                        },
                                        "enforceForSequenceExpressions": {
                                            "type": "boolean"
                                        },
                                        "enforceForNewInMemberExpressions": {
                                            "type": "boolean"
                                        },
                                        "enforceForFunctionPrototypeMethods": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "messages": {
                    "unexpected": "Unnecessary parentheses around expression."
                },
                "url": "https://eslint.org/docs/rules/no-extra-parens",
                "description": "disallow unnecessary parentheses",
                "category": "Possible Errors",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "no-extra-semi": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [],
                "messages": {
                    "unexpected": "Unnecessary semicolon."
                },
                "url": "https://eslint.org/docs/rules/no-extra-semi",
                "description": "disallow unnecessary semicolons",
                "category": "Possible Errors",
                "recommended": true,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "no-floating-decimal": {
                "type": "suggestion",
                "schema": [],
                "fixable": "code",
                "messages": {
                    "leading": "A leading decimal point can be confused with a dot.",
                    "trailing": "A trailing decimal point can be confused with a dot."
                },
                "url": "https://eslint.org/docs/rules/no-floating-decimal",
                "description": "disallow leading or trailing decimal points in numeric literals",
                "category": "Best Practices",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "no-mixed-spaces-and-tabs": {
                "type": "layout",
                "schema": [
                    {
                        "enum": [
                            "smart-tabs",
                            true,
                            false
                        ]
                    }
                ],
                "messages": {
                    "mixedSpacesAndTabs": "Mixed spaces and tabs."
                },
                "url": "https://eslint.org/docs/rules/no-mixed-spaces-and-tabs",
                "description": "disallow mixed spaces and tabs for indentation",
                "category": "Stylistic Issues",
                "recommended": true,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "no-multi-spaces": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "exceptions": {
                                "type": "object",
                                "patternProperties": {
                                    "^([A-Z][a-z]*)+$": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            },
                            "ignoreEOLComments": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "multipleSpaces": "Multiple spaces found before '{{displayValue}}'."
                },
                "url": "https://eslint.org/docs/rules/no-multi-spaces",
                "description": "disallow multiple spaces",
                "category": "Best Practices",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "no-multiple-empty-lines": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "max": {
                                "type": "integer",
                                "minimum": 0
                            },
                            "maxEOF": {
                                "type": "integer",
                                "minimum": 0
                            },
                            "maxBOF": {
                                "type": "integer",
                                "minimum": 0
                            }
                        },
                        "required": ["max"],
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "blankBeginningOfFile": "Too many blank lines at the beginning of file. Max of {{max}} allowed.",
                    "blankEndOfFile": "Too many blank lines at the end of file. Max of {{max}} allowed.",
                    "consecutiveBlank": "More than {{max}} blank {{pluralizedLines}} not allowed."
                },
                "url": "https://eslint.org/docs/rules/no-multiple-empty-lines",
                "description": "disallow multiple empty lines",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "error",
                    "options": {
                        "max": 1
                    }
                }
            },
            "no-reserved-keys": {
                "url": "__NOT__DEFINED__",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "no-space-before-semi": {
                "url": "__NOT__DEFINED__",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "no-trailing-spaces": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "skipBlankLines": {
                                "type": "boolean",
                                "default": false
                            },
                            "ignoreComments": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "trailingSpace": "Trailing spaces not allowed."
                },
                "url": "https://eslint.org/docs/rules/no-trailing-spaces",
                "description": "disallow trailing whitespace at the end of lines",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-whitespace-before-property": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [],
                "messages": {
                    "unexpectedWhitespace": "Unexpected whitespace before property {{propName}}."
                },
                "url": "https://eslint.org/docs/rules/no-whitespace-before-property",
                "description": "disallow whitespace before properties",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "no-wrap-func": {
                "url": "__NOT__DEFINED__",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "nonblock-statement-body-position": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "beside",
                            "below",
                            "any"
                        ]
                    },
                    {
                        "properties": {
                            "overrides": {
                                "properties": {
                                    "if": {
                                        "enum": [
                                            "beside",
                                            "below",
                                            "any"
                                        ]
                                    },
                                    "else": {
                                        "enum": [
                                            "beside",
                                            "below",
                                            "any"
                                        ]
                                    },
                                    "while": {
                                        "enum": [
                                            "beside",
                                            "below",
                                            "any"
                                        ]
                                    },
                                    "do": {
                                        "enum": [
                                            "beside",
                                            "below",
                                            "any"
                                        ]
                                    },
                                    "for": {
                                        "enum": [
                                            "beside",
                                            "below",
                                            "any"
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "expectNoLinebreak": "Expected no linebreak before this statement.",
                    "expectLinebreak": "Expected a linebreak before this statement."
                },
                "url": "https://eslint.org/docs/rules/nonblock-statement-body-position",
                "description": "enforce the location of single-line statements",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "object-curly-newline": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "oneOf": [
                                    {
                                        "enum": ["always", "never"]
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "multiline": {
                                                "type": "boolean"
                                            },
                                            "minProperties": {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            "consistent": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "minProperties": 1
                                    }
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "ObjectExpression": {
                                        "oneOf": [
                                            {
                                                "enum": ["always", "never"]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "multiline": {
                                                        "type": "boolean"
                                                    },
                                                    "minProperties": {
                                                        "type": "integer",
                                                        "minimum": 0
                                                    },
                                                    "consistent": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "minProperties": 1
                                            }
                                        ]
                                    },
                                    "ObjectPattern": {
                                        "oneOf": [
                                            {
                                                "enum": ["always", "never"]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "multiline": {
                                                        "type": "boolean"
                                                    },
                                                    "minProperties": {
                                                        "type": "integer",
                                                        "minimum": 0
                                                    },
                                                    "consistent": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "minProperties": 1
                                            }
                                        ]
                                    },
                                    "ImportDeclaration": {
                                        "oneOf": [
                                            {
                                                "enum": ["always", "never"]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "multiline": {
                                                        "type": "boolean"
                                                    },
                                                    "minProperties": {
                                                        "type": "integer",
                                                        "minimum": 0
                                                    },
                                                    "consistent": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "minProperties": 1
                                            }
                                        ]
                                    },
                                    "ExportDeclaration": {
                                        "oneOf": [
                                            {
                                                "enum": ["always", "never"]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "multiline": {
                                                        "type": "boolean"
                                                    },
                                                    "minProperties": {
                                                        "type": "integer",
                                                        "minimum": 0
                                                    },
                                                    "consistent": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "minProperties": 1
                                            }
                                        ]
                                    }
                                },
                                "additionalProperties": false,
                                "minProperties": 1
                            }
                        ]
                    }
                ],
                "messages": {
                    "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                    "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                    "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                    "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace."
                },
                "url": "https://eslint.org/docs/rules/object-curly-newline",
                "description": "enforce consistent line breaks after opening and before closing braces",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "object-curly-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": ["always", "never"]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "arraysInObjects": {
                                "type": "boolean"
                            },
                            "objectsInObjects": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "requireSpaceBefore": "A space is required before '{{token}}'.",
                    "requireSpaceAfter": "A space is required after '{{token}}'.",
                    "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                    "unexpectedSpaceAfter": "There should be no space after '{{token}}'."
                },
                "url": "https://eslint.org/docs/rules/object-curly-spacing",
                "description": "enforce consistent spacing inside braces",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "object-property-newline": {
                "type": "layout",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowAllPropertiesOnSameLine": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowMultiplePropertiesPerLine": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "whitespace",
                "messages": {
                    "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
                    "propertiesOnNewline": "Object properties must go on a new line."
                },
                "url": "https://eslint.org/docs/rules/object-property-newline",
                "description": "enforce placing object properties on separate lines",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "one-var-declaration-per-line": {
                "type": "suggestion",
                "schema": [
                    {
                        "enum": ["always", "initializations"]
                    }
                ],
                "fixable": "whitespace",
                "messages": {
                    "expectVarOnNewline": "Expected variable declaration to be on a new line."
                },
                "url": "https://eslint.org/docs/rules/one-var-declaration-per-line",
                "description": "require or disallow newlines around variable declarations",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "operator-linebreak": {
                "type": "layout",
                "schema": [
                    {
                        "enum": [
                            "after",
                            "before",
                            "none",
                            null
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "overrides": {
                                "type": "object",
                                "additionalProperties": {
                                    "enum": [
                                        "after",
                                        "before",
                                        "none",
                                        "ignore"
                                    ]
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "operatorAtBeginning": "'{{operator}}' should be placed at the beginning of the line.",
                    "operatorAtEnd": "'{{operator}}' should be placed at the end of the line.",
                    "badLinebreak": "Bad line breaking before and after '{{operator}}'.",
                    "noLinebreak": "There should be no line break before or after '{{operator}}'."
                },
                "url": "https://eslint.org/docs/rules/operator-linebreak",
                "description": "enforce consistent linebreak style for operators",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "padded-blocks": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": ["always", "never"]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "blocks": {
                                        "enum": ["always", "never"]
                                    },
                                    "switches": {
                                        "enum": ["always", "never"]
                                    },
                                    "classes": {
                                        "enum": ["always", "never"]
                                    }
                                },
                                "additionalProperties": false,
                                "minProperties": 1
                            }
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "allowSingleLineBlocks": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "alwaysPadBlock": "Block must be padded by blank lines.",
                    "neverPadBlock": "Block must not be padded by blank lines."
                },
                "url": "https://eslint.org/docs/rules/padded-blocks",
                "description": "require or disallow padding within blocks",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "quote-props": {
                "type": "suggestion",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "always",
                                        "as-needed",
                                        "consistent",
                                        "consistent-as-needed"
                                    ]
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 1
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "always",
                                        "as-needed",
                                        "consistent",
                                        "consistent-as-needed"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "keywords": {
                                            "type": "boolean"
                                        },
                                        "unnecessary": {
                                            "type": "boolean"
                                        },
                                        "numbers": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "fixable": "code",
                "messages": {
                    "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                    "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                    "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                    "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
                    "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                    "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                    "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant."
                },
                "url": "https://eslint.org/docs/rules/quote-props",
                "description": "require quotes around object literal property names",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "error",
                    "options": "as-needed"
                }
            },
            "rest-spread-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": ["always", "never"]
                    }
                ],
                "messages": {
                    "unexpectedWhitespace": "Unexpected whitespace after {{type}} operator.",
                    "expectedWhitespace": "Expected whitespace after {{type}} operator."
                },
                "url": "https://eslint.org/docs/rules/rest-spread-spacing",
                "description": "enforce spacing between rest and spread operators and their expressions",
                "category": "ECMAScript 6",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "semi": {
                "type": "layout",
                "fixable": "code",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": ["never"]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "beforeStatementContinuationChars": {
                                            "enum": [
                                                "always",
                                                "any",
                                                "never"
                                            ]
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": ["always"]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "omitLastInOneLineBlock": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "messages": {
                    "missingSemi": "Missing semicolon.",
                    "extraSemi": "Extra semicolon."
                },
                "url": "https://eslint.org/docs/rules/semi",
                "description": "require or disallow semicolons instead of ASI",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "semi-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "before": {
                                "type": "boolean",
                                "default": false
                            },
                            "after": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedWhitespaceBefore": "Unexpected whitespace before semicolon.",
                    "unexpectedWhitespaceAfter": "Unexpected whitespace after semicolon.",
                    "missingWhitespaceBefore": "Missing whitespace before semicolon.",
                    "missingWhitespaceAfter": "Missing whitespace after semicolon."
                },
                "url": "https://eslint.org/docs/rules/semi-spacing",
                "description": "enforce consistent spacing before and after semicolons",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "semi-style": {
                "type": "layout",
                "schema": [
                    {
                        "enum": ["last", "first"]
                    }
                ],
                "fixable": "whitespace",
                "messages": {
                    "expectedSemiColon": "Expected this semicolon to be at {{pos}}."
                },
                "url": "https://eslint.org/docs/rules/semi-style",
                "description": "enforce location of semicolons",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "space-after-function-name": {
                "url": "__NOT__DEFINED__",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "space-after-keywords": {
                "url": "__NOT__DEFINED__",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "space-before-blocks": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": ["always", "never"]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "keywords": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "off"
                                        ]
                                    },
                                    "functions": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "off"
                                        ]
                                    },
                                    "classes": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "off"
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "unexpectedSpace": "Unexpected space before opening brace.",
                    "missingSpace": "Missing space before opening brace."
                },
                "url": "https://eslint.org/docs/rules/space-before-blocks",
                "description": "enforce consistent spacing before blocks",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "space-before-function-paren": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": ["always", "never"]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "anonymous": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "ignore"
                                        ]
                                    },
                                    "named": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "ignore"
                                        ]
                                    },
                                    "asyncArrow": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "ignore"
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "unexpectedSpace": "Unexpected space before function parentheses.",
                    "missingSpace": "Missing space before function parentheses."
                },
                "url": "https://eslint.org/docs/rules/space-before-function-paren",
                "description": "enforce consistent spacing before `function` definition opening parenthesis",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off",
                    "options": {
                        "anonymous": "never",
                        "asyncArrow": "always",
                        "named": "never"
                    }
                }
            },
            "space-before-function-parentheses": {
                "url": "__NOT__DEFINED__",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "space-before-keywords": {
                "url": "__NOT__DEFINED__",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "space-in-brackets": {
                "url": "__NOT__DEFINED__",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "space-in-parens": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": ["always", "never"]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "exceptions": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "{}",
                                        "[]",
                                        "()",
                                        "empty"
                                    ]
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "missingOpeningSpace": "There must be a space after this paren.",
                    "missingClosingSpace": "There must be a space before this paren.",
                    "rejectedOpeningSpace": "There should be no space after this paren.",
                    "rejectedClosingSpace": "There should be no space before this paren."
                },
                "url": "https://eslint.org/docs/rules/space-in-parens",
                "description": "enforce consistent spacing inside parentheses",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "error",
                    "options": "never"
                }
            },
            "space-infix-ops": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "int32Hint": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "missingSpace": "Operator '{{operator}}' must be spaced."
                },
                "url": "https://eslint.org/docs/rules/space-infix-ops",
                "description": "require spacing around infix operators",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "space-return-throw-case": {
                "url": "__NOT__DEFINED__",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "space-unary-ops": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "words": {
                                "type": "boolean",
                                "default": true
                            },
                            "nonwords": {
                                "type": "boolean",
                                "default": false
                            },
                            "overrides": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "boolean"
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
                    "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                    "unexpectedAfterWord": "Unexpected space after unary word operator '{{word}}'.",
                    "wordOperator": "Unary word operator '{{word}}' must be followed by whitespace.",
                    "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                    "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'."
                },
                "url": "https://eslint.org/docs/rules/space-unary-ops",
                "description": "enforce consistent spacing before or after unary operators",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "space-unary-word-ops": {
                "url": "__NOT__DEFINED__",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "switch-colon-spacing": {
                "type": "layout",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "before": {
                                "type": "boolean",
                                "default": false
                            },
                            "after": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "whitespace",
                "messages": {
                    "expectedBefore": "Expected space(s) before this colon.",
                    "expectedAfter": "Expected space(s) after this colon.",
                    "unexpectedBefore": "Unexpected space(s) before this colon.",
                    "unexpectedAfter": "Unexpected space(s) after this colon."
                },
                "url": "https://eslint.org/docs/rules/switch-colon-spacing",
                "description": "enforce spacing around colons of switch statements",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "template-curly-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": ["always", "never"]
                    }
                ],
                "messages": {
                    "expectedBefore": "Expected space(s) before '}'.",
                    "expectedAfter": "Expected space(s) after '${'.",
                    "unexpectedBefore": "Unexpected space(s) before '}'.",
                    "unexpectedAfter": "Unexpected space(s) after '${'."
                },
                "url": "https://eslint.org/docs/rules/template-curly-spacing",
                "description": "require or disallow spacing around embedded expressions of template strings",
                "category": "ECMAScript 6",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "template-tag-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": ["always", "never"]
                    }
                ],
                "messages": {
                    "unexpected": "Unexpected space between template tag and template literal.",
                    "missing": "Missing space between template tag and template literal."
                },
                "url": "https://eslint.org/docs/rules/template-tag-spacing",
                "description": "require or disallow spacing between template tags and their literals",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "unicode-bom": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": ["always", "never"]
                    }
                ],
                "messages": {
                    "expected": "Expected Unicode BOM (Byte Order Mark).",
                    "unexpected": "Unexpected Unicode BOM (Byte Order Mark)."
                },
                "url": "https://eslint.org/docs/rules/unicode-bom",
                "description": "require or disallow Unicode byte order mark (BOM)",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "wrap-iife": {
                "type": "layout",
                "schema": [
                    {
                        "enum": [
                            "outside",
                            "inside",
                            "any"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "functionPrototypeMethods": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "wrapInvocation": "Wrap an immediate function invocation in parentheses.",
                    "wrapExpression": "Wrap only the function expression in parens.",
                    "moveInvocation": "Move the invocation into the parens that contain the function."
                },
                "url": "https://eslint.org/docs/rules/wrap-iife",
                "description": "require parentheses around immediate `function` invocations",
                "category": "Best Practices",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "wrap-regex": {
                "type": "layout",
                "schema": [],
                "fixable": "code",
                "messages": {
                    "requireParens": "Wrap the regexp literal in parens to disambiguate the slash."
                },
                "url": "https://eslint.org/docs/rules/wrap-regex",
                "description": "require parenthesis around regex literals",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "yield-star-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": [
                                    "before",
                                    "after",
                                    "both",
                                    "neither"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "before": {
                                        "type": "boolean"
                                    },
                                    "after": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "missingBefore": "Missing space before *.",
                    "missingAfter": "Missing space after *.",
                    "unexpectedBefore": "Unexpected space before *.",
                    "unexpectedAfter": "Unexpected space after *."
                },
                "url": "https://eslint.org/docs/rules/yield-star-spacing",
                "description": "require or disallow spacing around the `*` in `yield*` expressions",
                "category": "ECMAScript 6",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "indent-legacy": {
                "type": "layout",
                "deprecated": true,
                "replacedBy": ["indent"],
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": ["tab"]
                            },
                            {
                                "type": "integer",
                                "minimum": 0
                            }
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "SwitchCase": {
                                "type": "integer",
                                "minimum": 0
                            },
                            "VariableDeclarator": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "var": {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            "let": {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            "const": {
                                                "type": "integer",
                                                "minimum": 0
                                            }
                                        }
                                    }
                                ]
                            },
                            "outerIIFEBody": {
                                "type": "integer",
                                "minimum": 0
                            },
                            "MemberExpression": {
                                "type": "integer",
                                "minimum": 0
                            },
                            "FunctionDeclaration": {
                                "type": "object",
                                "properties": {
                                    "parameters": {
                                        "oneOf": [
                                            {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            {
                                                "enum": ["first"]
                                            }
                                        ]
                                    },
                                    "body": {
                                        "type": "integer",
                                        "minimum": 0
                                    }
                                }
                            },
                            "FunctionExpression": {
                                "type": "object",
                                "properties": {
                                    "parameters": {
                                        "oneOf": [
                                            {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            {
                                                "enum": ["first"]
                                            }
                                        ]
                                    },
                                    "body": {
                                        "type": "integer",
                                        "minimum": 0
                                    }
                                }
                            },
                            "CallExpression": {
                                "type": "object",
                                "properties": {
                                    "parameters": {
                                        "oneOf": [
                                            {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            {
                                                "enum": ["first"]
                                            }
                                        ]
                                    }
                                }
                            },
                            "ArrayExpression": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    {
                                        "enum": ["first"]
                                    }
                                ]
                            },
                            "ObjectExpression": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    {
                                        "enum": ["first"]
                                    }
                                ]
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "expected": "Expected indentation of {{expected}} but found {{actual}}."
                },
                "url": "https://eslint.org/docs/rules/indent-legacy",
                "description": "enforce consistent indentation",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "no-spaced-func": {
                "type": "layout",
                "deprecated": true,
                "replacedBy": ["func-call-spacing"],
                "fixable": "whitespace",
                "schema": [],
                "messages": {
                    "noSpacedFunction": "Unexpected space between function name and paren."
                },
                "url": "https://eslint.org/docs/rules/no-spaced-func",
                "description": "disallow spacing between function identifiers and their applications (deprecated)",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "no-nested-ternary": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "noNestedTernary": "Do not nest ternary expressions."
                },
                "url": "https://eslint.org/docs/rules/no-nested-ternary",
                "description": "disallow nested ternary expressions",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "yoda": {
                "type": "suggestion",
                "schema": [
                    {
                        "enum": ["always", "never"]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "exceptRange": {
                                "type": "boolean",
                                "default": false
                            },
                            "onlyEquality": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "expected": "Expected literal to be on the {{expectedSide}} side of {{operator}}."
                },
                "url": "https://eslint.org/docs/rules/yoda",
                "description": "require or disallow \"Yoda\" conditions",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "class-methods-use-this": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "exceptMethods": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "missingThis": "Expected 'this' to be used by class {{name}}."
                },
                "url": "https://eslint.org/docs/rules/class-methods-use-this",
                "description": "enforce that class methods utilize `this`",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "no-unnecessary-callback-wrapper": {
                "url": "__NOT__DEFINED__",
                "ts": {
                    "severity": "off"
                }
            },
            "default-case": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commentPattern": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "missingDefaultCase": "Expected a default case."
                },
                "url": "https://eslint.org/docs/rules/default-case",
                "description": "require `default` cases in `switch` statements",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "id-blacklist": {
                "deprecated": true,
                "replacedBy": ["id-denylist"],
                "type": "suggestion",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true
                },
                "messages": {
                    "restricted": "Identifier '{{name}}' is restricted."
                },
                "url": "https://eslint.org/docs/rules/id-blacklist",
                "description": "disallow specified identifiers",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "id-match": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "string"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "properties": {
                                "type": "boolean",
                                "default": false
                            },
                            "onlyDeclarations": {
                                "type": "boolean",
                                "default": false
                            },
                            "ignoreDestructuring": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "notMatch": "Identifier '{{name}}' does not match the pattern '{{pattern}}'."
                },
                "url": "https://eslint.org/docs/rules/id-match",
                "description": "require identifiers to match a specified regular expression",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "max-lines": {
                "type": "suggestion",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "type": "integer",
                                "minimum": 0
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "max": {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "skipComments": {
                                        "type": "boolean"
                                    },
                                    "skipBlankLines": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "exceed": "File has too many lines ({{actual}}). Maximum allowed is {{max}}."
                },
                "url": "https://eslint.org/docs/rules/max-lines",
                "description": "enforce a maximum number of lines per file",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "no-duplicate-case": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "unexpected": "Duplicate case label."
                },
                "url": "https://eslint.org/docs/rules/no-duplicate-case",
                "description": "disallow duplicate case labels",
                "category": "Possible Errors",
                "recommended": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-duplicate-imports": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "includeExports": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "import": "'{{module}}' import is duplicated.",
                    "importAs": "'{{module}}' import is duplicated as export.",
                    "export": "'{{module}}' export is duplicated.",
                    "exportAs": "'{{module}}' export is duplicated as import."
                },
                "url": "https://eslint.org/docs/rules/no-duplicate-imports",
                "description": "disallow duplicate module imports",
                "category": "ECMAScript 6",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-extra-bind": {
                "type": "suggestion",
                "schema": [],
                "fixable": "code",
                "messages": {
                    "unexpected": "The function binding is unnecessary."
                },
                "url": "https://eslint.org/docs/rules/no-extra-bind",
                "description": "disallow unnecessary calls to `.bind()`",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-new-func": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "noFunctionConstructor": "The Function constructor is eval."
                },
                "url": "https://eslint.org/docs/rules/no-new-func",
                "description": "disallow `new` operators with the `Function` object",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-plusplus": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowForLoopAfterthoughts": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedUnaryOp": "Unary operator '{{operator}}' used."
                },
                "url": "https://eslint.org/docs/rules/no-plusplus",
                "description": "disallow the unary operators `++` and `--`",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-return-await": {
                "type": "suggestion",
                "fixable": null,
                "schema": [],
                "messages": {
                    "redundantUseOfAwait": "Redundant use of `await` on a return value."
                },
                "url": "https://eslint.org/docs/rules/no-return-await",
                "description": "disallow unnecessary `return await`",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-sequences": {
                "type": "suggestion",
                "schema": [
                    {
                        "properties": {
                            "allowInParentheses": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedCommaExpression": "Unexpected use of comma operator."
                },
                "url": "https://eslint.org/docs/rules/no-sequences",
                "description": "disallow comma operators",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-sparse-arrays": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "unexpectedSparseArray": "Unexpected comma in middle of array."
                },
                "url": "https://eslint.org/docs/rules/no-sparse-arrays",
                "description": "disallow sparse arrays",
                "category": "Possible Errors",
                "recommended": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-template-curly-in-string": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "unexpectedTemplateExpression": "Unexpected template string expression."
                },
                "url": "https://eslint.org/docs/rules/no-template-curly-in-string",
                "description": "disallow template literal placeholder syntax in regular strings",
                "category": "Possible Errors",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-underscore-dangle": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allow": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "allowAfterThis": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowAfterSuper": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowAfterThisConstructor": {
                                "type": "boolean",
                                "default": false
                            },
                            "enforceInMethodNames": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowFunctionParams": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedUnderscore": "Unexpected dangling '_' in '{{identifier}}'."
                },
                "url": "https://eslint.org/docs/rules/no-underscore-dangle",
                "description": "disallow dangling underscores in identifiers",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "no-void": {
                "type": "suggestion",
                "messages": {
                    "noVoid": "Expected 'undefined' and instead saw 'void'."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowAsStatement": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://eslint.org/docs/rules/no-void",
                "description": "disallow `void` operators",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "padding-line-between-statements": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": {
                    "definitions": {
                        "paddingType": {
                            "enum": [
                                "any",
                                "never",
                                "always"
                            ]
                        },
                        "statementType": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "*",
                                        "block-like",
                                        "cjs-export",
                                        "cjs-import",
                                        "directive",
                                        "expression",
                                        "iife",
                                        "multiline-block-like",
                                        "multiline-expression",
                                        "multiline-const",
                                        "multiline-let",
                                        "multiline-var",
                                        "singleline-const",
                                        "singleline-let",
                                        "singleline-var",
                                        "block",
                                        "empty",
                                        "function",
                                        "break",
                                        "case",
                                        "class",
                                        "const",
                                        "continue",
                                        "debugger",
                                        "default",
                                        "do",
                                        "export",
                                        "for",
                                        "if",
                                        "import",
                                        "let",
                                        "return",
                                        "switch",
                                        "throw",
                                        "try",
                                        "var",
                                        "while",
                                        "with"
                                    ]
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "enum": [
                                            "*",
                                            "block-like",
                                            "cjs-export",
                                            "cjs-import",
                                            "directive",
                                            "expression",
                                            "iife",
                                            "multiline-block-like",
                                            "multiline-expression",
                                            "multiline-const",
                                            "multiline-let",
                                            "multiline-var",
                                            "singleline-const",
                                            "singleline-let",
                                            "singleline-var",
                                            "block",
                                            "empty",
                                            "function",
                                            "break",
                                            "case",
                                            "class",
                                            "const",
                                            "continue",
                                            "debugger",
                                            "default",
                                            "do",
                                            "export",
                                            "for",
                                            "if",
                                            "import",
                                            "let",
                                            "return",
                                            "switch",
                                            "throw",
                                            "try",
                                            "var",
                                            "while",
                                            "with"
                                        ]
                                    },
                                    "minItems": 1,
                                    "uniqueItems": true,
                                    "additionalItems": false
                                }
                            ]
                        }
                    },
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "blankLine": {
                                "$ref": "#/definitions/paddingType"
                            },
                            "prev": {
                                "$ref": "#/definitions/statementType"
                            },
                            "next": {
                                "$ref": "#/definitions/statementType"
                            }
                        },
                        "additionalProperties": false,
                        "required": [
                            "blankLine",
                            "prev",
                            "next"
                        ]
                    },
                    "additionalItems": false
                },
                "messages": {
                    "unexpectedBlankLine": "Unexpected blank line before this statement.",
                    "expectedBlankLine": "Expected blank line before this statement."
                },
                "url": "https://eslint.org/docs/rules/padding-line-between-statements",
                "description": "require or disallow padding lines between statements",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "error",
                    "options": {
                        "blankLine": "always",
                        "prev": "*",
                        "next": "return"
                    }
                }
            },
            "prefer-object-spread": {
                "type": "suggestion",
                "schema": [],
                "fixable": "code",
                "messages": {
                    "useSpreadMessage": "Use an object spread instead of `Object.assign` eg: `{ ...foo }`.",
                    "useLiteralMessage": "Use an object literal instead of `Object.assign`. eg: `{ foo: bar }`."
                },
                "url": "https://eslint.org/docs/rules/prefer-object-spread",
                "description": "disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead.",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-template": {
                "type": "suggestion",
                "schema": [],
                "fixable": "code",
                "messages": {
                    "unexpectedStringConcatenation": "Unexpected string concatenation."
                },
                "url": "https://eslint.org/docs/rules/prefer-template",
                "description": "require template literals instead of string concatenation",
                "category": "ECMAScript 6",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-var": {
                "type": "suggestion",
                "schema": [],
                "fixable": "code",
                "messages": {
                    "unexpectedVar": "Unexpected var, use let or const instead."
                },
                "url": "https://eslint.org/docs/rules/no-var",
                "description": "require `let` or `const` instead of `var`",
                "category": "ECMAScript 6",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-const": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "destructuring": {
                                "enum": ["any", "all"],
                                "default": "any"
                            },
                            "ignoreReadBeforeAssign": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "useConst": "'{{name}}' is never reassigned. Use 'const' instead."
                },
                "url": "https://eslint.org/docs/rules/prefer-const",
                "description": "require `const` declarations for variables that are never reassigned after declared",
                "category": "ECMAScript 6",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-spread": {
                "type": "suggestion",
                "schema": [],
                "fixable": null,
                "messages": {
                    "preferSpread": "Use the spread operator instead of '.apply()'."
                },
                "url": "https://eslint.org/docs/rules/prefer-spread",
                "description": "require spread operators instead of `.apply()`",
                "category": "ECMAScript 6",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "func-names": {
                "type": "suggestion",
                "schema": {
                    "definitions": {
                        "value": {
                            "enum": [
                                "always",
                                "as-needed",
                                "never"
                            ]
                        }
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/value"
                        },
                        {
                            "type": "object",
                            "properties": {
                                "generators": {
                                    "$ref": "#/definitions/value"
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                },
                "messages": {
                    "unnamed": "Unexpected unnamed {{name}}.",
                    "named": "Unexpected named {{name}}."
                },
                "url": "https://eslint.org/docs/rules/func-names",
                "description": "require or disallow named `function` expressions",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "error",
                    "options": "as-needed"
                }
            },
            "operator-assignment": {
                "type": "suggestion",
                "schema": [
                    {
                        "enum": ["always", "never"]
                    }
                ],
                "fixable": "code",
                "messages": {
                    "replaced": "Assignment (=) can be replaced with operator assignment ({{operator}}=).",
                    "unexpected": "Unexpected operator assignment ({{operator}}=) shorthand."
                },
                "url": "https://eslint.org/docs/rules/operator-assignment",
                "description": "require or disallow assignment operator shorthand where possible",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "error",
                    "options": "never"
                }
            },
            "dot-notation": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowKeywords": {
                                "type": "boolean",
                                "default": true
                            },
                            "allowPattern": {
                                "type": "string",
                                "default": ""
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "useDot": "[{{key}}] is better written in dot notation.",
                    "useBrackets": ".{{key}} is a syntax error."
                },
                "url": "https://eslint.org/docs/rules/dot-notation",
                "description": "enforce dot notation whenever possible",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "no-throw-literal": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "object": "Expected an error object to be thrown.",
                    "undef": "Do not throw undefined."
                },
                "url": "https://eslint.org/docs/rules/no-throw-literal",
                "description": "disallow throwing literals as exceptions",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "no-magic-numbers": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "detectObjects": {
                                "type": "boolean",
                                "default": false
                            },
                            "enforceConst": {
                                "type": "boolean",
                                "default": false
                            },
                            "ignore": {
                                "type": "array",
                                "items": {
                                    "anyOf": [
                                        {
                                            "type": "number"
                                        },
                                        {
                                            "type": "string",
                                            "pattern": "^[+-]?(?:0|[1-9][0-9]*)n$"
                                        }
                                    ]
                                },
                                "uniqueItems": true
                            },
                            "ignoreArrayIndexes": {
                                "type": "boolean",
                                "default": false
                            },
                            "ignoreDefaultValues": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "useConst": "Number constants declarations must use 'const'.",
                    "noMagic": "No magic number: {{raw}}."
                },
                "url": "https://eslint.org/docs/rules/no-magic-numbers",
                "description": "disallow magic numbers",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "no-param-reassign": {
                "type": "suggestion",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "props": {
                                        "enum": [false]
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "props": {
                                        "enum": [true]
                                    },
                                    "ignorePropertyModificationsFor": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "uniqueItems": true
                                    },
                                    "ignorePropertyModificationsForRegex": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "uniqueItems": true
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "assignmentToFunctionParam": "Assignment to function parameter '{{name}}'.",
                    "assignmentToFunctionParamProp": "Assignment to property of function parameter '{{name}}'."
                },
                "url": "https://eslint.org/docs/rules/no-param-reassign",
                "description": "disallow reassigning `function` parameters",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "prefer-destructuring": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "VariableDeclarator": {
                                        "type": "object",
                                        "properties": {
                                            "array": {
                                                "type": "boolean"
                                            },
                                            "object": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "AssignmentExpression": {
                                        "type": "object",
                                        "properties": {
                                            "array": {
                                                "type": "boolean"
                                            },
                                            "object": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "array": {
                                        "type": "boolean"
                                    },
                                    "object": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "enforceForRenamedProperties": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "preferDestructuring": "Use {{type}} destructuring."
                },
                "url": "https://eslint.org/docs/rules/prefer-destructuring",
                "description": "require destructuring from arrays and/or objects",
                "category": "ECMAScript 6",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "no-useless-constructor": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "noUselessConstructor": "Useless constructor."
                },
                "url": "https://eslint.org/docs/rules/no-useless-constructor",
                "description": "disallow unnecessary constructors",
                "category": "ECMAScript 6",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "no-unused-vars": {
                "type": "problem",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": ["all", "local"]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "vars": {
                                        "enum": ["all", "local"]
                                    },
                                    "varsIgnorePattern": {
                                        "type": "string"
                                    },
                                    "args": {
                                        "enum": [
                                            "all",
                                            "after-used",
                                            "none"
                                        ]
                                    },
                                    "ignoreRestSiblings": {
                                        "type": "boolean"
                                    },
                                    "argsIgnorePattern": {
                                        "type": "string"
                                    },
                                    "caughtErrors": {
                                        "enum": ["all", "none"]
                                    },
                                    "caughtErrorsIgnorePattern": {
                                        "type": "string"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}."
                },
                "url": "https://eslint.org/docs/rules/no-unused-vars",
                "description": "disallow unused variables",
                "category": "Variables",
                "recommended": true,
                "ts": {
                    "severity": "off"
                }
            },
            "no-shadow": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "builtinGlobals": {
                                "type": "boolean",
                                "default": false
                            },
                            "hoist": {
                                "enum": [
                                    "all",
                                    "functions",
                                    "never"
                                ],
                                "default": "functions"
                            },
                            "allow": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "noShadow": "'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.",
                    "noShadowGlobal": "'{{name}}' is already a global variable."
                },
                "url": "https://eslint.org/docs/rules/no-shadow",
                "description": "disallow variable declarations from shadowing variables declared in the outer scope",
                "category": "Variables",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "no-invalid-this": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "capIsConstructor": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedThis": "Unexpected 'this'."
                },
                "url": "https://eslint.org/docs/rules/no-invalid-this",
                "description": "disallow `this` keywords outside of classes or class-like objects",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "no-redeclare": {
                "type": "suggestion",
                "messages": {
                    "redeclared": "'{{id}}' is already defined.",
                    "redeclaredAsBuiltin": "'{{id}}' is already defined as a built-in global variable.",
                    "redeclaredBySyntax": "'{{id}}' is already defined by a variable declaration."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "builtinGlobals": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://eslint.org/docs/rules/no-redeclare",
                "description": "disallow variable redeclaration",
                "category": "Best Practices",
                "recommended": true,
                "ts": {
                    "severity": "off"
                }
            },
            "no-array-constructor": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "preferLiteral": "The array literal notation [] is preferable."
                },
                "url": "https://eslint.org/docs/rules/no-array-constructor",
                "description": "disallow `Array` constructors",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "no-empty-function": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allow": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "functions",
                                        "arrowFunctions",
                                        "generatorFunctions",
                                        "methods",
                                        "generatorMethods",
                                        "getters",
                                        "setters",
                                        "constructors",
                                        "asyncFunctions",
                                        "asyncMethods"
                                    ]
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpected": "Unexpected empty {{name}}."
                },
                "url": "https://eslint.org/docs/rules/no-empty-function",
                "description": "disallow empty functions",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "constructor-super": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "missingSome": "Lacked a call of 'super()' in some code paths.",
                    "missingAll": "Expected to call 'super()'.",
                    "duplicate": "Unexpected duplicate 'super()'.",
                    "badSuper": "Unexpected 'super()' because 'super' is not a constructor.",
                    "unexpected": "Unexpected 'super()'."
                },
                "url": "https://eslint.org/docs/rules/constructor-super",
                "description": "require `super()` calls in constructors",
                "category": "ECMAScript 6",
                "recommended": true,
                "ts": {
                    "severity": "off"
                }
            },
            "getter-return": {
                "type": "problem",
                "fixable": null,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowImplicit": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "expected": "Expected to return a value in {{name}}.",
                    "expectedAlways": "Expected {{name}} to always return a value."
                },
                "url": "https://eslint.org/docs/rules/getter-return",
                "description": "enforce `return` statements in getters",
                "category": "Possible Errors",
                "recommended": true,
                "ts": {
                    "severity": "off"
                }
            },
            "no-const-assign": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "const": "'{{name}}' is constant."
                },
                "url": "https://eslint.org/docs/rules/no-const-assign",
                "description": "disallow reassigning `const` variables",
                "category": "ECMAScript 6",
                "recommended": true,
                "ts": {
                    "severity": "off"
                }
            },
            "no-dupe-args": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "unexpected": "Duplicate param '{{name}}'."
                },
                "url": "https://eslint.org/docs/rules/no-dupe-args",
                "description": "disallow duplicate arguments in `function` definitions",
                "category": "Possible Errors",
                "recommended": true,
                "ts": {
                    "severity": "off"
                }
            },
            "no-dupe-class-members": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "unexpected": "Duplicate name '{{name}}'."
                },
                "url": "https://eslint.org/docs/rules/no-dupe-class-members",
                "description": "disallow duplicate class members",
                "category": "ECMAScript 6",
                "recommended": true,
                "ts": {
                    "severity": "off"
                }
            },
            "no-dupe-keys": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "unexpected": "Duplicate key '{{name}}'."
                },
                "url": "https://eslint.org/docs/rules/no-dupe-keys",
                "description": "disallow duplicate keys in object literals",
                "category": "Possible Errors",
                "recommended": true,
                "ts": {
                    "severity": "off"
                }
            },
            "no-func-assign": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "isAFunction": "'{{name}}' is a function."
                },
                "url": "https://eslint.org/docs/rules/no-func-assign",
                "description": "disallow reassigning `function` declarations",
                "category": "Possible Errors",
                "recommended": true,
                "ts": {
                    "severity": "off"
                }
            },
            "no-import-assign": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "readonly": "'{{name}}' is read-only.",
                    "readonlyMember": "The members of '{{name}}' are read-only."
                },
                "url": "https://eslint.org/docs/rules/no-import-assign",
                "description": "disallow assigning to imported bindings",
                "category": "Possible Errors",
                "recommended": true,
                "ts": {
                    "severity": "off"
                }
            },
            "no-new-symbol": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "noNewSymbol": "`Symbol` cannot be called as a constructor."
                },
                "url": "https://eslint.org/docs/rules/no-new-symbol",
                "description": "disallow `new` operators with the `Symbol` object",
                "category": "ECMAScript 6",
                "recommended": true,
                "ts": {
                    "severity": "off"
                }
            },
            "no-obj-calls": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "unexpectedCall": "'{{name}}' is not a function.",
                    "unexpectedRefCall": "'{{name}}' is reference to '{{ref}}', which is not a function."
                },
                "url": "https://eslint.org/docs/rules/no-obj-calls",
                "description": "disallow calling global object properties as functions",
                "category": "Possible Errors",
                "recommended": true,
                "ts": {
                    "severity": "off"
                }
            },
            "no-setter-return": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "returnsValue": "Setter cannot return a value."
                },
                "url": "https://eslint.org/docs/rules/no-setter-return",
                "description": "disallow returning values from setters",
                "category": "Possible Errors",
                "recommended": true,
                "ts": {
                    "severity": "off"
                }
            },
            "no-this-before-super": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "noBeforeSuper": "'{{kind}}' is not allowed before 'super()'."
                },
                "url": "https://eslint.org/docs/rules/no-this-before-super",
                "description": "disallow `this`/`super` before calling `super()` in constructors",
                "category": "ECMAScript 6",
                "recommended": true,
                "ts": {
                    "severity": "off"
                }
            },
            "no-undef": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "typeof": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "undef": "'{{name}}' is not defined."
                },
                "url": "https://eslint.org/docs/rules/no-undef",
                "description": "disallow the use of undeclared variables unless mentioned in `/*global */` comments",
                "category": "Variables",
                "recommended": true,
                "ts": {
                    "severity": "off"
                }
            },
            "no-unreachable": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "unreachableCode": "Unreachable code."
                },
                "url": "https://eslint.org/docs/rules/no-unreachable",
                "description": "disallow unreachable code after `return`, `throw`, `continue`, and `break` statements",
                "category": "Possible Errors",
                "recommended": true,
                "ts": {
                    "severity": "off"
                }
            },
            "no-unsafe-negation": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "enforceForOrderingRelations": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": null,
                "messages": {
                    "unexpected": "Unexpected negating the left operand of '{{operator}}' operator.",
                    "suggestNegatedExpression": "Negate '{{operator}}' expression instead of its left operand. This changes the current behavior.",
                    "suggestParenthesisedNegation": "Wrap negation in '()' to make the intention explicit. This preserves the current behavior."
                },
                "url": "https://eslint.org/docs/rules/no-unsafe-negation",
                "description": "disallow negating the left operand of relational operators",
                "category": "Possible Errors",
                "recommended": true,
                "suggestion": true,
                "ts": {
                    "severity": "off"
                }
            },
            "prefer-rest-params": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "preferRestParams": "Use the rest parameters instead of 'arguments'."
                },
                "url": "https://eslint.org/docs/rules/prefer-rest-params",
                "description": "require rest parameters instead of `arguments`",
                "category": "ECMAScript 6",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "valid-typeof": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "requireStringLiterals": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "invalidValue": "Invalid typeof comparison value.",
                    "notString": "Typeof comparisons should be to string literals."
                },
                "url": "https://eslint.org/docs/rules/valid-typeof",
                "description": "enforce comparing `typeof` expressions against valid strings",
                "category": "Possible Errors",
                "recommended": true,
                "ts": {
                    "severity": "off"
                }
            },
            "camelcase": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "ignoreDestructuring": {
                                "type": "boolean",
                                "default": false
                            },
                            "ignoreImports": {
                                "type": "boolean",
                                "default": false
                            },
                            "ignoreGlobals": {
                                "type": "boolean",
                                "default": false
                            },
                            "properties": {
                                "enum": ["always", "never"]
                            },
                            "allow": {
                                "type": "array",
                                "items": [
                                    {
                                        "type": "string"
                                    }
                                ],
                                "minItems": 0,
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "notCamelCase": "Identifier '{{name}}' is not in camel case."
                },
                "url": "https://eslint.org/docs/rules/camelcase",
                "description": "enforce camelcase naming convention",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "default-param-last": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "shouldBeLast": "Default parameters should be last."
                },
                "url": "https://eslint.org/docs/rules/default-param-last",
                "description": "enforce default parameters to be last",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "lines-between-class-members": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": ["always", "never"]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "exceptAfterSingleLine": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "never": "Unexpected blank line between class members.",
                    "always": "Expected blank line between class members."
                },
                "url": "https://eslint.org/docs/rules/lines-between-class-members",
                "description": "require or disallow an empty line between class members",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "no-implied-eval": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "impliedEval": "Implied eval. Consider passing a function instead of a string."
                },
                "url": "https://eslint.org/docs/rules/no-implied-eval",
                "description": "disallow the use of `eval()`-like methods",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "no-loss-of-precision": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "noLossOfPrecision": "This number literal will lose precision at runtime."
                },
                "url": "https://eslint.org/docs/rules/no-loss-of-precision",
                "description": "disallow literal numbers that lose precision",
                "category": "Possible Errors",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "no-loop-func": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "unsafeRefs": "Function declared in a loop contains unsafe references to variable(s) {{ varNames }}."
                },
                "url": "https://eslint.org/docs/rules/no-loop-func",
                "description": "disallow function declarations that contain unsafe references inside loop statements",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "no-unused-expressions": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowShortCircuit": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowTernary": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowTaggedTemplates": {
                                "type": "boolean",
                                "default": false
                            },
                            "enforceForJSX": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unusedExpression": "Expected an assignment or function call and instead saw an expression."
                },
                "url": "https://eslint.org/docs/rules/no-unused-expressions",
                "description": "disallow unused expressions",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "no-use-before-define": {
                "type": "problem",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": ["nofunc"]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "functions": {
                                        "type": "boolean"
                                    },
                                    "classes": {
                                        "type": "boolean"
                                    },
                                    "variables": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "usedBeforeDefined": "'{{name}}' was used before it was defined."
                },
                "url": "https://eslint.org/docs/rules/no-use-before-define",
                "description": "disallow the use of variables before they are defined",
                "category": "Variables",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "require-await": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "missingAwait": "{{name}} has no 'await' expression."
                },
                "url": "https://eslint.org/docs/rules/require-await",
                "description": "disallow async functions which have no `await` expression",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "sort-keys": {
                "type": "suggestion",
                "schema": [
                    {
                        "enum": ["asc", "desc"]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "caseSensitive": {
                                "type": "boolean",
                                "default": true
                            },
                            "natural": {
                                "type": "boolean",
                                "default": false
                            },
                            "minKeys": {
                                "type": "integer",
                                "minimum": 2,
                                "default": 2
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "sortKeys": "Expected object keys to be in {{natural}}{{insensitive}}{{order}}ending order. '{{thisName}}' should be before '{{prevName}}'."
                },
                "url": "https://eslint.org/docs/rules/sort-keys",
                "description": "require object keys to be sorted",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "complexity": {
                "type": "suggestion",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "type": "integer",
                                "minimum": 0
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "maximum": {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "max": {
                                        "type": "integer",
                                        "minimum": 0
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "complex": "{{name}} has a complexity of {{complexity}}. Maximum allowed is {{max}}."
                },
                "url": "https://eslint.org/docs/rules/complexity",
                "description": "enforce a maximum cyclomatic complexity allowed in a program",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "eqeqeq": {
                "type": "suggestion",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": ["always"]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "null": {
                                            "enum": [
                                                "always",
                                                "never",
                                                "ignore"
                                            ]
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "additionalItems": false
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": ["smart", "allow-null"]
                                }
                            ],
                            "additionalItems": false
                        }
                    ]
                },
                "fixable": "code",
                "messages": {
                    "unexpected": "Expected '{{expectedOperator}}' and instead saw '{{actualOperator}}'."
                },
                "url": "https://eslint.org/docs/rules/eqeqeq",
                "description": "require the use of `===` and `!==`",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "error",
                    "options": "smart"
                }
            },
            "guard-for-in": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "wrap": "The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype."
                },
                "url": "https://eslint.org/docs/rules/guard-for-in",
                "description": "require `for-in` loops to include an `if` statement",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "max-classes-per-file": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "integer",
                        "minimum": 1
                    }
                ],
                "messages": {
                    "maximumExceeded": "File has too many classes ({{ classCount }}). Maximum allowed is {{ max }}."
                },
                "url": "https://eslint.org/docs/rules/max-classes-per-file",
                "description": "enforce a maximum number of classes per file",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "no-bitwise": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allow": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "^",
                                        "|",
                                        "&",
                                        "<<",
                                        ">>",
                                        ">>>",
                                        "^=",
                                        "|=",
                                        "&=",
                                        "<<=",
                                        ">>=",
                                        ">>>=",
                                        "~"
                                    ]
                                },
                                "uniqueItems": true
                            },
                            "int32Hint": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpected": "Unexpected use of '{{operator}}'."
                },
                "url": "https://eslint.org/docs/rules/no-bitwise",
                "description": "disallow bitwise operators",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-caller": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "unexpected": "Avoid arguments.{{prop}}."
                },
                "url": "https://eslint.org/docs/rules/no-caller",
                "description": "disallow the use of `arguments.caller` or `arguments.callee`",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-cond-assign": {
                "type": "problem",
                "schema": [
                    {
                        "enum": ["except-parens", "always"]
                    }
                ],
                "messages": {
                    "unexpected": "Unexpected assignment within {{type}}.",
                    "missing": "Expected a conditional expression and instead saw an assignment."
                },
                "url": "https://eslint.org/docs/rules/no-cond-assign",
                "description": "disallow assignment operators in conditional expressions",
                "category": "Possible Errors",
                "recommended": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-console": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allow": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "minItems": 1,
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpected": "Unexpected console statement."
                },
                "url": "https://eslint.org/docs/rules/no-console",
                "description": "disallow the use of `console`",
                "category": "Possible Errors",
                "recommended": false,
                "ts": {
                    "severity": "error",
                    "options": {
                        "allow": [
                            "log",
                            "warn",
                            "dir",
                            "timeLog",
                            "assert",
                            "clear",
                            "count",
                            "countReset",
                            "group",
                            "groupEnd",
                            "table",
                            "dirxml",
                            "error",
                            "groupCollapsed",
                            "Console",
                            "profile",
                            "profileEnd",
                            "timeStamp",
                            "context"
                        ]
                    }
                }
            },
            "no-debugger": {
                "type": "problem",
                "fixable": null,
                "schema": [],
                "messages": {
                    "unexpected": "Unexpected 'debugger' statement."
                },
                "url": "https://eslint.org/docs/rules/no-debugger",
                "description": "disallow the use of `debugger`",
                "category": "Possible Errors",
                "recommended": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-empty": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowEmptyCatch": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpected": "Empty {{type}} statement."
                },
                "url": "https://eslint.org/docs/rules/no-empty",
                "description": "disallow empty block statements",
                "category": "Possible Errors",
                "recommended": true,
                "ts": {
                    "severity": "off"
                }
            },
            "no-eval": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowIndirect": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpected": "eval can be harmful."
                },
                "url": "https://eslint.org/docs/rules/no-eval",
                "description": "disallow the use of `eval()`",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-fallthrough": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commentPattern": {
                                "type": "string",
                                "default": ""
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "case": "Expected a 'break' statement before 'case'.",
                    "default": "Expected a 'break' statement before 'default'."
                },
                "url": "https://eslint.org/docs/rules/no-fallthrough",
                "description": "disallow fallthrough of `case` statements",
                "category": "Best Practices",
                "recommended": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-new-wrappers": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "noConstructor": "Do not use {{fn}} as a constructor."
                },
                "url": "https://eslint.org/docs/rules/no-new-wrappers",
                "description": "disallow `new` operators with the `String`, `Number`, and `Boolean` objects",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-restricted-imports": {
                "type": "suggestion",
                "messages": {
                    "path": "'{{importSource}}' import is restricted from being used.",
                    "pathWithCustomMessage": "'{{importSource}}' import is restricted from being used. {{customMessage}}",
                    "patterns": "'{{importSource}}' import is restricted from being used by a pattern.",
                    "patternWithCustomMessage": "'{{importSource}}' import is restricted from being used by a pattern. {{customMessage}}",
                    "everything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted.",
                    "everythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted. {{customMessage}}",
                    "importName": "'{{importName}}' import from '{{importSource}}' is restricted.",
                    "importNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted. {{customMessage}}"
                },
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string"
                                            },
                                            "message": {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            "importNames": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "additionalProperties": false,
                                        "required": ["name"]
                                    }
                                ]
                            },
                            "uniqueItems": true
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "type": "object",
                                    "properties": {
                                        "paths": {
                                            "type": "array",
                                            "items": {
                                                "anyOf": [
                                                    {
                                                        "type": "string"
                                                    },
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "name": {
                                                                "type": "string"
                                                            },
                                                            "message": {
                                                                "type": "string",
                                                                "minLength": 1
                                                            },
                                                            "importNames": {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "string"
                                                                }
                                                            }
                                                        },
                                                        "additionalProperties": false,
                                                        "required": ["name"]
                                                    }
                                                ]
                                            },
                                            "uniqueItems": true
                                        },
                                        "patterns": {
                                            "anyOf": [
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "uniqueItems": true
                                                },
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "group": {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "minItems": 1,
                                                                "uniqueItems": true
                                                            },
                                                            "message": {
                                                                "type": "string",
                                                                "minLength": 1
                                                            }
                                                        },
                                                        "additionalProperties": false,
                                                        "required": ["group"]
                                                    },
                                                    "uniqueItems": true
                                                }
                                            ]
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "additionalItems": false
                        }
                    ]
                },
                "url": "https://eslint.org/docs/rules/no-restricted-imports",
                "description": "disallow specified modules when loaded by `import`",
                "category": "ECMAScript 6",
                "recommended": false,
                "ts": {
                    "severity": "error",
                    "options": {
                        "name": "rxjs/Rx",
                        "message": "Please import directly from 'rxjs' instead"
                    }
                }
            },
            "no-undef-init": {
                "type": "suggestion",
                "schema": [],
                "fixable": "code",
                "messages": {
                    "unnecessaryUndefinedInit": "It's not necessary to initialize '{{name}}' to undefined."
                },
                "url": "https://eslint.org/docs/rules/no-undef-init",
                "description": "disallow initializing variables to `undefined`",
                "category": "Variables",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-unsafe-finally": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "unsafeUsage": "Unsafe usage of {{nodeType}}."
                },
                "url": "https://eslint.org/docs/rules/no-unsafe-finally",
                "description": "disallow control flow statements in `finally` blocks",
                "category": "Possible Errors",
                "recommended": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-unused-labels": {
                "type": "suggestion",
                "schema": [],
                "fixable": "code",
                "messages": {
                    "unused": "'{{name}}:' is defined but never used."
                },
                "url": "https://eslint.org/docs/rules/no-unused-labels",
                "description": "disallow unused labels",
                "category": "Best Practices",
                "recommended": true,
                "ts": {
                    "severity": "error"
                }
            },
            "object-shorthand": {
                "type": "suggestion",
                "fixable": "code",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "always",
                                        "methods",
                                        "properties",
                                        "never",
                                        "consistent",
                                        "consistent-as-needed"
                                    ]
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 1
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "always",
                                        "methods",
                                        "properties"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "avoidQuotes": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": ["always", "methods"]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "ignoreConstructors": {
                                            "type": "boolean"
                                        },
                                        "avoidQuotes": {
                                            "type": "boolean"
                                        },
                                        "avoidExplicitReturnArrows": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "messages": {
                    "expectedAllPropertiesShorthanded": "Expected shorthand for all properties.",
                    "expectedLiteralMethodLongform": "Expected longform method syntax for string literal keys.",
                    "expectedPropertyShorthand": "Expected property shorthand.",
                    "expectedPropertyLongform": "Expected longform property syntax.",
                    "expectedMethodShorthand": "Expected method shorthand.",
                    "expectedMethodLongform": "Expected longform method syntax.",
                    "unexpectedMix": "Unexpected mix of shorthand and non-shorthand properties."
                },
                "url": "https://eslint.org/docs/rules/object-shorthand",
                "description": "require or disallow method and property shorthand syntax for object literals",
                "category": "ECMAScript 6",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "one-var": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": [
                                    "always",
                                    "never",
                                    "consecutive"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "separateRequires": {
                                        "type": "boolean"
                                    },
                                    "var": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "consecutive"
                                        ]
                                    },
                                    "let": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "consecutive"
                                        ]
                                    },
                                    "const": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "consecutive"
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "initialized": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "consecutive"
                                        ]
                                    },
                                    "uninitialized": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "consecutive"
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "combineUninitialized": "Combine this with the previous '{{type}}' statement with uninitialized variables.",
                    "combineInitialized": "Combine this with the previous '{{type}}' statement with initialized variables.",
                    "splitUninitialized": "Split uninitialized '{{type}}' declarations into multiple statements.",
                    "splitInitialized": "Split initialized '{{type}}' declarations into multiple statements.",
                    "splitRequires": "Split requires to be separated into a single block.",
                    "combine": "Combine this with the previous '{{type}}' statement.",
                    "split": "Split '{{type}}' declarations into multiple statements."
                },
                "url": "https://eslint.org/docs/rules/one-var",
                "description": "enforce variables to be declared either together or separately in functions",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "error",
                    "options": "never"
                }
            },
            "radix": {
                "type": "suggestion",
                "schema": [
                    {
                        "enum": ["always", "as-needed"]
                    }
                ],
                "messages": {
                    "missingParameters": "Missing parameters.",
                    "redundantRadix": "Redundant radix parameter.",
                    "missingRadix": "Missing radix parameter.",
                    "invalidRadix": "Invalid radix parameter, must be an integer between 2 and 36.",
                    "addRadixParameter10": "Add radix parameter `10` for parsing decimal numbers."
                },
                "url": "https://eslint.org/docs/rules/radix",
                "description": "enforce the consistent use of the radix argument when using `parseInt()`",
                "category": "Best Practices",
                "recommended": false,
                "suggestion": true,
                "ts": {
                    "severity": "error"
                }
            },
            "use-isnan": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "enforceForSwitchCase": {
                                "type": "boolean",
                                "default": true
                            },
                            "enforceForIndexOf": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "comparisonWithNaN": "Use the isNaN function to compare with NaN.",
                    "switchNaN": "'switch(NaN)' can never match a case clause. Use Number.isNaN instead of the switch.",
                    "caseNaN": "'case NaN' can never match. Use Number.isNaN before the switch.",
                    "indexOfNaN": "Array prototype method '{{ methodName }}' cannot find NaN."
                },
                "url": "https://eslint.org/docs/rules/use-isnan",
                "description": "require calls to `isNaN()` when checking for `NaN`",
                "category": "Possible Errors",
                "recommended": true,
                "ts": {
                    "severity": "error"
                }
            }
        }
    },
    "@typescript-eslint/eslint-plugin": {
        "fields": [
            "type",
            "fixable",
            "description",
            "category",
            "recommended",
            "extendsBaseRule",
            "requiresTypeChecking",
            "suggestion"
        ],
        "rules": {
            "quotes": {
                "type": "layout",
                "fixable": "code",
                "messages": {
                    "wrongQuotes": "Strings must use {{description}}."
                },
                "schema": [
                    {
                        "enum": [
                            "single",
                            "double",
                            "backtick"
                        ]
                    },
                    {
                        "anyOf": [
                            {
                                "enum": ["avoid-escape"]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "avoidEscape": {
                                        "type": "boolean"
                                    },
                                    "allowTemplateLiterals": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/quotes.md",
                "description": "Enforce the consistent use of either backticks, double, or single quotes",
                "category": "Stylistic Issues",
                "recommended": false,
                "extendsBaseRule": true,
                "html": {
                    "severity": 0
                },
                "js": {
                    "severity": 0
                },
                "ts": {
                    "severity": "error"
                }
            },
            "brace-style": {
                "type": "layout",
                "messages": {
                    "nextLineOpen": "Opening curly brace does not appear on the same line as controlling statement.",
                    "sameLineOpen": "Opening curly brace appears on the same line as controlling statement.",
                    "blockSameLine": "Statement inside of curly braces should be on next line.",
                    "nextLineClose": "Closing curly brace does not appear on the same line as the subsequent block.",
                    "singleLineClose": "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
                    "sameLineClose": "Closing curly brace appears on the same line as the subsequent block."
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "1tbs",
                            "stroustrup",
                            "allman"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "allowSingleLine": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/brace-style.md",
                "description": "Enforce consistent brace style for blocks",
                "category": "Stylistic Issues",
                "recommended": false,
                "extendsBaseRule": true,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "comma-dangle": {
                "type": "layout",
                "schema": {
                    "definitions": {
                        "value": {
                            "enum": [
                                "always-multiline",
                                "always",
                                "never",
                                "only-multiline"
                            ]
                        },
                        "valueWithIgnore": {
                            "enum": [
                                "always-multiline",
                                "always",
                                "never",
                                "only-multiline",
                                "ignore"
                            ]
                        }
                    },
                    "type": "array",
                    "items": [
                        {
                            "oneOf": [
                                {
                                    "$ref": "#/definitions/value"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "arrays": {
                                            "$ref": "#/definitions/valueWithIgnore"
                                        },
                                        "objects": {
                                            "$ref": "#/definitions/valueWithIgnore"
                                        },
                                        "imports": {
                                            "$ref": "#/definitions/valueWithIgnore"
                                        },
                                        "exports": {
                                            "$ref": "#/definitions/valueWithIgnore"
                                        },
                                        "functions": {
                                            "$ref": "#/definitions/valueWithIgnore"
                                        },
                                        "enums": {
                                            "$ref": "#/definitions/valueWithIgnore"
                                        },
                                        "generics": {
                                            "$ref": "#/definitions/valueWithIgnore"
                                        },
                                        "tuples": {
                                            "$ref": "#/definitions/valueWithIgnore"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        }
                    ]
                },
                "fixable": "code",
                "messages": {
                    "unexpected": "Unexpected trailing comma.",
                    "missing": "Missing trailing comma."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/comma-dangle.md",
                "description": "Require or disallow trailing comma",
                "category": "Stylistic Issues",
                "recommended": false,
                "extendsBaseRule": true,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "error",
                    "options": {
                        "arrays": "always-multiline",
                        "objects": "always-multiline",
                        "imports": "always-multiline",
                        "exports": "always-multiline",
                        "functions": "always-multiline",
                        "enums": "always-multiline",
                        "generics": "always-multiline",
                        "tuples": "always-multiline"
                    }
                }
            },
            "comma-spacing": {
                "type": "suggestion",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "before": {
                                "type": "boolean",
                                "default": false
                            },
                            "after": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpected": "There should be no space {{loc}} ','.",
                    "missing": "A space is required {{loc}} ','."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/comma-spacing.md",
                "description": "Enforces consistent spacing before and after commas",
                "category": "Stylistic Issues",
                "recommended": false,
                "extendsBaseRule": true,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "error",
                    "options": {
                        "before": false,
                        "after": true
                    }
                }
            },
            "func-call-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": ["never"]
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 1
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": ["always"]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "allowNewlines": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "messages": {
                    "unexpectedWhitespace": "Unexpected whitespace between function name and paren.",
                    "unexpectedNewline": "Unexpected newline between function name and paren.",
                    "missing": "Missing space between function name and paren."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/func-call-spacing.md",
                "description": "Require or disallow spacing between function identifiers and their invocations",
                "category": "Stylistic Issues",
                "recommended": false,
                "extendsBaseRule": true,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "error",
                    "options": "never"
                }
            },
            "indent": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": ["tab"]
                            },
                            {
                                "type": "integer",
                                "minimum": 0
                            }
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "SwitchCase": {
                                "type": "integer",
                                "minimum": 0,
                                "default": 0
                            },
                            "VariableDeclarator": {
                                "oneOf": [
                                    {
                                        "oneOf": [
                                            {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            {
                                                "enum": ["first", "off"]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "var": {
                                                "oneOf": [
                                                    {
                                                        "type": "integer",
                                                        "minimum": 0
                                                    },
                                                    {
                                                        "enum": ["first", "off"]
                                                    }
                                                ]
                                            },
                                            "let": {
                                                "oneOf": [
                                                    {
                                                        "type": "integer",
                                                        "minimum": 0
                                                    },
                                                    {
                                                        "enum": ["first", "off"]
                                                    }
                                                ]
                                            },
                                            "const": {
                                                "oneOf": [
                                                    {
                                                        "type": "integer",
                                                        "minimum": 0
                                                    },
                                                    {
                                                        "enum": ["first", "off"]
                                                    }
                                                ]
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                ]
                            },
                            "outerIIFEBody": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    {
                                        "enum": ["off"]
                                    }
                                ]
                            },
                            "MemberExpression": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    {
                                        "enum": ["off"]
                                    }
                                ]
                            },
                            "FunctionDeclaration": {
                                "type": "object",
                                "properties": {
                                    "parameters": {
                                        "oneOf": [
                                            {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            {
                                                "enum": ["first", "off"]
                                            }
                                        ]
                                    },
                                    "body": {
                                        "type": "integer",
                                        "minimum": 0
                                    }
                                },
                                "additionalProperties": false
                            },
                            "FunctionExpression": {
                                "type": "object",
                                "properties": {
                                    "parameters": {
                                        "oneOf": [
                                            {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            {
                                                "enum": ["first", "off"]
                                            }
                                        ]
                                    },
                                    "body": {
                                        "type": "integer",
                                        "minimum": 0
                                    }
                                },
                                "additionalProperties": false
                            },
                            "CallExpression": {
                                "type": "object",
                                "properties": {
                                    "arguments": {
                                        "oneOf": [
                                            {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            {
                                                "enum": ["first", "off"]
                                            }
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            },
                            "ArrayExpression": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    {
                                        "enum": ["first", "off"]
                                    }
                                ]
                            },
                            "ObjectExpression": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    {
                                        "enum": ["first", "off"]
                                    }
                                ]
                            },
                            "ImportDeclaration": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    {
                                        "enum": ["first", "off"]
                                    }
                                ]
                            },
                            "flatTernaryExpressions": {
                                "type": "boolean",
                                "default": false
                            },
                            "offsetTernaryExpressions": {
                                "type": "boolean",
                                "default": false
                            },
                            "ignoredNodes": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "not": {
                                        "pattern": ":exit$"
                                    }
                                }
                            },
                            "ignoreComments": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/indent.md",
                "description": "Enforce consistent indentation",
                "category": "Stylistic Issues",
                "recommended": false,
                "extendsBaseRule": true,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "keyword-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "before": {
                                "type": "boolean",
                                "default": true
                            },
                            "after": {
                                "type": "boolean",
                                "default": true
                            },
                            "overrides": {
                                "type": "object",
                                "properties": {
                                    "abstract": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "as": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "async": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "await": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "boolean": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "break": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "byte": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "case": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "catch": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "char": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "class": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "const": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "continue": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "debugger": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "default": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "delete": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "do": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "double": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "else": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "enum": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "export": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "extends": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "false": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "final": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "finally": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "float": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "for": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "from": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "function": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "get": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "goto": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "if": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "implements": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "import": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "in": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "instanceof": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "int": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "interface": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "let": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "long": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "native": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "new": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "null": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "of": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "package": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "private": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "protected": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "public": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "return": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "set": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "short": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "static": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "super": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "switch": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "synchronized": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "this": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "throw": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "throws": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "transient": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "true": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "try": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "typeof": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "var": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "void": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "volatile": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "while": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "with": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "yield": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "expectedBefore": "Expected space(s) before \"{{value}}\".",
                    "expectedAfter": "Expected space(s) after \"{{value}}\".",
                    "unexpectedBefore": "Unexpected space(s) before \"{{value}}\".",
                    "unexpectedAfter": "Unexpected space(s) after \"{{value}}\"."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/keyword-spacing.md",
                "description": "Enforce consistent spacing before and after keywords",
                "category": "Stylistic Issues",
                "recommended": false,
                "extendsBaseRule": true,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "error",
                    "options": {
                        "before": true,
                        "after": true,
                        "overrides": {
                            "return": {
                                "after": true
                            },
                            "throw": {
                                "after": true
                            },
                            "case": {
                                "after": true
                            }
                        }
                    }
                }
            },
            "member-delimiter-style": {
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "unexpectedComma": "Unexpected separator (,).",
                    "unexpectedSemi": "Unexpected separator (;).",
                    "expectedComma": "Expected a comma.",
                    "expectedSemi": "Expected a semicolon."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "multiline": {
                                "type": "object",
                                "properties": {
                                    "delimiter": {
                                        "enum": [
                                            "none",
                                            "semi",
                                            "comma"
                                        ]
                                    },
                                    "requireLast": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            },
                            "singleline": {
                                "type": "object",
                                "properties": {
                                    "delimiter": {
                                        "enum": ["semi", "comma"]
                                    },
                                    "requireLast": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            },
                            "overrides": {
                                "type": "object",
                                "properties": {
                                    "interface": {
                                        "type": "object",
                                        "properties": {
                                            "multiline": {
                                                "type": "object",
                                                "properties": {
                                                    "delimiter": {
                                                        "enum": [
                                                            "none",
                                                            "semi",
                                                            "comma"
                                                        ]
                                                    },
                                                    "requireLast": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "singleline": {
                                                "type": "object",
                                                "properties": {
                                                    "delimiter": {
                                                        "enum": ["semi", "comma"]
                                                    },
                                                    "requireLast": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "typeLiteral": {
                                        "type": "object",
                                        "properties": {
                                            "multiline": {
                                                "type": "object",
                                                "properties": {
                                                    "delimiter": {
                                                        "enum": [
                                                            "none",
                                                            "semi",
                                                            "comma"
                                                        ]
                                                    },
                                                    "requireLast": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "singleline": {
                                                "type": "object",
                                                "properties": {
                                                    "delimiter": {
                                                        "enum": ["semi", "comma"]
                                                    },
                                                    "requireLast": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            },
                            "multilineDetection": {
                                "enum": ["brackets", "last-member"]
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/member-delimiter-style.md",
                "description": "Require a specific member delimiter style for interfaces and type literals",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "error",
                    "options": {
                        "multiline": {
                            "delimiter": "semi",
                            "requireLast": true
                        },
                        "singleline": {
                            "delimiter": "semi",
                            "requireLast": false
                        }
                    }
                }
            },
            "no-extra-parens": {
                "type": "layout",
                "fixable": "code",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": ["functions"]
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 1
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": ["all"]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "conditionalAssign": {
                                            "type": "boolean"
                                        },
                                        "nestedBinaryExpressions": {
                                            "type": "boolean"
                                        },
                                        "returnAssign": {
                                            "type": "boolean"
                                        },
                                        "ignoreJSX": {
                                            "enum": [
                                                "none",
                                                "all",
                                                "single-line",
                                                "multi-line"
                                            ]
                                        },
                                        "enforceForArrowConditionals": {
                                            "type": "boolean"
                                        },
                                        "enforceForSequenceExpressions": {
                                            "type": "boolean"
                                        },
                                        "enforceForNewInMemberExpressions": {
                                            "type": "boolean"
                                        },
                                        "enforceForFunctionPrototypeMethods": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "messages": {
                    "unexpected": "Unnecessary parentheses around expression."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-extra-parens.md",
                "description": "Disallow unnecessary parentheses",
                "category": "Possible Errors",
                "recommended": false,
                "extendsBaseRule": true,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "no-extra-semi": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [],
                "messages": {
                    "unexpected": "Unnecessary semicolon."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-extra-semi.md",
                "description": "Disallow unnecessary semicolons",
                "category": "Possible Errors",
                "recommended": "error",
                "extendsBaseRule": true,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "object-curly-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": ["always", "never"]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "arraysInObjects": {
                                "type": "boolean"
                            },
                            "objectsInObjects": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "requireSpaceBefore": "A space is required before '{{token}}'.",
                    "requireSpaceAfter": "A space is required after '{{token}}'.",
                    "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                    "unexpectedSpaceAfter": "There should be no space after '{{token}}'."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/object-curly-spacing.md",
                "description": "Enforce consistent spacing inside braces",
                "category": "Stylistic Issues",
                "recommended": false,
                "extendsBaseRule": true,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off",
                    "options": "always"
                }
            },
            "semi": {
                "type": "layout",
                "fixable": "code",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": ["never"]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "beforeStatementContinuationChars": {
                                            "enum": [
                                                "always",
                                                "any",
                                                "never"
                                            ]
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": ["always"]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "omitLastInOneLineBlock": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "messages": {
                    "missingSemi": "Missing semicolon.",
                    "extraSemi": "Extra semicolon."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/semi.md",
                "description": "Require or disallow semicolons instead of ASI",
                "category": "Stylistic Issues",
                "recommended": false,
                "extendsBaseRule": true,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "error",
                    "options": "always"
                }
            },
            "space-before-blocks": {
                "url": "__NOT__DEFINED__",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "space-before-function-paren": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": ["always", "never"]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "anonymous": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "ignore"
                                        ]
                                    },
                                    "named": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "ignore"
                                        ]
                                    },
                                    "asyncArrow": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "ignore"
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "unexpected": "Unexpected space before function parentheses.",
                    "missing": "Missing space before function parentheses."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/space-before-function-paren.md",
                "description": "Enforces consistent spacing before function parenthesis",
                "category": "Stylistic Issues",
                "recommended": false,
                "extendsBaseRule": true,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "error",
                    "options": {
                        "anonymous": "always",
                        "named": "never",
                        "asyncArrow": "always"
                    }
                }
            },
            "space-infix-ops": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "int32Hint": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "missingSpace": "Operator '{{operator}}' must be spaced."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/space-infix-ops.md",
                "description": "This rule is aimed at ensuring there are spaces around infix operators.",
                "category": "Stylistic Issues",
                "recommended": false,
                "extendsBaseRule": true,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "type-annotation-spacing": {
                "type": "layout",
                "fixable": "whitespace",
                "messages": {
                    "expectedSpaceAfter": "Expected a space after the '{{type}}'.",
                    "expectedSpaceBefore": "Expected a space before the '{{type}}'.",
                    "unexpectedSpaceAfter": "Unexpected space after the '{{type}}'.",
                    "unexpectedSpaceBefore": "Unexpected space before the '{{type}}'.",
                    "unexpectedSpaceBetween": "Unexpected space between the '{{previousToken}}' and the '{{type}}'."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "before": {
                                "type": "boolean"
                            },
                            "after": {
                                "type": "boolean"
                            },
                            "overrides": {
                                "type": "object",
                                "properties": {
                                    "colon": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "arrow": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "variable": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "parameter": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "property": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "returnType": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/type-annotation-spacing.md",
                "description": "Require consistent spacing around type annotations",
                "category": "Stylistic Issues",
                "recommended": false,
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "naming-convention": {
                "type": "suggestion",
                "messages": {
                    "unexpectedUnderscore": "{{type}} name `{{name}}` must not have a {{position}} underscore.",
                    "missingUnderscore": "{{type}} name `{{name}}` must have {{count}} {{position}} underscore(s).",
                    "missingAffix": "{{type}} name `{{name}}` must have one of the following {{position}}es: {{affixes}}",
                    "satisfyCustom": "{{type}} name `{{name}}` must {{regexMatch}} the RegExp: {{regex}}",
                    "doesNotMatchFormat": "{{type}} name `{{name}}` must match one of the following formats: {{formats}}",
                    "doesNotMatchFormatTrimmed": "{{type}} name `{{name}}` trimmed as `{{processedName}}` must match one of the following formats: {{formats}}"
                },
                "schema": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "variableLike",
                                                "memberLike",
                                                "typeLike",
                                                "method",
                                                "property",
                                                "variable",
                                                "function",
                                                "parameter",
                                                "parameterProperty",
                                                "accessor",
                                                "enumMember",
                                                "classMethod",
                                                "objectLiteralMethod",
                                                "typeMethod",
                                                "classProperty",
                                                "objectLiteralProperty",
                                                "typeProperty",
                                                "class",
                                                "interface",
                                                "typeAlias",
                                                "enum",
                                                "typeParameter"
                                            ]
                                        },
                                        "additionalItems": false
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "const",
                                                "readonly",
                                                "static",
                                                "public",
                                                "protected",
                                                "private",
                                                "abstract",
                                                "destructured",
                                                "global",
                                                "exported",
                                                "unused",
                                                "requiresQuotes"
                                            ]
                                        },
                                        "additionalItems": false
                                    },
                                    "types": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "boolean",
                                                "string",
                                                "number",
                                                "function",
                                                "array"
                                            ]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["default"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "const",
                                                "readonly",
                                                "static",
                                                "public",
                                                "protected",
                                                "private",
                                                "abstract",
                                                "destructured",
                                                "global",
                                                "exported",
                                                "unused",
                                                "requiresQuotes"
                                            ]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["variableLike"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": ["unused"]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["variable"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "const",
                                                "destructured",
                                                "exported",
                                                "global",
                                                "unused"
                                            ]
                                        },
                                        "additionalItems": false
                                    },
                                    "types": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "boolean",
                                                "string",
                                                "number",
                                                "function",
                                                "array"
                                            ]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["function"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "exported",
                                                "global",
                                                "unused"
                                            ]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["parameter"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": ["destructured", "unused"]
                                        },
                                        "additionalItems": false
                                    },
                                    "types": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "boolean",
                                                "string",
                                                "number",
                                                "function",
                                                "array"
                                            ]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["memberLike"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "abstract",
                                                "private",
                                                "protected",
                                                "public",
                                                "readonly",
                                                "requiresQuotes",
                                                "static"
                                            ]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["classProperty"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "abstract",
                                                "private",
                                                "protected",
                                                "public",
                                                "readonly",
                                                "requiresQuotes",
                                                "static"
                                            ]
                                        },
                                        "additionalItems": false
                                    },
                                    "types": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "boolean",
                                                "string",
                                                "number",
                                                "function",
                                                "array"
                                            ]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["objectLiteralProperty"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": ["public", "requiresQuotes"]
                                        },
                                        "additionalItems": false
                                    },
                                    "types": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "boolean",
                                                "string",
                                                "number",
                                                "function",
                                                "array"
                                            ]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["typeProperty"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "public",
                                                "readonly",
                                                "requiresQuotes"
                                            ]
                                        },
                                        "additionalItems": false
                                    },
                                    "types": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "boolean",
                                                "string",
                                                "number",
                                                "function",
                                                "array"
                                            ]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["parameterProperty"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "private",
                                                "protected",
                                                "public",
                                                "readonly"
                                            ]
                                        },
                                        "additionalItems": false
                                    },
                                    "types": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "boolean",
                                                "string",
                                                "number",
                                                "function",
                                                "array"
                                            ]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["property"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "abstract",
                                                "private",
                                                "protected",
                                                "public",
                                                "readonly",
                                                "requiresQuotes",
                                                "static"
                                            ]
                                        },
                                        "additionalItems": false
                                    },
                                    "types": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "boolean",
                                                "string",
                                                "number",
                                                "function",
                                                "array"
                                            ]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["classMethod"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "abstract",
                                                "private",
                                                "protected",
                                                "public",
                                                "requiresQuotes",
                                                "static"
                                            ]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["objectLiteralMethod"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": ["public", "requiresQuotes"]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["typeMethod"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": ["public", "requiresQuotes"]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["method"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "abstract",
                                                "private",
                                                "protected",
                                                "public",
                                                "requiresQuotes",
                                                "static"
                                            ]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["accessor"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "abstract",
                                                "private",
                                                "protected",
                                                "public",
                                                "requiresQuotes",
                                                "static"
                                            ]
                                        },
                                        "additionalItems": false
                                    },
                                    "types": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "boolean",
                                                "string",
                                                "number",
                                                "function",
                                                "array"
                                            ]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["enumMember"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": ["requiresQuotes"]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["typeLike"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "abstract",
                                                "exported",
                                                "unused"
                                            ]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["class"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "abstract",
                                                "exported",
                                                "unused"
                                            ]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["interface"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": ["exported", "unused"]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["typeAlias"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": ["exported", "unused"]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["enum"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": ["exported", "unused"]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "oneOf": [
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "camelCase",
                                                        "strictCamelCase",
                                                        "PascalCase",
                                                        "StrictPascalCase",
                                                        "snake_case",
                                                        "UPPER_CASE"
                                                    ]
                                                },
                                                "additionalItems": false
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "custom": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "boolean"
                                            },
                                            "regex": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["match", "regex"]
                                    },
                                    "leadingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "trailingUnderscore": {
                                        "type": "string",
                                        "enum": [
                                            "forbid",
                                            "allow",
                                            "require",
                                            "requireDouble",
                                            "allowDouble",
                                            "allowSingleOrDouble"
                                        ]
                                    },
                                    "prefix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "suffix": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        "additionalItems": false
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "match": {
                                                        "type": "boolean"
                                                    },
                                                    "regex": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["match", "regex"]
                                            }
                                        ]
                                    },
                                    "selector": {
                                        "type": "string",
                                        "enum": ["typeParameter"]
                                    },
                                    "modifiers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": ["unused"]
                                        },
                                        "additionalItems": false
                                    }
                                },
                                "required": ["selector", "format"],
                                "additionalProperties": false
                            }
                        ]
                    },
                    "additionalItems": false
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/naming-convention.md",
                "category": "Variables",
                "description": "Enforces naming conventions for everything across a codebase",
                "recommended": false,
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "error"
                }
            },
            "unbound-method": {
                "messages": {
                    "unbound": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.",
                    "unboundWithoutThisAnnotation": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "ignoreStatic": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "type": "problem",
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/unbound-method.md",
                "category": "Best Practices",
                "description": "Enforces unbound methods are called with their expected scope",
                "recommended": "error",
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "error",
                    "options": {
                        "ignoreStatic": true
                    }
                }
            },
            "member-ordering": {
                "type": "suggestion",
                "messages": {
                    "incorrectOrder": "Member \"{{member}}\" should be declared before member \"{{beforeMember}}\".",
                    "incorrectGroupOrder": "Member {{name}} should be declared before all {{rank}} definitions."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "default": {
                                "oneOf": [
                                    {
                                        "type": "string",
                                        "enum": ["never"]
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "enum": [
                                                "signature",
                                                "field",
                                                "public-field",
                                                "public-decorated-field",
                                                "decorated-field",
                                                "static-field",
                                                "public-static-field",
                                                "instance-field",
                                                "public-instance-field",
                                                "abstract-field",
                                                "public-abstract-field",
                                                "protected-field",
                                                "protected-decorated-field",
                                                "protected-static-field",
                                                "protected-instance-field",
                                                "protected-abstract-field",
                                                "private-field",
                                                "private-decorated-field",
                                                "private-static-field",
                                                "private-instance-field",
                                                "private-abstract-field",
                                                "method",
                                                "public-method",
                                                "public-decorated-method",
                                                "decorated-method",
                                                "static-method",
                                                "public-static-method",
                                                "instance-method",
                                                "public-instance-method",
                                                "abstract-method",
                                                "public-abstract-method",
                                                "protected-method",
                                                "protected-decorated-method",
                                                "protected-static-method",
                                                "protected-instance-method",
                                                "protected-abstract-method",
                                                "private-method",
                                                "private-decorated-method",
                                                "private-static-method",
                                                "private-instance-method",
                                                "private-abstract-method",
                                                "call-signature",
                                                "public-call-signature",
                                                "static-call-signature",
                                                "public-static-call-signature",
                                                "instance-call-signature",
                                                "public-instance-call-signature",
                                                "abstract-call-signature",
                                                "public-abstract-call-signature",
                                                "protected-call-signature",
                                                "protected-static-call-signature",
                                                "protected-instance-call-signature",
                                                "protected-abstract-call-signature",
                                                "private-call-signature",
                                                "private-static-call-signature",
                                                "private-instance-call-signature",
                                                "private-abstract-call-signature",
                                                "constructor",
                                                "public-constructor",
                                                "protected-constructor",
                                                "private-constructor"
                                            ]
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "memberTypes": {
                                                "oneOf": [
                                                    {
                                                        "type": "array",
                                                        "items": {
                                                            "enum": [
                                                                "signature",
                                                                "field",
                                                                "public-field",
                                                                "public-decorated-field",
                                                                "decorated-field",
                                                                "static-field",
                                                                "public-static-field",
                                                                "instance-field",
                                                                "public-instance-field",
                                                                "abstract-field",
                                                                "public-abstract-field",
                                                                "protected-field",
                                                                "protected-decorated-field",
                                                                "protected-static-field",
                                                                "protected-instance-field",
                                                                "protected-abstract-field",
                                                                "private-field",
                                                                "private-decorated-field",
                                                                "private-static-field",
                                                                "private-instance-field",
                                                                "private-abstract-field",
                                                                "method",
                                                                "public-method",
                                                                "public-decorated-method",
                                                                "decorated-method",
                                                                "static-method",
                                                                "public-static-method",
                                                                "instance-method",
                                                                "public-instance-method",
                                                                "abstract-method",
                                                                "public-abstract-method",
                                                                "protected-method",
                                                                "protected-decorated-method",
                                                                "protected-static-method",
                                                                "protected-instance-method",
                                                                "protected-abstract-method",
                                                                "private-method",
                                                                "private-decorated-method",
                                                                "private-static-method",
                                                                "private-instance-method",
                                                                "private-abstract-method",
                                                                "call-signature",
                                                                "public-call-signature",
                                                                "static-call-signature",
                                                                "public-static-call-signature",
                                                                "instance-call-signature",
                                                                "public-instance-call-signature",
                                                                "abstract-call-signature",
                                                                "public-abstract-call-signature",
                                                                "protected-call-signature",
                                                                "protected-static-call-signature",
                                                                "protected-instance-call-signature",
                                                                "protected-abstract-call-signature",
                                                                "private-call-signature",
                                                                "private-static-call-signature",
                                                                "private-instance-call-signature",
                                                                "private-abstract-call-signature",
                                                                "constructor",
                                                                "public-constructor",
                                                                "protected-constructor",
                                                                "private-constructor"
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "string",
                                                        "enum": ["never"]
                                                    }
                                                ]
                                            },
                                            "order": {
                                                "type": "string",
                                                "enum": ["alphabetically", "as-written"]
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                ]
                            },
                            "classes": {
                                "oneOf": [
                                    {
                                        "type": "string",
                                        "enum": ["never"]
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "enum": [
                                                "signature",
                                                "field",
                                                "public-field",
                                                "public-decorated-field",
                                                "decorated-field",
                                                "static-field",
                                                "public-static-field",
                                                "instance-field",
                                                "public-instance-field",
                                                "abstract-field",
                                                "public-abstract-field",
                                                "protected-field",
                                                "protected-decorated-field",
                                                "protected-static-field",
                                                "protected-instance-field",
                                                "protected-abstract-field",
                                                "private-field",
                                                "private-decorated-field",
                                                "private-static-field",
                                                "private-instance-field",
                                                "private-abstract-field",
                                                "method",
                                                "public-method",
                                                "public-decorated-method",
                                                "decorated-method",
                                                "static-method",
                                                "public-static-method",
                                                "instance-method",
                                                "public-instance-method",
                                                "abstract-method",
                                                "public-abstract-method",
                                                "protected-method",
                                                "protected-decorated-method",
                                                "protected-static-method",
                                                "protected-instance-method",
                                                "protected-abstract-method",
                                                "private-method",
                                                "private-decorated-method",
                                                "private-static-method",
                                                "private-instance-method",
                                                "private-abstract-method",
                                                "call-signature",
                                                "public-call-signature",
                                                "static-call-signature",
                                                "public-static-call-signature",
                                                "instance-call-signature",
                                                "public-instance-call-signature",
                                                "abstract-call-signature",
                                                "public-abstract-call-signature",
                                                "protected-call-signature",
                                                "protected-static-call-signature",
                                                "protected-instance-call-signature",
                                                "protected-abstract-call-signature",
                                                "private-call-signature",
                                                "private-static-call-signature",
                                                "private-instance-call-signature",
                                                "private-abstract-call-signature",
                                                "constructor",
                                                "public-constructor",
                                                "protected-constructor",
                                                "private-constructor"
                                            ]
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "memberTypes": {
                                                "oneOf": [
                                                    {
                                                        "type": "array",
                                                        "items": {
                                                            "enum": [
                                                                "signature",
                                                                "field",
                                                                "public-field",
                                                                "public-decorated-field",
                                                                "decorated-field",
                                                                "static-field",
                                                                "public-static-field",
                                                                "instance-field",
                                                                "public-instance-field",
                                                                "abstract-field",
                                                                "public-abstract-field",
                                                                "protected-field",
                                                                "protected-decorated-field",
                                                                "protected-static-field",
                                                                "protected-instance-field",
                                                                "protected-abstract-field",
                                                                "private-field",
                                                                "private-decorated-field",
                                                                "private-static-field",
                                                                "private-instance-field",
                                                                "private-abstract-field",
                                                                "method",
                                                                "public-method",
                                                                "public-decorated-method",
                                                                "decorated-method",
                                                                "static-method",
                                                                "public-static-method",
                                                                "instance-method",
                                                                "public-instance-method",
                                                                "abstract-method",
                                                                "public-abstract-method",
                                                                "protected-method",
                                                                "protected-decorated-method",
                                                                "protected-static-method",
                                                                "protected-instance-method",
                                                                "protected-abstract-method",
                                                                "private-method",
                                                                "private-decorated-method",
                                                                "private-static-method",
                                                                "private-instance-method",
                                                                "private-abstract-method",
                                                                "call-signature",
                                                                "public-call-signature",
                                                                "static-call-signature",
                                                                "public-static-call-signature",
                                                                "instance-call-signature",
                                                                "public-instance-call-signature",
                                                                "abstract-call-signature",
                                                                "public-abstract-call-signature",
                                                                "protected-call-signature",
                                                                "protected-static-call-signature",
                                                                "protected-instance-call-signature",
                                                                "protected-abstract-call-signature",
                                                                "private-call-signature",
                                                                "private-static-call-signature",
                                                                "private-instance-call-signature",
                                                                "private-abstract-call-signature",
                                                                "constructor",
                                                                "public-constructor",
                                                                "protected-constructor",
                                                                "private-constructor"
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "string",
                                                        "enum": ["never"]
                                                    }
                                                ]
                                            },
                                            "order": {
                                                "type": "string",
                                                "enum": ["alphabetically", "as-written"]
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                ]
                            },
                            "classExpressions": {
                                "oneOf": [
                                    {
                                        "type": "string",
                                        "enum": ["never"]
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "enum": [
                                                "signature",
                                                "field",
                                                "public-field",
                                                "public-decorated-field",
                                                "decorated-field",
                                                "static-field",
                                                "public-static-field",
                                                "instance-field",
                                                "public-instance-field",
                                                "abstract-field",
                                                "public-abstract-field",
                                                "protected-field",
                                                "protected-decorated-field",
                                                "protected-static-field",
                                                "protected-instance-field",
                                                "protected-abstract-field",
                                                "private-field",
                                                "private-decorated-field",
                                                "private-static-field",
                                                "private-instance-field",
                                                "private-abstract-field",
                                                "method",
                                                "public-method",
                                                "public-decorated-method",
                                                "decorated-method",
                                                "static-method",
                                                "public-static-method",
                                                "instance-method",
                                                "public-instance-method",
                                                "abstract-method",
                                                "public-abstract-method",
                                                "protected-method",
                                                "protected-decorated-method",
                                                "protected-static-method",
                                                "protected-instance-method",
                                                "protected-abstract-method",
                                                "private-method",
                                                "private-decorated-method",
                                                "private-static-method",
                                                "private-instance-method",
                                                "private-abstract-method",
                                                "call-signature",
                                                "public-call-signature",
                                                "static-call-signature",
                                                "public-static-call-signature",
                                                "instance-call-signature",
                                                "public-instance-call-signature",
                                                "abstract-call-signature",
                                                "public-abstract-call-signature",
                                                "protected-call-signature",
                                                "protected-static-call-signature",
                                                "protected-instance-call-signature",
                                                "protected-abstract-call-signature",
                                                "private-call-signature",
                                                "private-static-call-signature",
                                                "private-instance-call-signature",
                                                "private-abstract-call-signature",
                                                "constructor",
                                                "public-constructor",
                                                "protected-constructor",
                                                "private-constructor"
                                            ]
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "memberTypes": {
                                                "oneOf": [
                                                    {
                                                        "type": "array",
                                                        "items": {
                                                            "enum": [
                                                                "signature",
                                                                "field",
                                                                "public-field",
                                                                "public-decorated-field",
                                                                "decorated-field",
                                                                "static-field",
                                                                "public-static-field",
                                                                "instance-field",
                                                                "public-instance-field",
                                                                "abstract-field",
                                                                "public-abstract-field",
                                                                "protected-field",
                                                                "protected-decorated-field",
                                                                "protected-static-field",
                                                                "protected-instance-field",
                                                                "protected-abstract-field",
                                                                "private-field",
                                                                "private-decorated-field",
                                                                "private-static-field",
                                                                "private-instance-field",
                                                                "private-abstract-field",
                                                                "method",
                                                                "public-method",
                                                                "public-decorated-method",
                                                                "decorated-method",
                                                                "static-method",
                                                                "public-static-method",
                                                                "instance-method",
                                                                "public-instance-method",
                                                                "abstract-method",
                                                                "public-abstract-method",
                                                                "protected-method",
                                                                "protected-decorated-method",
                                                                "protected-static-method",
                                                                "protected-instance-method",
                                                                "protected-abstract-method",
                                                                "private-method",
                                                                "private-decorated-method",
                                                                "private-static-method",
                                                                "private-instance-method",
                                                                "private-abstract-method",
                                                                "call-signature",
                                                                "public-call-signature",
                                                                "static-call-signature",
                                                                "public-static-call-signature",
                                                                "instance-call-signature",
                                                                "public-instance-call-signature",
                                                                "abstract-call-signature",
                                                                "public-abstract-call-signature",
                                                                "protected-call-signature",
                                                                "protected-static-call-signature",
                                                                "protected-instance-call-signature",
                                                                "protected-abstract-call-signature",
                                                                "private-call-signature",
                                                                "private-static-call-signature",
                                                                "private-instance-call-signature",
                                                                "private-abstract-call-signature",
                                                                "constructor",
                                                                "public-constructor",
                                                                "protected-constructor",
                                                                "private-constructor"
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "string",
                                                        "enum": ["never"]
                                                    }
                                                ]
                                            },
                                            "order": {
                                                "type": "string",
                                                "enum": ["alphabetically", "as-written"]
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                ]
                            },
                            "interfaces": {
                                "oneOf": [
                                    {
                                        "type": "string",
                                        "enum": ["never"]
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "enum": [
                                                "signature",
                                                "field",
                                                "method",
                                                "constructor"
                                            ]
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "memberTypes": {
                                                "oneOf": [
                                                    {
                                                        "type": "array",
                                                        "items": {
                                                            "enum": [
                                                                "signature",
                                                                "field",
                                                                "method",
                                                                "constructor"
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "string",
                                                        "enum": ["never"]
                                                    }
                                                ]
                                            },
                                            "order": {
                                                "type": "string",
                                                "enum": ["alphabetically", "as-written"]
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                ]
                            },
                            "typeLiterals": {
                                "oneOf": [
                                    {
                                        "type": "string",
                                        "enum": ["never"]
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "enum": [
                                                "signature",
                                                "field",
                                                "method",
                                                "constructor"
                                            ]
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "memberTypes": {
                                                "oneOf": [
                                                    {
                                                        "type": "array",
                                                        "items": {
                                                            "enum": [
                                                                "signature",
                                                                "field",
                                                                "method",
                                                                "constructor"
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "string",
                                                        "enum": ["never"]
                                                    }
                                                ]
                                            },
                                            "order": {
                                                "type": "string",
                                                "enum": ["alphabetically", "as-written"]
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                ]
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/member-ordering.md",
                "description": "Require a consistent member declaration order",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "error",
                    "options": {
                        "default": [
                            "signature",
                            "public-static-field",
                            "protected-static-field",
                            "private-static-field",
                            "public-abstract-field",
                            "protected-abstract-field",
                            "private-abstract-field",
                            "private-decorated-field",
                            "private-instance-field",
                            "protected-decorated-field",
                            "protected-instance-field",
                            "public-decorated-field",
                            "public-instance-field",
                            "public-constructor",
                            "protected-constructor",
                            "private-constructor",
                            "public-abstract-method",
                            "protected-abstract-method",
                            "private-abstract-method",
                            "public-decorated-method",
                            "public-instance-method",
                            "protected-decorated-method",
                            "protected-instance-method",
                            "private-decorated-method",
                            "private-instance-method"
                        ]
                    }
                }
            },
            "no-unused-vars": {
                "type": "problem",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": ["all", "local"]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "vars": {
                                        "enum": ["all", "local"]
                                    },
                                    "varsIgnorePattern": {
                                        "type": "string"
                                    },
                                    "args": {
                                        "enum": [
                                            "all",
                                            "after-used",
                                            "none"
                                        ]
                                    },
                                    "ignoreRestSiblings": {
                                        "type": "boolean"
                                    },
                                    "argsIgnorePattern": {
                                        "type": "string"
                                    },
                                    "caughtErrors": {
                                        "enum": ["all", "none"]
                                    },
                                    "caughtErrorsIgnorePattern": {
                                        "type": "string"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-unused-vars.md",
                "description": "Disallow unused variables",
                "category": "Variables",
                "recommended": "warn",
                "extendsBaseRule": true,
                "ts": {
                    "severity": "error",
                    "options": {
                        "argsIgnorePattern": "^_"
                    }
                }
            },
            "no-useless-constructor": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "noUselessConstructor": "Useless constructor."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-useless-constructor.md",
                "description": "Disallow unnecessary constructors",
                "category": "Best Practices",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": {
                    "severity": "error"
                }
            },
            "ban-types": {
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "bannedTypeMessage": "Don't use `{{name}}` as a type.{{customMessage}}"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "types": {
                                "type": "object",
                                "additionalProperties": {
                                    "oneOf": [
                                        {
                                            "type": "null"
                                        },
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "message": {
                                                    "type": "string"
                                                },
                                                "fixWith": {
                                                    "type": "string"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    ]
                                }
                            },
                            "extendDefaults": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/ban-types.md",
                "description": "Bans specific types from being used",
                "category": "Best Practices",
                "recommended": "error",
                "ts": {
                    "severity": "error",
                    "options": {
                        "types": {
                            "Object": {
                                "message": "Avoid using the `Object` type. Did you mean `object`?"
                            },
                            "Function": {
                                "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
                            },
                            "Boolean": {
                                "message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
                            },
                            "Number": {
                                "message": "Avoid using the `Number` type. Did you mean `number`?"
                            },
                            "String": {
                                "message": "Avoid using the `String` type. Did you mean `string`?"
                            },
                            "Symbol": {
                                "message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
                            }
                        }
                    }
                }
            },
            "prefer-string-starts-ends-with": {
                "type": "suggestion",
                "messages": {
                    "preferStartsWith": "Use 'String#startsWith' method instead.",
                    "preferEndsWith": "Use the 'String#endsWith' method instead."
                },
                "schema": [],
                "fixable": "code",
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/prefer-string-starts-ends-with.md",
                "description": "Enforce the use of `String#startsWith` and `String#endsWith` instead of other equivalent methods of checking substrings",
                "category": "Best Practices",
                "recommended": false,
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "error"
                }
            },
            "explicit-module-boundary-types": {
                "type": "problem",
                "messages": {
                    "missingReturnType": "Missing return type on function.",
                    "missingArgType": "Argument '{{name}}' should be typed.",
                    "missingArgTypeUnnamed": "{{type}} argument should be typed.",
                    "anyTypedArg": "Argument '{{name}}' should be typed with a non-any type.",
                    "anyTypedArgUnnamed": "{{type}} argument should be typed with a non-any type."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowArgumentsExplicitlyTypedAsAny": {
                                "type": "boolean"
                            },
                            "allowDirectConstAssertionInArrowFunctions": {
                                "type": "boolean"
                            },
                            "allowedNames": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "allowHigherOrderFunctions": {
                                "type": "boolean"
                            },
                            "allowTypedFunctionExpressions": {
                                "type": "boolean"
                            },
                            "shouldTrackReferences": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/explicit-module-boundary-types.md",
                "description": "Require explicit return and argument types on exported functions' and classes' public class methods",
                "category": "Stylistic Issues",
                "recommended": "warn",
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-optional-chain": {
                "type": "suggestion",
                "messages": {
                    "preferOptionalChain": "Prefer using an optional chain expression instead, as it's more concise and easier to read.",
                    "optionalChainSuggest": "Change to an optional chain."
                },
                "schema": [],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/prefer-optional-chain.md",
                "description": "Prefer using concise optional chain expressions instead of chained logical ands",
                "category": "Best Practices",
                "recommended": false,
                "suggestion": true,
                "ts": {
                    "severity": "off"
                }
            },
            "no-explicit-any": {
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "unexpectedAny": "Unexpected any. Specify a different type.",
                    "suggestUnknown": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.",
                    "suggestNever": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                },
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "fixToUnknown": {
                                "type": "boolean"
                            },
                            "ignoreRestArgs": {
                                "type": "boolean"
                            }
                        }
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-explicit-any.md",
                "description": "Disallow usage of the `any` type",
                "category": "Best Practices",
                "recommended": "warn",
                "suggestion": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-empty-function": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allow": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "functions",
                                        "arrowFunctions",
                                        "generatorFunctions",
                                        "methods",
                                        "generatorMethods",
                                        "getters",
                                        "setters",
                                        "constructors",
                                        "private-constructors",
                                        "protected-constructors",
                                        "asyncFunctions",
                                        "asyncMethods",
                                        "decoratedFunctions"
                                    ]
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpected": "Unexpected empty {{name}}."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-empty-function.md",
                "description": "Disallow empty functions",
                "category": "Best Practices",
                "recommended": "error",
                "extendsBaseRule": true,
                "ts": {
                    "severity": "error",
                    "options": {
                        "allow": [
                            "arrowFunctions",
                            "functions",
                            "methods"
                        ]
                    }
                }
            },
            "prefer-includes": {
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "preferIncludes": "Use 'includes()' method instead.",
                    "preferStringIncludes": "Use `String#includes()` method with a string instead."
                },
                "schema": [],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/prefer-includes.md",
                "description": "Enforce `includes` method over `indexOf` method",
                "category": "Best Practices",
                "recommended": false,
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-invalid-void-type": {
                "type": "problem",
                "messages": {
                    "invalidVoidForGeneric": "{{ generic }} may not have void as a type variable.",
                    "invalidVoidNotReturnOrGeneric": "void is only valid as a return type or generic type variable.",
                    "invalidVoidNotReturn": "void is only valid as a return type.",
                    "invalidVoidNotReturnOrThisParam": "void is only valid as return type or type of `this` parameter.",
                    "invalidVoidNotReturnOrThisParamOrGeneric": "void is only valid as a return type or generic type variable or the type of a `this` parameter."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowInGenericTypeArguments": {
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "minLength": 1
                                    }
                                ]
                            },
                            "allowAsThisParameter": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-invalid-void-type.md",
                "description": "Disallows usage of `void` type outside of generic or return types",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-throw-literal": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "object": "Expected an error object to be thrown.",
                    "undef": "Do not throw undefined."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-throw-literal.md",
                "description": "Disallow throwing literals as exceptions",
                "category": "Best Practices",
                "recommended": false,
                "extendsBaseRule": true,
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-inferrable-types": {
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "noInferrableType": "Type {{type}} trivially inferred from a {{type}} literal, remove type annotation."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "ignoreParameters": {
                                "type": "boolean"
                            },
                            "ignoreProperties": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-inferrable-types.md",
                "description": "Disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean",
                "category": "Best Practices",
                "recommended": "error",
                "ts": {
                    "severity": "error",
                    "options": {
                        "ignoreParameters": true
                    }
                }
            },
            "no-use-before-define": {
                "type": "problem",
                "messages": {
                    "noUseBeforeDefine": "'{{name}}' was used before it was defined."
                },
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": ["nofunc"]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "functions": {
                                        "type": "boolean"
                                    },
                                    "classes": {
                                        "type": "boolean"
                                    },
                                    "enums": {
                                        "type": "boolean"
                                    },
                                    "variables": {
                                        "type": "boolean"
                                    },
                                    "typedefs": {
                                        "type": "boolean"
                                    },
                                    "ignoreTypeReferences": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-use-before-define.md",
                "description": "Disallow the use of variables before they are defined",
                "category": "Variables",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": {
                    "severity": "error",
                    "options": {
                        "functions": true,
                        "classes": true,
                        "variables": true
                    }
                }
            },
            "default-param-last": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "shouldBeLast": "Default parameters should be last."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/default-param-last.md",
                "description": "Enforce default parameters to be last",
                "category": "Best Practices",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-redeclare": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "builtinGlobals": {
                                "type": "boolean"
                            },
                            "ignoreDeclarationMerge": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "redeclared": "'{{id}}' is already defined.",
                    "redeclaredAsBuiltin": "'{{id}}' is already defined as a built-in global variable.",
                    "redeclaredBySyntax": "'{{id}}' is already defined by a variable declaration."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-redeclare.md",
                "description": "Disallow variable redeclaration",
                "category": "Best Practices",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": {
                    "severity": "error"
                }
            },
            "lines-between-class-members": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": {
                    "0": {
                        "enum": ["always", "never"]
                    },
                    "1": {
                        "type": "object",
                        "properties": {
                            "exceptAfterSingleLine": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false,
                        "exceptAfterOverload": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                },
                "messages": {
                    "never": "Unexpected blank line between class members.",
                    "always": "Expected blank line between class members."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/lines-between-class-members.md",
                "description": "Require or disallow an empty line between class members",
                "category": "Stylistic Issues",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-empty-interface": {
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "noEmpty": "An empty interface is equivalent to `{}`.",
                    "noEmptyWithSuper": "An interface declaring no members is equivalent to its supertype."
                },
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "allowSingleExtends": {
                                "type": "boolean"
                            }
                        }
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-empty-interface.md",
                "description": "Disallow the declaration of empty interfaces",
                "category": "Best Practices",
                "recommended": "error",
                "suggestion": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-base-to-string": {
                "messages": {
                    "baseToString": "'{{name}} {{certainty}} evaluate to '[object Object]' when stringified."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "ignoredTypeNames": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "type": "suggestion",
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-base-to-string.md",
                "description": "Requires that `.toString()` is only called on objects which provide useful information when stringified",
                "category": "Best Practices",
                "recommended": false,
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-unused-expressions": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowShortCircuit": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowTernary": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowTaggedTemplates": {
                                "type": "boolean",
                                "default": false
                            },
                            "enforceForJSX": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unusedExpression": "Expected an assignment or function call and instead saw an expression."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-unused-expressions.md",
                "description": "Disallow unused expressions",
                "category": "Best Practices",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": {
                    "severity": "error",
                    "options": {
                        "allowShortCircuit": false,
                        "allowTernary": false,
                        "allowTaggedTemplates": false,
                        "enforceForJSX": false
                    }
                }
            },
            "no-shadow": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "builtinGlobals": {
                                "type": "boolean"
                            },
                            "hoist": {
                                "enum": [
                                    "all",
                                    "functions",
                                    "never"
                                ]
                            },
                            "allow": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "ignoreTypeValueShadow": {
                                "type": "boolean"
                            },
                            "ignoreFunctionTypeParameterNameValueShadow": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "noShadow": "'{{name}}' is already declared in the upper scope."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-shadow.md",
                "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
                "category": "Variables",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": {
                    "severity": "error",
                    "options": {
                        "hoist": "all"
                    }
                }
            },
            "explicit-member-accessibility": {
                "type": "problem",
                "fixable": "code",
                "messages": {
                    "missingAccessibility": "Missing accessibility modifier on {{type}} {{name}}.",
                    "unwantedPublicAccessibility": "Public accessibility modifier on {{type}} {{name}}."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "accessibility": {
                                "enum": [
                                    "explicit",
                                    "no-public",
                                    "off"
                                ]
                            },
                            "overrides": {
                                "type": "object",
                                "properties": {
                                    "accessors": {
                                        "enum": [
                                            "explicit",
                                            "no-public",
                                            "off"
                                        ]
                                    },
                                    "constructors": {
                                        "enum": [
                                            "explicit",
                                            "no-public",
                                            "off"
                                        ]
                                    },
                                    "methods": {
                                        "enum": [
                                            "explicit",
                                            "no-public",
                                            "off"
                                        ]
                                    },
                                    "properties": {
                                        "enum": [
                                            "explicit",
                                            "no-public",
                                            "off"
                                        ]
                                    },
                                    "parameterProperties": {
                                        "enum": [
                                            "explicit",
                                            "no-public",
                                            "off"
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            },
                            "ignoredMethodNames": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/explicit-member-accessibility.md",
                "description": "Require explicit accessibility modifiers on class properties and methods",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "error",
                    "options": {
                        "accessibility": "explicit",
                        "overrides": {
                            "accessors": "explicit",
                            "constructors": "no-public",
                            "methods": "explicit",
                            "properties": "off",
                            "parameterProperties": "explicit"
                        }
                    }
                }
            },
            "promise-function-async": {
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "missingAsync": "Functions that return promises must be async."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowAny": {
                                "type": "boolean"
                            },
                            "allowedPromiseNames": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "checkArrowFunctions": {
                                "type": "boolean"
                            },
                            "checkFunctionDeclarations": {
                                "type": "boolean"
                            },
                            "checkFunctionExpressions": {
                                "type": "boolean"
                            },
                            "checkMethodDeclarations": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/promise-function-async.md",
                "description": "Requires any function or method that returns a Promise to be marked async",
                "category": "Best Practices",
                "recommended": false,
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "error"
                }
            },
            "consistent-type-definitions": {
                "type": "suggestion",
                "messages": {
                    "interfaceOverType": "Use an `interface` instead of a `type`.",
                    "typeOverInterface": "Use a `type` instead of an `interface`."
                },
                "schema": [
                    {
                        "enum": ["interface", "type"]
                    }
                ],
                "fixable": "code",
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/consistent-type-definitions.md",
                "description": "Consistent with type definition either `interface` or `type`",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "dot-notation": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowKeywords": {
                                "type": "boolean",
                                "default": true
                            },
                            "allowPattern": {
                                "type": "string",
                                "default": ""
                            },
                            "allowPrivateClassPropertyAccess": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowProtectedClassPropertyAccess": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowIndexSignaturePropertyAccess": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "useDot": "[{{key}}] is better written in dot notation.",
                    "useBrackets": ".{{key}} is a syntax error."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/dot-notation.md",
                "description": "enforce dot notation whenever possible",
                "category": "Best Practices",
                "recommended": false,
                "extendsBaseRule": true,
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "error",
                    "options": {
                        "allowKeywords": true,
                        "allowPattern": "",
                        "allowPrivateClassPropertyAccess": false,
                        "allowProtectedClassPropertyAccess": false,
                        "allowIndexSignaturePropertyAccess": false
                    }
                }
            },
            "consistent-type-assertions": {
                "type": "suggestion",
                "messages": {
                    "as": "Use 'as {{cast}}' instead of '<{{cast}}>'.",
                    "angle-bracket": "Use '<{{cast}}>' instead of 'as {{cast}}'.",
                    "never": "Do not use any type assertions.",
                    "unexpectedObjectTypeAssertion": "Always prefer const x: T = { ... }."
                },
                "schema": [
                    {
                        "oneOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "assertionStyle": {
                                        "enum": ["never"]
                                    }
                                },
                                "additionalProperties": false,
                                "required": ["assertionStyle"]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "assertionStyle": {
                                        "enum": ["as", "angle-bracket"]
                                    },
                                    "objectLiteralTypeAssertions": {
                                        "enum": [
                                            "allow",
                                            "allow-as-parameter",
                                            "never"
                                        ]
                                    }
                                },
                                "additionalProperties": false,
                                "required": ["assertionStyle"]
                            }
                        ]
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/consistent-type-assertions.md",
                "category": "Best Practices",
                "description": "Enforces consistent usage of type assertions",
                "recommended": false,
                "ts": {
                    "severity": "error",
                    "options": {
                        "assertionStyle": "as",
                        "objectLiteralTypeAssertions": "never"
                    }
                }
            },
            "restrict-plus-operands": {
                "type": "problem",
                "messages": {
                    "notNumbers": "Operands of '+' operation must either be both strings or both numbers.",
                    "notStrings": "Operands of '+' operation must either be both strings or both numbers. Consider using a template literal.",
                    "notBigInts": "Operands of '+' operation must be both bigints."
                },
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "checkCompoundAssignments": {
                                "type": "boolean"
                            }
                        }
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/restrict-plus-operands.md",
                "description": "When adding two variables, operands must both be of type number or of type string",
                "category": "Best Practices",
                "recommended": "error",
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "error",
                    "options": {
                        "checkCompoundAssignments": true
                    }
                }
            },
            "prefer-for-of": {
                "type": "suggestion",
                "messages": {
                    "preferForOf": "Expected a `for-of` loop instead of a `for` loop with this simple iteration."
                },
                "schema": [],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/prefer-for-of.md",
                "description": "Prefer a ‘for-of’ loop over a standard ‘for’ loop if the index is only used to access the array being iterated",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-magic-numbers": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "detectObjects": {
                                "type": "boolean",
                                "default": false
                            },
                            "enforceConst": {
                                "type": "boolean",
                                "default": false
                            },
                            "ignore": {
                                "type": "array",
                                "items": {
                                    "anyOf": [
                                        {
                                            "type": "number"
                                        },
                                        {
                                            "type": "string",
                                            "pattern": "^[+-]?(?:0|[1-9][0-9]*)n$"
                                        }
                                    ]
                                },
                                "uniqueItems": true
                            },
                            "ignoreArrayIndexes": {
                                "type": "boolean",
                                "default": false
                            },
                            "ignoreDefaultValues": {
                                "type": "boolean",
                                "default": false
                            },
                            "ignoreNumericLiteralTypes": {
                                "type": "boolean"
                            },
                            "ignoreEnums": {
                                "type": "boolean"
                            },
                            "ignoreReadonlyClassProperties": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "useConst": "Number constants declarations must use 'const'.",
                    "noMagic": "No magic number: {{raw}}."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-magic-numbers.md",
                "description": "Disallow magic numbers",
                "category": "Best Practices",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": {
                    "severity": "error",
                    "options": {
                        "ignoreEnums": true,
                        "ignoreReadonlyClassProperties": true,
                        "ignoreNumericLiteralTypes": true,
                        "detectObjects": false,
                        "enforceConst": false,
                        "ignoreArrayIndexes": false,
                        "ignoreDefaultValues": false
                    }
                }
            },
            "prefer-enum-initializers": {
                "type": "suggestion",
                "messages": {
                    "defineInitializer": "The value of the member '{{ name }}' should be explicitly defined.",
                    "defineInitializerSuggestion": "Can be fixed to {{ name }} = {{ suggested }}"
                },
                "schema": [],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/prefer-enum-initializers.md",
                "description": "Prefer initializing each enums member value",
                "category": "Best Practices",
                "recommended": false,
                "suggestion": true,
                "ts": {
                    "severity": "error"
                }
            },
            "explicit-function-return-type": {
                "type": "problem",
                "messages": {
                    "missingReturnType": "Missing return type on function."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowExpressions": {
                                "type": "boolean"
                            },
                            "allowTypedFunctionExpressions": {
                                "type": "boolean"
                            },
                            "allowHigherOrderFunctions": {
                                "type": "boolean"
                            },
                            "allowDirectConstAssertionInArrowFunctions": {
                                "type": "boolean"
                            },
                            "allowConciseArrowFunctionExpressionsStartingWithVoid": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/explicit-function-return-type.md",
                "description": "Require explicit return types on functions and class methods",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-misused-promises": {
                "messages": {
                    "voidReturn": "Promise returned in function argument where a void return was expected.",
                    "conditional": "Expected non-Promise value in a boolean conditional."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "checksConditionals": {
                                "type": "boolean"
                            },
                            "checksVoidReturn": {
                                "type": "boolean"
                            }
                        }
                    }
                ],
                "type": "problem",
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-misused-promises.md",
                "description": "Avoid using promises in places not designed to handle them",
                "category": "Best Practices",
                "recommended": "error",
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-implicit-any-catch": {
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "implicitAnyInCatch": "Implicit any in catch clause.",
                    "explicitAnyInCatch": "Explicit any in catch clause.",
                    "suggestExplicitUnknown": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                },
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "allowExplicitAny": {
                                "type": "boolean"
                            }
                        }
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-implicit-any-catch.md",
                "description": "Disallow usage of the implicit `any` type in catch clauses",
                "category": "Best Practices",
                "recommended": false,
                "suggestion": true,
                "ts": {
                    "severity": "error"
                }
            },
            "ban-tslint-comment": {
                "type": "suggestion",
                "messages": {
                    "commentDetected": "tslint comment detected: \"{{ text }}\""
                },
                "schema": [],
                "fixable": "code",
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/ban-tslint-comment.md",
                "description": "Bans `// tslint:<rule-flag>` comments from being used",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "class-literal-property-style": {
                "type": "problem",
                "fixable": "code",
                "messages": {
                    "preferFieldStyle": "Literals should be exposed using readonly fields.",
                    "preferGetterStyle": "Literals should be exposed using getters."
                },
                "schema": [
                    {
                        "enum": ["fields", "getters"]
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/class-literal-property-style.md",
                "description": "Ensures that literals on classes are exposed in a consistent style",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-confusing-non-null-assertion": {
                "type": "problem",
                "fixable": "code",
                "messages": {
                    "confusingEqual": "Confusing combinations of non-null assertion and equal test like \"a! == b\", which looks very similar to not equal \"a !== b\".",
                    "confusingAssign": "Confusing combinations of non-null assertion and equal test like \"a! = b\", which looks very similar to not equal \"a != b\".",
                    "notNeedInEqualTest": "Unnecessary non-null assertion (!) in equal test.",
                    "notNeedInAssign": "Unnecessary non-null assertion (!) in assignment left hand.",
                    "wrapUpLeft": "Wrap up left hand to avoid putting non-null assertion \"!\" and \"=\" together."
                },
                "schema": [],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-confusing-non-null-assertion.md",
                "description": "Disallow non-null assertion in locations that may be confusing",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-extraneous-class": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "allowConstructorOnly": {
                                "type": "boolean"
                            },
                            "allowEmpty": {
                                "type": "boolean"
                            },
                            "allowStaticOnly": {
                                "type": "boolean"
                            },
                            "allowWithDecorator": {
                                "type": "boolean"
                            }
                        }
                    }
                ],
                "messages": {
                    "empty": "Unexpected empty class.",
                    "onlyStatic": "Unexpected class with only static properties.",
                    "onlyConstructor": "Unexpected class with only a constructor."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-extraneous-class.md",
                "description": "Forbids the use of classes as namespaces",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "error",
                    "options": {
                        "allowConstructorOnly": true,
                        "allowEmpty": false,
                        "allowStaticOnly": true,
                        "allowWithDecorator": true
                    }
                }
            },
            "no-unnecessary-boolean-literal-compare": {
                "fixable": "code",
                "messages": {
                    "direct": "This expression unnecessarily compares a boolean value to a boolean instead of using it directly.",
                    "negated": "This expression unnecessarily compares a boolean value to a boolean instead of negating it.",
                    "comparingNullableToTrueDirect": "This expression unnecessarily compares a nullable boolean value to true instead of using it directly.",
                    "comparingNullableToTrueNegated": "This expression unnecessarily compares a nullable boolean value to true instead of negating it.",
                    "comparingNullableToFalse": "This expression unnecessarily compares a nullable boolean value to false instead of using the ?? operator to provide a default."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowComparingNullableBooleansToTrue": {
                                "type": "boolean"
                            },
                            "allowComparingNullableBooleansToFalse": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "type": "suggestion",
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-unnecessary-boolean-literal-compare.md",
                "description": "Flags unnecessary equality comparisons against boolean literals",
                "category": "Stylistic Issues",
                "recommended": false,
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-function-type": {
                "fixable": "code",
                "messages": {
                    "functionTypeOverCallableType": "{{ literalOrInterface }} only has a call signature, you should use a function type instead.",
                    "unexpectedThisOnFunctionOnlyInterface": "`this` refers to the function type '{{ interfaceName }}', did you intend to use a generic `this` parameter like `<Self>(this: Self, ...) => Self` instead?"
                },
                "schema": [],
                "type": "suggestion",
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/prefer-function-type.md",
                "description": "Use function types instead of interfaces with call signatures",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-literal-enum-member": {
                "type": "suggestion",
                "messages": {
                    "notLiteral": "Explicit enum value must only be a literal value (string, number, boolean, etc)."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowBitwiseExpressions": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/prefer-literal-enum-member.md",
                "description": "Require that all enum members be literal values to prevent unintended enum member name shadow issues",
                "category": "Best Practices",
                "recommended": false,
                "requiresTypeChecking": false,
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-reduce-type-parameter": {
                "type": "problem",
                "messages": {
                    "preferTypeParameter": "Unnecessary cast: Array#reduce accepts a type parameter for the default value."
                },
                "fixable": "code",
                "schema": [],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/prefer-reduce-type-parameter.md",
                "category": "Best Practices",
                "recommended": false,
                "description": "Prefer using type parameter when calling `Array#reduce` instead of casting",
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-ts-expect-error": {
                "type": "problem",
                "fixable": "code",
                "messages": {
                    "preferExpectErrorComment": "Use \"@ts-expect-error\" to ensure an error is actually being suppressed."
                },
                "schema": [],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/prefer-ts-expect-error.md",
                "description": "Recommends using `@ts-expect-error` over `@ts-ignore`",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "unified-signatures": {
                "type": "suggestion",
                "messages": {
                    "omittingRestParameter": "{{failureStringStart}} with a rest parameter.",
                    "omittingSingleParameter": "{{failureStringStart}} with an optional parameter.",
                    "singleParameterDifference": "{{failureStringStart}} taking `{{type1}} | {{type2}}`."
                },
                "schema": [],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/unified-signatures.md",
                "description": "Warns for any two overloads that could be unified into one by using a union or an optional/rest parameter",
                "category": "Variables",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-nullish-coalescing": {
                "type": "suggestion",
                "messages": {
                    "preferNullish": "Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.",
                    "suggestNullish": "Fix to nullish coalescing operator (`??`)."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "ignoreConditionalTests": {
                                "type": "boolean"
                            },
                            "ignoreMixedLogicalExpressions": {
                                "type": "boolean"
                            },
                            "forceSuggestionFixer": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.md",
                "description": "Enforce the usage of the nullish coalescing operator instead of logical chaining",
                "category": "Best Practices",
                "recommended": false,
                "suggestion": true,
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "off"
                }
            },
            "no-unnecessary-condition": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowConstantLoopConditions": {
                                "type": "boolean"
                            },
                            "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "alwaysTruthy": "Unnecessary conditional, value is always truthy.",
                    "alwaysFalsy": "Unnecessary conditional, value is always falsy.",
                    "alwaysTruthyFunc": "This callback should return a conditional, but return is always truthy.",
                    "alwaysFalsyFunc": "This callback should return a conditional, but return is always falsy.",
                    "neverNullish": "Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.",
                    "alwaysNullish": "Unnecessary conditional, left-hand side of `??` operator is always `null` or `undefined`.",
                    "literalBooleanExpression": "Unnecessary conditional, both sides of the expression are literal values.",
                    "noOverlapBooleanExpression": "Unnecessary conditional, the types have no overlap.",
                    "never": "Unnecessary conditional, value is `never`.",
                    "neverOptionalChain": "Unnecessary optional chain on a non-nullish value.",
                    "noStrictNullCheck": "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-unnecessary-condition.md",
                "description": "Prevents conditionals where the type is always truthy or always falsy",
                "category": "Best Practices",
                "recommended": false,
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "off"
                }
            },
            "no-floating-promises": {
                "messages": {
                    "floating": "Promises must be handled appropriately.",
                    "floatingVoid": "Promises must be handled appropriately or explicitly marked as ignored with the `void` operator.",
                    "floatingFixVoid": "Add void operator to ignore."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "ignoreVoid": {
                                "type": "boolean"
                            },
                            "ignoreIIFE": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "type": "problem",
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-floating-promises.md",
                "description": "Requires Promise-like values to be handled appropriately",
                "category": "Best Practices",
                "recommended": "error",
                "suggestion": true,
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "off"
                }
            },
            "strict-boolean-expressions": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowString": {
                                "type": "boolean"
                            },
                            "allowNumber": {
                                "type": "boolean"
                            },
                            "allowNullableObject": {
                                "type": "boolean"
                            },
                            "allowNullableBoolean": {
                                "type": "boolean"
                            },
                            "allowNullableString": {
                                "type": "boolean"
                            },
                            "allowNullableNumber": {
                                "type": "boolean"
                            },
                            "allowAny": {
                                "type": "boolean"
                            },
                            "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "conditionErrorOther": "Unexpected value in conditional. A boolean expression is required.",
                    "conditionErrorAny": "Unexpected any value in conditional. An explicit comparison or type cast is required.",
                    "conditionErrorNullish": "Unexpected nullish value in conditional. The condition is always false.",
                    "conditionErrorNullableBoolean": "Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.",
                    "conditionErrorString": "Unexpected string value in conditional. An explicit empty string check is required.",
                    "conditionErrorNullableString": "Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.",
                    "conditionErrorNumber": "Unexpected number value in conditional. An explicit zero/NaN check is required.",
                    "conditionErrorNullableNumber": "Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.",
                    "conditionErrorObject": "Unexpected object value in conditional. The condition is always true.",
                    "conditionErrorNullableObject": "Unexpected nullable object value in conditional. An explicit null check is required.",
                    "noStrictNullCheck": "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.",
                    "conditionFixDefaultFalse": "Explicitly treat nullish value the same as false (`value ?? false`)",
                    "conditionFixDefaultEmptyString": "Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)",
                    "conditionFixDefaultZero": "Explicitly treat nullish value the same as 0 (`value ?? 0`)",
                    "conditionFixCompareNullish": "Change condition to check for null/undefined (`value != null`)",
                    "conditionFixCastBoolean": "Explicitly cast value to a boolean (`Boolean(value)`)",
                    "conditionFixCompareTrue": "Change condition to check if true (`value === true`)",
                    "conditionFixCompareFalse": "Change condition to check if false (`value === false`)",
                    "conditionFixCompareStringLength": "Change condition to check string's length (`value.length !== 0`)",
                    "conditionFixCompareEmptyString": "Change condition to check for empty string (`value !== \"\"`)",
                    "conditionFixCompareZero": "Change condition to check for 0 (`value !== 0`)",
                    "conditionFixCompareNaN": "Change condition to check for NaN (`!Number.isNaN(value)`)"
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/strict-boolean-expressions.md",
                "description": "Restricts the types allowed in boolean expressions",
                "category": "Best Practices",
                "recommended": false,
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "off"
                }
            },
            "no-dynamic-delete": {
                "fixable": "code",
                "messages": {
                    "dynamicDelete": "Do not delete dynamically computed property keys."
                },
                "schema": [],
                "type": "suggestion",
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-dynamic-delete.md",
                "category": "Best Practices",
                "description": "Disallow the delete operator with computed key expressions",
                "recommended": false,
                "ts": {
                    "severity": "warn"
                }
            },
            "await-thenable": {
                "messages": {
                    "await": "Unexpected `await` of a non-Promise (non-\"Thenable\") value."
                },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/await-thenable.md",
                "description": "Disallows awaiting a value that is not a Thenable",
                "category": "Best Practices",
                "recommended": "error",
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "error"
                }
            },
            "ban-ts-comment": {
                "type": "problem",
                "messages": {
                    "tsDirectiveComment": "Do not use \"@ts-{{directive}}\" because it alters compilation errors.",
                    "tsDirectiveCommentRequiresDescription": "Include a description after the \"@ts-{{directive}}\" directive to explain why the @ts-{{directive}} is necessary. The description must be {{minimumDescriptionLength}} characters or longer."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "ts-expect-error": {
                                "oneOf": [
                                    {
                                        "type": "boolean",
                                        "default": true
                                    },
                                    {
                                        "enum": ["allow-with-description"]
                                    }
                                ]
                            },
                            "ts-ignore": {
                                "oneOf": [
                                    {
                                        "type": "boolean",
                                        "default": true
                                    },
                                    {
                                        "enum": ["allow-with-description"]
                                    }
                                ]
                            },
                            "ts-nocheck": {
                                "oneOf": [
                                    {
                                        "type": "boolean",
                                        "default": true
                                    },
                                    {
                                        "enum": ["allow-with-description"]
                                    }
                                ]
                            },
                            "ts-check": {
                                "oneOf": [
                                    {
                                        "type": "boolean",
                                        "default": true
                                    },
                                    {
                                        "enum": ["allow-with-description"]
                                    }
                                ]
                            },
                            "minimumDescriptionLength": {
                                "type": "number",
                                "default": 3
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/ban-ts-comment.md",
                "description": "Bans `@ts-<directive>` comments from being used or requires descriptions after directive",
                "category": "Best Practices",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-for-in-array": {
                "messages": {
                    "forInViolation": "For-in loops over arrays are forbidden. Use for-of or array.forEach instead."
                },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-for-in-array.md",
                "description": "Disallow iterating over an array with a for-in loop",
                "category": "Best Practices",
                "recommended": "error",
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-require-imports": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "noRequireImports": "A `require()` style import is forbidden."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-require-imports.md",
                "description": "Disallows invocation of `require()`",
                "category": "Best Practices",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-this-alias": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "allowDestructuring": {
                                "type": "boolean"
                            },
                            "allowedNames": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "messages": {
                    "thisAssignment": "Unexpected aliasing of 'this' to local variable.",
                    "thisDestructure": "Unexpected aliasing of members of 'this' to local variables."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-this-alias.md",
                "description": "Disallow aliasing `this`",
                "category": "Best Practices",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-unnecessary-type-arguments": {
                "fixable": "code",
                "messages": {
                    "unnecessaryTypeParameter": "This is the default value for this type parameter, so it can be omitted."
                },
                "schema": [],
                "type": "suggestion",
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-unnecessary-type-arguments.md",
                "description": "Enforces that type arguments will not be used if not required",
                "category": "Best Practices",
                "recommended": false,
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-unnecessary-type-assertion": {
                "fixable": "code",
                "messages": {
                    "unnecessaryAssertion": "This assertion is unnecessary since it does not change the type of the expression.",
                    "contextuallyUnnecessary": "This assertion is unnecessary since the receiver accepts the original type of the expression."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "typesToIgnore": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-unnecessary-type-assertion.md",
                "description": "Warns if a type assertion does not change the type of an expression",
                "category": "Best Practices",
                "recommended": "error",
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "error"
                }
            },
            "require-await": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "missingAwait": "{{name}} has no 'await' expression."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/require-await.md",
                "description": "Disallow async functions which have no `await` expression",
                "category": "Best Practices",
                "recommended": "error",
                "requiresTypeChecking": true,
                "extendsBaseRule": true,
                "ts": {
                    "severity": "error"
                }
            },
            "triple-slash-reference": {
                "type": "suggestion",
                "messages": {
                    "tripleSlashReference": "Do not use a triple slash reference for {{module}}, use `import` style instead."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "lib": {
                                "enum": ["always", "never"]
                            },
                            "path": {
                                "enum": ["always", "never"]
                            },
                            "types": {
                                "enum": [
                                    "always",
                                    "never",
                                    "prefer-import"
                                ]
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/triple-slash-reference.md",
                "description": "Sets preference level for triple slash directives versus ES6-style import declarations",
                "category": "Best Practices",
                "recommended": "error",
                "ts": {
                    "severity": "error",
                    "options": {
                        "path": "always",
                        "types": "prefer-import",
                        "lib": "always"
                    }
                }
            },
            "no-invalid-this": {
                "type": "suggestion",
                "messages": {
                    "unexpectedThis": "Unexpected 'this'."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "capIsConstructor": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-invalid-this.md",
                "description": "Disallow `this` keywords outside of classes or class-like objects",
                "category": "Best Practices",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": {
                    "severity": "off"
                }
            },
            "prefer-readonly": {
                "fixable": "code",
                "messages": {
                    "preferReadonly": "Member '{{name}}' is never reassigned; mark it as `readonly`."
                },
                "schema": [
                    {
                        "allowAdditionalProperties": false,
                        "properties": {
                            "onlyInlineLambdas": {
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                ],
                "type": "suggestion",
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/prefer-readonly.md",
                "description": "Requires that private members are marked as `readonly` if they're never modified outside of the constructor",
                "category": "Best Practices",
                "recommended": false,
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "error"
                }
            },
            "array-type": {
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "errorStringGeneric": "Array type using '{{type}}[]' is forbidden. Use 'Array<{{type}}>' instead.",
                    "errorStringGenericSimple": "Array type using '{{type}}[]' is forbidden for non-simple types. Use 'Array<{{type}}>' instead.",
                    "errorStringArray": "Array type using 'Array<{{type}}>' is forbidden. Use '{{type}}[]' instead.",
                    "errorStringArraySimple": "Array type using 'Array<{{type}}>' is forbidden for simple types. Use '{{type}}[]' instead."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "default": {
                                "enum": [
                                    "array",
                                    "generic",
                                    "array-simple"
                                ]
                            },
                            "readonly": {
                                "enum": [
                                    "array",
                                    "generic",
                                    "array-simple"
                                ]
                            }
                        }
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/array-type.md",
                "description": "Requires using either `T[]` or `Array<T>` for arrays",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "error",
                    "options": {
                        "default": "generic",
                        "readonly": "array-simple"
                    }
                }
            },
            "no-param-reassign": {
                "url": "__NOT__DEFINED__",
                "ts": {
                    "severity": "off"
                }
            },
            "adjacent-overload-signatures": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "adjacentSignature": "All '{{name}}' signatures should be adjacent."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/adjacent-overload-signatures.md",
                "description": "Require that member overloads be consecutive",
                "category": "Best Practices",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-array-constructor": {
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "useLiteral": "The array literal notation [] is preferable."
                },
                "schema": [],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-array-constructor.md",
                "description": "Disallow generic `Array` constructors",
                "category": "Stylistic Issues",
                "recommended": "error",
                "extendsBaseRule": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-extra-non-null-assertion": {
                "type": "problem",
                "fixable": "code",
                "schema": [],
                "messages": {
                    "noExtraNonNullAssertion": "Forbidden extra non-null assertion."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-extra-non-null-assertion.md",
                "description": "Disallow extra non-null assertion",
                "category": "Stylistic Issues",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-misused-new": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "errorMessageInterface": "Interfaces cannot be constructed, only classes.",
                    "errorMessageClass": "Class cannot have method named `new`."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-misused-new.md",
                "description": "Enforce valid definition of `new` and `constructor`",
                "category": "Best Practices",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-namespace": {
                "type": "suggestion",
                "messages": {
                    "moduleSyntaxIsPreferred": "ES2015 module syntax is preferred over custom TypeScript modules and namespaces."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowDeclarations": {
                                "type": "boolean"
                            },
                            "allowDefinitionFiles": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-namespace.md",
                "description": "Disallow the use of custom TypeScript modules and namespaces",
                "category": "Best Practices",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-non-null-asserted-optional-chain": {
                "type": "problem",
                "messages": {
                    "noNonNullOptionalChain": "Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.",
                    "suggestRemovingNonNull": "You should remove the non-null assertion."
                },
                "schema": [],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-non-null-asserted-optional-chain.md",
                "description": "Disallows using a non-null assertion after an optional chain expression",
                "category": "Possible Errors",
                "recommended": "error",
                "suggestion": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-non-null-assertion": {
                "type": "problem",
                "messages": {
                    "noNonNull": "Forbidden non-null assertion.",
                    "suggestOptionalChain": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
                },
                "schema": [],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-non-null-assertion.md",
                "description": "Disallows non-null assertions using the `!` postfix operator",
                "category": "Stylistic Issues",
                "recommended": "warn",
                "suggestion": true,
                "ts": {
                    "severity": "warn"
                }
            },
            "no-var-requires": {
                "type": "problem",
                "messages": {
                    "noVarReqs": "Require statement not part of import statement."
                },
                "schema": [],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-var-requires.md",
                "description": "Disallows the use of require statements except in import statements",
                "category": "Best Practices",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-as-const": {
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "preferConstAssertion": "Expected a `const` instead of a literal type assertion.",
                    "variableConstAssertion": "Expected a `const` assertion instead of a literal type annotation.",
                    "variableSuggest": "You should use `as const` instead of type annotation."
                },
                "schema": [],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/prefer-as-const.md",
                "description": "Prefer usage of `as const` over literal type",
                "category": "Best Practices",
                "recommended": "error",
                "suggestion": true,
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-namespace-keyword": {
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "useNamespace": "Use 'namespace' instead of 'module' to declare custom TypeScript modules."
                },
                "schema": [],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/prefer-namespace-keyword.md",
                "description": "Require the use of the `namespace` keyword instead of the `module` keyword to declare custom TypeScript modules",
                "category": "Best Practices",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-dupe-class-members": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "unexpected": "Duplicate name '{{name}}'."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-dupe-class-members.md",
                "description": "Disallow duplicate class members",
                "category": "Possible Errors",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-implied-eval": {
                "messages": {
                    "noImpliedEvalError": "Implied eval. Consider passing a function.",
                    "noFunctionConstructor": "Implied eval. Do not use the Function constructor to create functions."
                },
                "schema": [],
                "type": "suggestion",
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-implied-eval.md",
                "description": "Disallow the use of `eval()`-like methods",
                "category": "Best Practices",
                "recommended": "error",
                "extendsBaseRule": true,
                "requiresTypeChecking": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-loss-of-precision": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "noLossOfPrecision": "This number literal will lose precision at runtime."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-loss-of-precision.md",
                "description": "Disallow literal numbers that lose precision",
                "category": "Possible Errors",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-loop-func": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "unsafeRefs": "Function declared in a loop contains unsafe references to variable(s) {{ varNames }}."
                },
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-loop-func.md",
                "description": "Disallow function declarations that contain unsafe references inside loop statements",
                "category": "Best Practices",
                "recommended": false,
                "extendsBaseRule": true,
                "ts": {
                    "severity": "error"
                }
            },
            "return-await": {
                "fixable": "code",
                "type": "problem",
                "messages": {
                    "nonPromiseAwait": "Returning an awaited value that is not a promise is not allowed.",
                    "disallowedPromiseAwait": "Returning an awaited promise is not allowed in this context.",
                    "requiredPromiseAwait": "Returning an awaited promise is required in this context."
                },
                "schema": [
                    {
                        "enum": [
                            "in-try-catch",
                            "always",
                            "never"
                        ]
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/return-await.md",
                "description": "Enforces consistent returning of awaited values",
                "category": "Best Practices",
                "recommended": false,
                "requiresTypeChecking": true,
                "extendsBaseRule": "no-return-await",
                "ts": {
                    "severity": "error",
                    "options": "in-try-catch"
                }
            },
            "interface-name-prefix": {
                "url": "__NOT__DEFINED__",
                "ts": {
                    "severity": "off"
                }
            },
            "no-parameter-properties": {
                "type": "problem",
                "messages": {
                    "noParamProp": "Property {{parameter}} cannot be declared in the constructor."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allows": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "readonly",
                                        "private",
                                        "protected",
                                        "public",
                                        "private readonly",
                                        "protected readonly",
                                        "public readonly"
                                    ]
                                },
                                "minItems": 1
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v4.33.0/packages/eslint-plugin/docs/rules/no-parameter-properties.md",
                "description": "Disallow the use of parameter properties in class constructors",
                "category": "Stylistic Issues",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            }
        }
    },
    "eslint-plugin-unicorn": {
        "fields": [
            "type",
            "fixable",
            "description",
            "hasSuggestions",
            "hasSuggestion"
        ],
        "rules": {
            "empty-brace-spaces": {
                "schema": [],
                "type": "layout",
                "fixable": "whitespace",
                "messages": {
                    "empty-brace-spaces": "Do not add spaces between braces."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/empty-brace-spaces.md",
                "description": "Enforce no spaces between braces.",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "no-nested-ternary": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "too-deep": "Do not nest ternary expressions.",
                    "should-parenthesized": "Nest ternary expression should be parenthesized."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-nested-ternary.md",
                "description": "Disallow nested ternary expressions.",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "number-literal-case": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "number-literal-case": "Invalid number literal casing."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/number-literal-case.md",
                "description": "Enforce proper case for numeric literals.",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "better-regex": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "sortCharacterClasses": {
                                "type": "boolean",
                                "default": true
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "better-regex": "{{original}} can be optimized to {{optimized}}."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/better-regex.md",
                "description": "Improve regexes by making them shorter, consistent, and safer.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "catch-error-name": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "ignore": {
                                "type": "array",
                                "uniqueItems": true
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "catch-error-name": "The catch parameter `{{originalName}}` should be named `{{fixedName}}`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/catch-error-name.md",
                "description": "Enforce a specific parameter name in catch clauses.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "consistent-destructuring": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "consistentDestructuring": "Use destructured variables over properties.",
                    "consistentDestructuringSuggest": "Replace `{{expression}}` with destructured property `{{property}}`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/consistent-destructuring.md",
                "description": "Use destructured variables over properties.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "consistent-function-scoping": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "checkArrowFunctions": {
                                "type": "boolean",
                                "default": true
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "messages": {
                    "consistent-function-scoping": "Move {{functionNameWithKind}} to the outer scope."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/consistent-function-scoping.md",
                "description": "Move function definitions to the highest possible scope.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "custom-error-definition": {
                "schema": [],
                "type": "problem",
                "fixable": "code",
                "messages": {
                    "invalidExport": "Exported error name should match error class"
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/custom-error-definition.md",
                "description": "Enforce correct `Error` subclassing.",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "warn"
                },
                "ts": {
                    "severity": "warn"
                }
            },
            "error-message": {
                "schema": [],
                "type": "problem",
                "messages": {
                    "missing-message": "Pass a message to the `{{constructorName}}` constructor.",
                    "message-is-empty-string": "Error message should not be an empty string.",
                    "message-is-not-a-string": "Error message should be a string."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/error-message.md",
                "description": "Enforce passing a `message` value when creating a built-in error.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "escape-case": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "escape-case": "Use uppercase characters for the value of the escape sequence."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/escape-case.md",
                "description": "Require escape sequences to use uppercase values.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "expiring-todo-comments": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "terms": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "ignore": {
                                "type": "array",
                                "uniqueItems": true
                            },
                            "ignoreDatesOnPullRequests": {
                                "type": "boolean",
                                "default": true
                            },
                            "allowWarningComments": {
                                "type": "boolean",
                                "default": false
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "messages": {
                    "unicorn/avoidMultipleDates": "Avoid using multiple expiration dates in TODO: {{expirationDates}}. {{message}}",
                    "unicorn/expiredTodo": "There is a TODO that is past due date: {{expirationDate}}. {{message}}",
                    "unicorn/reachedPackageVersion": "There is a TODO that is past due package version: {{comparison}}. {{message}}",
                    "unicorn/avoidMultiplePackageVersions": "Avoid using multiple package versions in TODO: {{versions}}. {{message}}",
                    "unicorn/havePackage": "There is a TODO that is deprecated since you installed: {{package}}. {{message}}",
                    "unicorn/dontHavePackage": "There is a TODO that is deprecated since you uninstalled: {{package}}. {{message}}",
                    "unicorn/versionMatches": "There is a TODO match for package version: {{comparison}}. {{message}}",
                    "unicorn/engineMatches": "There is a TODO match for Node.js version: {{comparison}}. {{message}}",
                    "unicorn/removeWhitespaces": "Avoid using whitespace on TODO argument. On '{{original}}' use '{{fix}}'. {{message}}",
                    "unicorn/missingAtSymbol": "Missing '@' on TODO argument. On '{{original}}' use '{{fix}}'. {{message}}",
                    "unexpectedComment": "Unexpected '{{matchedTerm}}' comment without any conditions: '{{comment}}'."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/expiring-todo-comments.md",
                "description": "Add expiration conditions to TODO comments.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "explicit-length-check": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "non-zero": {
                                "enum": ["greater-than", "not-equal"],
                                "default": "greater-than"
                            }
                        }
                    }
                ],
                "type": "problem",
                "fixable": "code",
                "messages": {
                    "non-zero": "Use `.{{property}} {{code}}` when checking {{property}} is not zero.",
                    "zero": "Use `.{{property}} {{code}}` when checking {{property}} is zero.",
                    "suggestion": "Replace `.{{property}}` with `.{{property}} {{code}}`."
                },
                "hasSuggestions": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/explicit-length-check.md",
                "description": "Enforce explicitly comparing the `length` or `size` property of a value.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "filename-case": {
                "schema": [
                    {
                        "oneOf": [
                            {
                                "properties": {
                                    "case": {
                                        "enum": [
                                            "camelCase",
                                            "snakeCase",
                                            "kebabCase",
                                            "pascalCase"
                                        ]
                                    },
                                    "ignore": {
                                        "type": "array",
                                        "uniqueItems": true
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "properties": {
                                    "cases": {
                                        "properties": {
                                            "camelCase": {
                                                "type": "boolean"
                                            },
                                            "snakeCase": {
                                                "type": "boolean"
                                            },
                                            "kebabCase": {
                                                "type": "boolean"
                                            },
                                            "pascalCase": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "ignore": {
                                        "type": "array",
                                        "uniqueItems": true
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "type": "suggestion",
                "messages": {
                    "filename-case": "Filename is not in {{chosenCases}}. Rename it to {{renamedFilenames}}.",
                    "filename-extension": "File extension `{{extension}}` is not in lowercase. Rename it to `{{filename}}`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/filename-case.md",
                "description": "Enforce a case style for filenames.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "import-index": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "ignoreImports": {
                                "type": "boolean",
                                "default": false
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "import-index": "Do not reference the index file directly.."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/import-index.md",
                "description": "Enforce importing index files with `.`.",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "import-style": {
                "schema": {
                    "type": "array",
                    "additionalItems": false,
                    "items": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "checkImport": {
                                    "type": "boolean"
                                },
                                "checkDynamicImport": {
                                    "type": "boolean"
                                },
                                "checkExportFrom": {
                                    "type": "boolean"
                                },
                                "checkRequire": {
                                    "type": "boolean"
                                },
                                "extendDefaultStyles": {
                                    "type": "boolean"
                                },
                                "styles": {
                                    "$ref": "#/definitions/moduleStyles"
                                }
                            }
                        }
                    ],
                    "definitions": {
                        "moduleStyles": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/styles"
                            }
                        },
                        "styles": {
                            "anyOf": [
                                {
                                    "enum": [false]
                                },
                                {
                                    "$ref": "#/definitions/booleanObject"
                                }
                            ]
                        },
                        "booleanObject": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    }
                },
                "type": "problem",
                "messages": {
                    "importStyle": "Use {{allowedStyles}} import for module `{{moduleName}}`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/import-style.md",
                "description": "Enforce specific import styles per module.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "new-for-builtins": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "enforce": "Use `new {{name}}()` instead of `{{name}}()`.",
                    "disallow": "Use `{{name}}()` instead of `new {{name}}()`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/new-for-builtins.md",
                "description": "Enforce the use of `new` for all builtins, except `String`, `Number`, `Boolean`, `Symbol` and `BigInt`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-abusive-eslint-disable": {
                "schema": [],
                "type": "suggestion",
                "messages": {
                    "no-abusive-eslint-disable": "Specify the rules you want to disable."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-abusive-eslint-disable.md",
                "description": "Enforce specifying rules to disable in `eslint-disable` comments.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-array-callback-reference": {
                "schema": [],
                "type": "problem",
                "hasSuggestions": true,
                "messages": {
                    "error-with-name": "Do not pass function `{{name}}` directly to `.{{method}}(…)`.",
                    "error-without-name": "Do not pass function directly to `.{{method}}(…)`.",
                    "replace-with-name": "Replace function `{{name}}` with `… => {{name}}({{parameters}})`.",
                    "replace-without-name": "Replace function with `… => …({{parameters}})`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-array-callback-reference.md",
                "description": "Prevent passing a function reference directly to iterator methods.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-array-for-each": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "no-array-for-each": "Use `for…of` instead of `Array#forEach(…)`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-array-for-each.md",
                "description": "Prefer `for…of` over `Array#forEach(…)`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "no-array-method-this-argument": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "error": "Do not use the `this` argument in `Array#{{method}}()`.",
                    "suggestion-remove": "Remove the second argument.",
                    "suggestion-bind": "Use a bound function."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-array-method-this-argument.md",
                "description": "Disallow using the `this` argument in array methods.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-array-push-push": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "ignore": {
                                "type": "array",
                                "uniqueItems": true
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "error": "Do not call `Array#push()` multiple times.",
                    "suggestion": "Merge with previous one."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-array-push-push.md",
                "description": "Enforce combining multiple `Array#push()` into one call.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-array-reduce": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "allowSimpleOperations": {
                                "type": "boolean",
                                "default": true
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "messages": {
                    "no-reduce": "`Array#{{method}}()` is not allowed"
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-array-reduce.md",
                "description": "Disallow `Array#reduce()` and `Array#reduceRight()`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "no-await-expression-member": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "no-await-expression-member": "Do not access a member directly from an await expression."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-await-expression-member.md",
                "description": "Forbid member access from await expression.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-console-spaces": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "no-console-spaces": "Do not use {{position}} space between `console.{{method}}` parameters."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-console-spaces.md",
                "description": "Do not use leading/trailing space between `console.log` parameters.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-document-cookie": {
                "schema": [],
                "type": "problem",
                "messages": {
                    "no-document-cookie": "Do not use `document.cookie` directly."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-document-cookie.md",
                "description": "Do not use `document.cookie` directly.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-empty-file": {
                "schema": [],
                "type": "suggestion",
                "messages": {
                    "no-empty-file": "Empty files are not allowed."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-empty-file.md",
                "description": "Disallow empty files.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-for-loop": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "no-for-loop": "Use a `for-of` loop instead of this `for` loop."
                },
                "hasSuggestion": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-for-loop.md",
                "description": "Do not use a `for` loop that can be replaced with a `for-of` loop.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-hex-escape": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "no-hex-escape": "Use Unicode escapes instead of hexadecimal escapes."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-hex-escape.md",
                "description": "Enforce the use of Unicode escapes instead of hexadecimal escapes.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-instanceof-array": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "no-instanceof-array": "Use `Array.isArray()` instead of `instanceof Array`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-instanceof-array.md",
                "description": "Require `Array.isArray()` instead of `instanceof Array`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-invalid-remove-event-listener": {
                "schema": [],
                "type": "problem",
                "messages": {
                    "no-invalid-remove-event-listener": "The listener argument should be a function reference."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-invalid-remove-event-listener.md",
                "description": "Prevent calling `EventTarget#removeEventListener()` with the result of an expression.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-keyword-prefix": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "disallowedPrefixes": {
                                "type": "array",
                                "items": [
                                    {
                                        "type": "string"
                                    }
                                ],
                                "minItems": 0,
                                "uniqueItems": true
                            },
                            "checkProperties": {
                                "type": "boolean"
                            },
                            "onlyCamelCase": {
                                "type": "boolean"
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "messages": {
                    "noKeywordPrefix": "Do not prefix identifiers with keyword `{{keyword}}`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-keyword-prefix.md",
                "description": "Disallow identifiers starting with `new` or `class`.",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "error",
                    "options": {
                        "disallowedPrefixes": ["class"]
                    }
                },
                "ts": {
                    "severity": "error",
                    "options": {
                        "disallowedPrefixes": ["class"]
                    }
                }
            },
            "no-lonely-if": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "no-lonely-if": "Unexpected `if` as the only statement in a `if` block without `else`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-lonely-if.md",
                "description": "Disallow `if` statements as the only statement in `if` blocks without `else`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-new-array": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "error": "Do not use `new Array()`.",
                    "array-length": "The argument is the length of array.",
                    "only-element": "The argument is the only element of array.",
                    "spread": "Spread the argument."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-new-array.md",
                "description": "Disallow `new Array()`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-new-buffer": {
                "schema": [],
                "type": "problem",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "error": "`new Buffer()` is deprecated, use `Buffer.{{method}}()` instead.",
                    "error-unknown": "`new Buffer()` is deprecated, use `Buffer.alloc()` or `Buffer.from()` instead.",
                    "suggestion": "Switch to `Buffer.{{method}}()`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-new-buffer.md",
                "description": "Enforce the use of `Buffer.from()` and `Buffer.alloc()` instead of the deprecated `new Buffer()`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-null": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "checkStrictEquality": {
                                "type": "boolean",
                                "default": false
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "error": "Use `undefined` instead of `null`.",
                    "replace": "Replace `null` with `undefined`.",
                    "remove": "Remove `null`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-null.md",
                "description": "Disallow the use of the `null` literal.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "no-object-as-default-parameter": {
                "schema": [],
                "type": "problem",
                "messages": {
                    "identifier": "Do not use an object literal as default for parameter `{{parameter}}`.",
                    "non-identifier": "Do not use an object literal as default."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-object-as-default-parameter.md",
                "description": "Disallow the use of objects as default parameters.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-process-exit": {
                "schema": [],
                "type": "suggestion",
                "messages": {
                    "no-process-exit": "Only use `process.exit()` in CLI apps. Throw an error instead."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-process-exit.md",
                "description": "Disallow `process.exit()`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-static-only-class": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "no-static-only-class": "Use an object instead of a class with only static members."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-static-only-class.md",
                "description": "Forbid classes that only have static members.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-this-assignment": {
                "schema": [],
                "type": "suggestion",
                "messages": {
                    "no-this-assignment": "Do not assign `this` to `{{name}}`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-this-assignment.md",
                "description": "Disallow assigning `this` to a variable.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-unreadable-array-destructuring": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "no-unreadable-array-destructuring": "Array destructuring may not contain consecutive ignored values."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-unreadable-array-destructuring.md",
                "description": "Disallow unreadable array destructuring.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-unsafe-regex": {
                "schema": [],
                "type": "problem",
                "messages": {
                    "no-unsafe-regex": "Unsafe regular expression."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-unsafe-regex.md",
                "description": "Disallow unsafe regular expressions.",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "warn"
                },
                "ts": {
                    "severity": "warn"
                }
            },
            "no-unused-properties": {
                "schema": [],
                "type": "suggestion",
                "messages": {
                    "no-unused-properties": "Property `{{name}}` is defined but never used."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-unused-properties.md",
                "description": "Disallow unused object properties.",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "no-useless-fallback-in-spread": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "no-useless-fallback-in-spread": "The empty object is useless."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-useless-fallback-in-spread.md",
                "description": "Forbid useless fallback when spreading in object literals.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-useless-length-check": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "non-zero": "The non-empty check is useless as `Array#some()` returns `false` for an empty array.",
                    "zero": "The empty check is useless as `Array#every()` returns `true` for an empty array."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-useless-length-check.md",
                "description": "Disallow useless array length check.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-useless-spread": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "spread-in-list": "Spread an {{argumentType}} literal in {{parentDescription}} is unnecessary.",
                    "iterable-to-array": "`{{parentDescription}}` accepts iterable as argument, it's unnecessary to convert to an array.",
                    "iterable-to-array-in-for-of": "`for…of` can iterate over iterable, it's unnecessary to convert to an array.",
                    "iterable-to-array-in-yield-star": "`yield*` can delegate iterable, it's unnecessary to convert to an array."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-useless-spread.md",
                "description": "Disallow unnecessary spread.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-useless-undefined": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "checkArguments": {
                                "type": "boolean"
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "no-useless-undefined": "Do not use useless `undefined`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-useless-undefined.md",
                "description": "Disallow useless `undefined`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "no-zero-fractions": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "zero-fraction": "Don't use a zero fraction in the number.",
                    "dangling-dot": "Don't use a dangling dot in the number."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/no-zero-fractions.md",
                "description": "Disallow number literals with zero fractions or dangling dots.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "numeric-separators-style": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "binary": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                    "onlyIfContainsSeparator": {
                                        "type": "boolean"
                                    },
                                    "minimumDigits": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "default": 0
                                    },
                                    "groupLength": {
                                        "type": "integer",
                                        "minimum": 1,
                                        "default": 4
                                    }
                                }
                            },
                            "octal": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                    "onlyIfContainsSeparator": {
                                        "type": "boolean"
                                    },
                                    "minimumDigits": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "default": 0
                                    },
                                    "groupLength": {
                                        "type": "integer",
                                        "minimum": 1,
                                        "default": 4
                                    }
                                }
                            },
                            "hexadecimal": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                    "onlyIfContainsSeparator": {
                                        "type": "boolean"
                                    },
                                    "minimumDigits": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "default": 0
                                    },
                                    "groupLength": {
                                        "type": "integer",
                                        "minimum": 1,
                                        "default": 2
                                    }
                                }
                            },
                            "number": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                    "onlyIfContainsSeparator": {
                                        "type": "boolean"
                                    },
                                    "minimumDigits": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "default": 5
                                    },
                                    "groupLength": {
                                        "type": "integer",
                                        "minimum": 1,
                                        "default": 3
                                    }
                                }
                            },
                            "onlyIfContainsSeparator": {
                                "type": "boolean",
                                "default": false
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "numeric-separators-style": "Invalid group length in numeric value."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/numeric-separators-style.md",
                "description": "Enforce the style of numeric separators by correctly grouping digits.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-add-event-listener": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "excludedPackages": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "prefer-add-event-listener": "Prefer `{{replacement}}` over `{{method}}`.{{extra}}"
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-add-event-listener.md",
                "description": "Prefer `.addEventListener()` and `.removeEventListener()` over `on`-functions.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "prefer-array-find": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "error-variable": "Prefer `.find(…)` over `.filter(…)`.",
                    "error-zero-index": "Prefer `.find(…)` over `.filter(…)[0]`.",
                    "error-shift": "Prefer `.find(…)` over `.filter(…).shift()`.",
                    "error-destructuring-declaration": "Prefer `.find(…)` over destructuring `.filter(…)`.",
                    "error-destructuring-assignment": "Prefer `.find(…)` over destructuring `.filter(…)`.",
                    "suggest-nullish-coalescing-operator": "Replace `.filter(…)` with `.find(…) ?? …`.",
                    "suggest-logical-or-operator": "Replace `.filter(…)` with `.find(…) || …`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-array-find.md",
                "description": "Prefer `.find(…)` over the first element from `.filter(…)`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-array-flat": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "functions": {
                                "type": "array",
                                "uniqueItems": true
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "prefer-array-flat": "Prefer `Array#flat()` over `{{description}}` to flatten an array."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-array-flat.md",
                "description": "Prefer `Array#flat()` over legacy techniques to flatten arrays.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-array-flat-map": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "prefer-array-flat-map": "Prefer `.flatMap(…)` over `.map(…).flat()`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-array-flat-map.md",
                "description": "Prefer `.flatMap(…)` over `.map(…).flat()`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-array-index-of": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "prefer-indexOf-over-findIndex//error": "Use `.indexOf()` instead of `.findIndex()` when looking for the index of an item.",
                    "prefer-indexOf-over-findIndex//suggestion": "Replace `.findIndex()` with `.indexOf()`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-array-index-of.md",
                "description": "Prefer `Array#indexOf()` over `Array#findIndex()` when looking for the index of an item.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-array-some": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "some": "Prefer `.some(…)` over `.find(…)`.",
                    "some-suggestion": "Replace `.find(…)` with `.some(…)`.",
                    "filter": "Prefer `.some(…)` over non-zero length check from `.filter(…)`."
                },
                "hasSuggestions": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-array-some.md",
                "description": "Prefer `.some(…)` over `.filter(…).length` check and `.find(…)`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-at": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "getLastElementFunctions": {
                                "type": "array",
                                "uniqueItems": true
                            },
                            "checkAllIndexAccess": {
                                "type": "boolean",
                                "default": false
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "negative-index": "Prefer `.at(…)` over `[….length - index]`.",
                    "index": "Prefer `.at(…)` over index access.",
                    "string-char-at-negative": "Prefer `String#at(…)` over `String#charAt(….length - index)`.",
                    "string-char-at": "Prefer `String#at(…)` over `String#charAt(…)`.",
                    "slice": "Prefer `.at(…)` over the first element from `.slice(…)`.",
                    "get-last-function": "Prefer `.at(-1)` over `{{description}}(…)` to get the last element.",
                    "use-at": "Use `.at(…)`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-at.md",
                "description": "Prefer `.at()` method for index access and `String#charAt()`.",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "prefer-code-point": {
                "schema": [],
                "type": "suggestion",
                "hasSuggestions": true,
                "messages": {
                    "error/charCodeAt": "Prefer `String#codePointAt()` over `String#charCodeAt()`.",
                    "error/fromCharCode": "Prefer `String.fromCodePoint()` over `String.fromCharCode()`.",
                    "suggestion/charCodeAt": "Use `String#codePointAt()`.",
                    "suggestion/fromCharCode": "Use `String.fromCodePoint()`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-code-point.md",
                "description": "Prefer `String#codePointAt(…)` over `String#charCodeAt(…)` and `String.fromCodePoint(…)` over `String.fromCharCode(…)`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-date-now": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "prefer-date": "Prefer `Date.now()` over `new Date()`.",
                    "prefer-date-now-over-methods": "Prefer `Date.now()` over `Date#{{method}}()`.",
                    "prefer-date-now-over-number-data-object": "Prefer `Date.now()` over `Number(new Date())`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-date-now.md",
                "description": "Prefer `Date.now()` to get the number of milliseconds since the Unix Epoch.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-default-parameters": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "preferDefaultParameters": "Prefer default parameters over reassignment.",
                    "preferDefaultParametersSuggest": "Replace reassignment with default parameter."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-default-parameters.md",
                "description": "Prefer default parameters over reassignment.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-dom-node-append": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "prefer-dom-node-append": "Prefer `Node#append()` over `Node#appendChild()`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-dom-node-append.md",
                "description": "Prefer `Node#append()` over `Node#appendChild()`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-dom-node-dataset": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "prefer-dom-node-dataset": "Prefer `.dataset` over `setAttribute(…)`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-dom-node-dataset.md",
                "description": "Prefer using `.dataset` on DOM elements over `.setAttribute(…)`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-dom-node-remove": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "error": "Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`.",
                    "suggestion": "Replace `parentNode.removeChild(childNode)` with `childNode.remove()`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-dom-node-remove.md",
                "description": "Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-dom-node-text-content": {
                "schema": [],
                "type": "suggestion",
                "hasSuggestions": true,
                "messages": {
                    "error": "Prefer `.textContent` over `.innerText`.",
                    "suggestion": "Switch to `.textContent`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-dom-node-text-content.md",
                "description": "Prefer `.textContent` over `.innerText`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-export-from": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "ignoreUsedVariables": {
                                "type": "boolean",
                                "default": false
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "error": "Use `export…from` to re-export `{{exported}}`.",
                    "suggestion": "Switch to `export…from`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-export-from.md",
                "description": "Prefer `export…from` when re-exporting.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-includes": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "prefer-includes": "Use `.includes()`, rather than `.indexOf()`, when checking for existence.",
                    "prefer-includes-over-some//error": "Use `.includes()` instead of `.some()` when checking value existence.",
                    "prefer-includes-over-some//suggestion": "Replace `.some()` with `.includes()`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-includes.md",
                "description": "Prefer `.includes()` over `.indexOf()` and `Array#some()` when checking for existence or non-existence.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-keyboard-event-key": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "prefer-keyboard-event-key": "Use `.key` instead of `.{{name}}`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-keyboard-event-key.md",
                "description": "Prefer `KeyboardEvent#key` over `KeyboardEvent#keyCode`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-math-trunc": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "error-bitwise": "Use `Math.trunc` instead of `{{operator}} {{value}}`.",
                    "error-bitwise-not": "Use `Math.trunc` instead of `~~`.",
                    "suggestion-bitwise": "Replace `{{operator}} {{value}}` with `Math.trunc`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-math-trunc.md",
                "description": "Enforce the use of `Math.trunc` instead of bitwise operators.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-modern-dom-apis": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "replaceChildOrInsertBefore": "Prefer `{{oldChildNode}}.{{preferredMethod}}({{newChildNode}})` over `{{parentNode}}.{{method}}({{newChildNode}}, {{oldChildNode}})`.",
                    "insertAdjacentTextOrInsertAdjacentElement": "Prefer `{{reference}}.{{preferredMethod}}({{content}})` over `{{reference}}.{{method}}({{position}}, {{content}})`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-modern-dom-apis.md",
                "description": "Prefer `.before()` over `.insertBefore()`, `.replaceWith()` over `.replaceChild()`, prefer one of `.before()`, `.after()`, `.append()` or `.prepend()` over `insertAdjacentText()` and `insertAdjacentElement()`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-module": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "error/use-strict-directive": "Do not use \"use strict\" directive.",
                    "error/global-return": "\"return\" should be used inside a function.",
                    "error/identifier": "Do not use \"{{name}}\".",
                    "suggestion/use-strict-directive": "Remove \"use strict\" directive.",
                    "suggestion/dirname": "Replace \"__dirname\" with `\"…(import.meta.url)\"`.",
                    "suggestion/filename": "Replace \"__filename\" with `\"…(import.meta.url)\"`.",
                    "suggestion/import": "Switch to `import`.",
                    "suggestion/export": "Switch to `export`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-module.md",
                "description": "Prefer JavaScript modules (ESM) over CommonJS.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-negative-index": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "prefer-negative-index": "Prefer negative index over length minus index for `{{method}}`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-negative-index.md",
                "description": "Prefer negative index over `.length - index` for `{String,Array,TypedArray}#slice()`, `Array#splice()` and `Array#at()`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-node-protocol": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "checkRequire": {
                                "type": "boolean",
                                "default": false
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "prefer-node-protocol": "Prefer `node:{{moduleName}}` over `{{moduleName}}`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-node-protocol.md",
                "description": "Prefer using the `node:` protocol when importing Node.js builtin modules.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-number-properties": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "checkInfinity": {
                                "type": "boolean",
                                "default": true
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "method-error": "Prefer `Number.{{name}}()` over `{{name}}()`.",
                    "method-suggestion": "Replace `{{name}}()` with `Number.{{name}}()`.",
                    "property-error": "Prefer `Number.{{property}}` over `{{identifier}}`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-number-properties.md",
                "description": "Prefer `Number` static properties over global ones.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-object-from-entries": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "functions": {
                                "type": "array",
                                "uniqueItems": true
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "reduce": "Prefer `Object.fromEntries()` over `Array#reduce()`.",
                    "function": "Prefer `Object.fromEntries()` over `{{functionName}}()`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-object-from-entries.md",
                "description": "Prefer using `Object.fromEntries(…)` to transform a list of key-value pairs into an object.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-object-has-own": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "functions": {
                                "type": "array",
                                "uniqueItems": true
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "prefer-object-has-own": "Use `Object.hasOwn(…)` instead of `{{description}}(…)`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-object-has-own.md",
                "description": "Prefer `Object.hasOwn(…)` over `Object.prototype.hasOwnProperty.call(…)`.",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "prefer-optional-catch-binding": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "with-name": "Remove unused catch binding `{{name}}`.",
                    "without-name": "Remove unused catch binding."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-optional-catch-binding.md",
                "description": "Prefer omitting the `catch` binding parameter.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-prototype-methods": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "known-method": "Prefer using `{{constructorName}}.prototype.{{methodName}}`.",
                    "unknown-method": "Prefer using method from `{{constructorName}}.prototype`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-prototype-methods.md",
                "description": "Prefer borrowing methods from the prototype instead of the instance.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-query-selector": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "prefer-query-selector": "Prefer `.{{replacement}}()` over `.{{method}}()`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-query-selector.md",
                "description": "Prefer `.querySelector()` over `.getElementById()`, `.querySelectorAll()` over `.getElementsByClassName()` and `.getElementsByTagName()`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-reflect-apply": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "prefer-reflect-apply": "Prefer `Reflect.apply()` over `Function#apply()`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-reflect-apply.md",
                "description": "Prefer `Reflect.apply()` over `Function#apply()`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-regexp-test": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "regexp-exec": "Prefer `.test(…)` over `.exec(…)`.",
                    "string-match": "Prefer `RegExp#test(…)` over `String#match(…)`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-regexp-test.md",
                "description": "Prefer `RegExp#test()` over `String#match()` and `RegExp#exec()`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-set-has": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "error": "`{{name}}` should be a `Set`, and use `{{name}}.has()` to check existence or non-existence.",
                    "suggestion": "Switch `{{name}}` to `Set`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-set-has.md",
                "description": "Prefer `Set#has()` over `Array#includes()` when checking for existence or non-existence.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-spread": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "array-from": "Prefer the spread operator over `Array.from(…)`.",
                    "array-concat": "Prefer the spread operator over `Array#concat(…)`.",
                    "array-slice": "Prefer the spread operator over `Array#slice()`.",
                    "string-split": "Prefer the spread operator over `String#split('')`.",
                    "argument-is-spreadable": "First argument is an `array`.",
                    "argument-is-not-spreadable": "First argument is not an `array`.",
                    "test-argument": "Test first argument with `Array.isArray(…)`.",
                    "spread-all-arguments": "Spread all unknown arguments`.",
                    "use-spread": "Use `...` operator."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-spread.md",
                "description": "Prefer the spread operator over `Array.from(…)`, `Array#concat(…)`, `Array#slice()` and `String#split('')`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-string-replace-all": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "prefer-string-replace-all": "Prefer `String#replaceAll()` over `String#replace()`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-string-replace-all.md",
                "description": "Prefer `String#replaceAll()` over regex searches with the global flag.",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "prefer-string-slice": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "substr": "Prefer `String#slice()` over `String#substr()`.",
                    "substring": "Prefer `String#slice()` over `String#substring()`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-string-slice.md",
                "description": "Prefer `String#slice()` over `String#substr()` and `String#substring()`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-string-starts-ends-with": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "prefer-starts-with": "Prefer `String#startsWith()` over a regex with `^`.",
                    "prefer-ends-with": "Prefer `String#endsWith()` over a regex with `$`.",
                    "useStringCasting": "Convert to string `String(…).{{method}}()`.",
                    "useOptionalChaining": "Use optional chaining `…?.{{method}}()`.",
                    "useNullishCoalescing": "Use nullish coalescing `(… ?? '').{{method}}()`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-string-starts-ends-with.md",
                "description": "Prefer `String#startsWith()` & `String#endsWith()` over `RegExp#test()`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-string-trim-start-end": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "prefer-string-trim-start-end": "Prefer `String#{{replacement}}()` over `String#{{method}}()`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-string-trim-start-end.md",
                "description": "Prefer `String#trimStart()` / `String#trimEnd()` over `String#trimLeft()` / `String#trimRight()`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-switch": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "minimumCases": {
                                "type": "integer",
                                "minimum": 2,
                                "default": 3
                            },
                            "emptyDefaultCase": {
                                "enum": [
                                    "no-default-comment",
                                    "do-nothing-comment",
                                    "no-default-case"
                                ],
                                "default": "no-default-comment"
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "prefer-switch": "Use `switch` instead of multiple `else-if`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-switch.md",
                "description": "Prefer `switch` over multiple `else-if`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-ternary": {
                "schema": [
                    {
                        "enum": ["always", "only-single-line"],
                        "default": "always"
                    }
                ],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "prefer-ternary": "This `if` statement can be replaced by a ternary expression."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-ternary.md",
                "description": "Prefer ternary expressions over simple `if-else` statements.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-top-level-await": {
                "schema": [],
                "type": "suggestion",
                "hasSuggestions": true,
                "messages": {
                    "promise": "Prefer top-level await over using a promise chain.",
                    "iife": "Prefer top-level await over an async IIFE.",
                    "identifier": "Prefer top-level await over an async function `{{name}}` call.",
                    "add-await": "Insert `await`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-top-level-await.md",
                "description": "Prefer top-level await over top-level promises and async function calls.",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "prefer-type-error": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "prefer-type-error": "`new Error()` is too unspecific for a type check. Use `new TypeError()` instead."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prefer-type-error.md",
                "description": "Enforce throwing `TypeError` in type checking conditions.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "prevent-abbreviations": {
                "schema": {
                    "type": "array",
                    "additionalItems": false,
                    "items": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "checkProperties": {
                                    "type": "boolean"
                                },
                                "checkVariables": {
                                    "type": "boolean"
                                },
                                "checkDefaultAndNamespaceImports": {
                                    "type": ["boolean", "string"],
                                    "pattern": "internal"
                                },
                                "checkShorthandImports": {
                                    "type": ["boolean", "string"],
                                    "pattern": "internal"
                                },
                                "checkShorthandProperties": {
                                    "type": "boolean"
                                },
                                "checkFilenames": {
                                    "type": "boolean"
                                },
                                "extendDefaultReplacements": {
                                    "type": "boolean"
                                },
                                "replacements": {
                                    "$ref": "#/definitions/abbreviations"
                                },
                                "extendDefaultAllowList": {
                                    "type": "boolean"
                                },
                                "allowList": {
                                    "$ref": "#/definitions/booleanObject"
                                },
                                "ignore": {
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            }
                        }
                    ],
                    "definitions": {
                        "abbreviations": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/replacements"
                            }
                        },
                        "replacements": {
                            "anyOf": [
                                {
                                    "enum": [false]
                                },
                                {
                                    "$ref": "#/definitions/booleanObject"
                                }
                            ]
                        },
                        "booleanObject": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    }
                },
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "replace": "The {{nameTypeText}} `{{discouragedName}}` should be named `{{replacement}}`. A more descriptive name will do too.",
                    "suggestion": "Please rename the {{nameTypeText}} `{{discouragedName}}`. Suggested names are: {{replacementsText}}. A more descriptive name will do too."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/prevent-abbreviations.md",
                "description": "Prevent abbreviations.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "require-array-join-separator": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "require-array-join-separator": "Missing the separator argument."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/require-array-join-separator.md",
                "description": "Enforce using the separator argument with `Array#join()`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "require-number-to-fixed-digits-argument": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "require-number-to-fixed-digits-argument": "Missing the digits argument."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/require-number-to-fixed-digits-argument.md",
                "description": "Enforce using the digits argument with `Number#toFixed()`.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            },
            "require-post-message-target-origin": {
                "schema": [],
                "type": "problem",
                "hasSuggestions": true,
                "messages": {
                    "error": "Missing the `targetOrigin` argument.",
                    "target-location-origin": "Use `{{target}}.location.origin`.",
                    "self-location-origin": "Use `self.location.origin`.",
                    "star": "Use `\"*\"`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/require-post-message-target-origin.md",
                "description": "Enforce using the `targetOrigin` argument with `window.postMessage()`.",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "string-content": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "patterns": {
                                "type": "object",
                                "additionalProperties": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "object",
                                            "required": ["suggest"],
                                            "properties": {
                                                "suggest": {
                                                    "type": "string"
                                                },
                                                "fix": {
                                                    "type": "boolean"
                                                },
                                                "message": {
                                                    "type": "string"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    ]
                                }
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                    "replace": "Replace `{{match}}` with `{{suggest}}`."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/string-content.md",
                "description": "Enforce better string content.",
                "html": {
                    "severity": "off"
                },
                "js": {
                    "severity": "off"
                },
                "ts": {
                    "severity": "off"
                }
            },
            "template-indent": {
                "schema": [
                    {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "indent": {
                                "oneOf": [
                                    {
                                        "type": "string",
                                        "pattern": "^\\s+$"
                                    },
                                    {
                                        "type": "integer",
                                        "minimum": 1
                                    }
                                ]
                            },
                            "tags": {
                                "type": "array",
                                "uniqueItems": true,
                                "items": {
                                    "type": "string"
                                }
                            },
                            "functions": {
                                "type": "array",
                                "uniqueItems": true,
                                "items": {
                                    "type": "string"
                                }
                            },
                            "selectors": {
                                "type": "array",
                                "uniqueItems": true,
                                "items": {
                                    "type": "string"
                                }
                            },
                            "comments": {
                                "type": "array",
                                "uniqueItems": true,
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "template-indent": "Templates should be properly indented."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/template-indent.md",
                "description": "Fix whitespace-insensitive template indentation.",
                "html": {
                    "severity": "warn"
                },
                "js": {
                    "severity": "warn"
                },
                "ts": {
                    "severity": "warn"
                }
            },
            "throw-new-error": {
                "schema": [],
                "type": "suggestion",
                "fixable": "code",
                "messages": {
                    "throw-new-error": "Use `new` when throwing an error."
                },
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v39.0.0/docs/rules/throw-new-error.md",
                "description": "Require `new` when throwing an error.",
                "html": {
                    "severity": "error"
                },
                "js": {
                    "severity": "error"
                },
                "ts": {
                    "severity": "error"
                }
            }
        }
    },
    "eslint-plugin-import": {
        "fields": [
            "type",
            "fixable",
            "description",
            "recommended"
        ],
        "rules": {
            "no-relative-parent-imports": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commonjs": {
                                "type": "boolean"
                            },
                            "amd": {
                                "type": "boolean"
                            },
                            "esmodule": {
                                "type": "boolean"
                            },
                            "ignore": {
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-relative-parent-imports.md",
                "ts": {
                    "severity": "error"
                }
            },
            "no-cycle": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commonjs": {
                                "type": "boolean"
                            },
                            "amd": {
                                "type": "boolean"
                            },
                            "esmodule": {
                                "type": "boolean"
                            },
                            "ignore": {
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            },
                            "maxDepth": {
                                "oneOf": [
                                    {
                                        "description": "maximum dependency depth to traverse",
                                        "type": "integer",
                                        "minimum": 1
                                    },
                                    {
                                        "enum": ["∞"],
                                        "type": "string"
                                    }
                                ]
                            },
                            "ignoreExternal": {
                                "description": "ignore external modules",
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-cycle.md",
                "ts": {
                    "severity": "error"
                }
            },
            "named": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commonjs": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/named.md",
                "ts": {
                    "severity": "error"
                }
            },
            "no-unassigned-import": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "devDependencies": {
                                "type": ["boolean", "array"]
                            },
                            "optionalDependencies": {
                                "type": ["boolean", "array"]
                            },
                            "peerDependencies": {
                                "type": ["boolean", "array"]
                            },
                            "allow": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-unassigned-import.md",
                "ts": {
                    "severity": "error"
                }
            },
            "no-useless-path-segments": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commonjs": {
                                "type": "boolean"
                            },
                            "noUselessIndex": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-useless-path-segments.md",
                "ts": {
                    "severity": "error"
                }
            },
            "first": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [
                    {
                        "type": "string",
                        "enum": ["absolute-first", "disable-absolute-first"]
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/first.md",
                "ts": {
                    "severity": "error"
                }
            },
            "newline-after-import": {
                "type": "layout",
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "count": {
                                "type": "integer",
                                "minimum": 1
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/newline-after-import.md",
                "ts": {
                    "severity": "error",
                    "options": {
                        "count": 1
                    }
                }
            },
            "export": {
                "type": "problem",
                "schema": [],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/export.md",
                "ts": {
                    "severity": "error"
                }
            },
            "no-duplicates": {
                "type": "problem",
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "considerQueryString": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-duplicates.md",
                "ts": {
                    "severity": "error"
                }
            },
            "max-dependencies": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "max": {
                                "type": "number"
                            },
                            "ignoreTypeImports": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/max-dependencies.md",
                "ts": {
                    "severity": "error",
                    "options": {
                        "max": 15
                    }
                }
            },
            "no-unresolved": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commonjs": {
                                "type": "boolean"
                            },
                            "amd": {
                                "type": "boolean"
                            },
                            "esmodule": {
                                "type": "boolean"
                            },
                            "ignore": {
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            },
                            "caseSensitive": {
                                "type": "boolean",
                                "default": true
                            },
                            "caseSensitiveStrict": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-unresolved.md",
                "ts": {
                    "severity": "error"
                }
            },
            "no-mutable-exports": {
                "type": "suggestion",
                "schema": [],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-mutable-exports.md",
                "ts": {
                    "severity": "error"
                }
            },
            "no-named-as-default-member": {
                "type": "suggestion",
                "schema": [],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-named-as-default-member.md",
                "ts": {
                    "severity": "error"
                }
            },
            "no-unused-modules": {
                "type": "suggestion",
                "schema": [
                    {
                        "properties": {
                            "src": {
                                "description": "files/paths to be analyzed (only for unused exports)",
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                    "type": "string",
                                    "minLength": 1
                                }
                            },
                            "ignoreExports": {
                                "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                    "type": "string",
                                    "minLength": 1
                                }
                            },
                            "missingExports": {
                                "description": "report modules without any exports",
                                "type": "boolean"
                            },
                            "unusedExports": {
                                "description": "report exports without any usage",
                                "type": "boolean"
                            }
                        },
                        "not": {
                            "properties": {
                                "unusedExports": {
                                    "enum": [false]
                                },
                                "missingExports": {
                                    "enum": [false]
                                }
                            }
                        },
                        "anyOf": [
                            {
                                "not": {
                                    "properties": {
                                        "unusedExports": {
                                            "enum": [true]
                                        }
                                    }
                                },
                                "required": ["missingExports"]
                            },
                            {
                                "not": {
                                    "properties": {
                                        "missingExports": {
                                            "enum": [true]
                                        }
                                    }
                                },
                                "required": ["unusedExports"]
                            },
                            {
                                "properties": {
                                    "unusedExports": {
                                        "enum": [true]
                                    }
                                },
                                "required": ["unusedExports"]
                            },
                            {
                                "properties": {
                                    "missingExports": {
                                        "enum": [true]
                                    }
                                },
                                "required": ["missingExports"]
                            }
                        ]
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-unused-modules.md",
                "ts": {
                    "severity": "error"
                }
            },
            "no-absolute-path": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commonjs": {
                                "type": "boolean"
                            },
                            "amd": {
                                "type": "boolean"
                            },
                            "esmodule": {
                                "type": "boolean"
                            },
                            "ignore": {
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-absolute-path.md",
                "ts": {
                    "severity": "error"
                }
            },
            "no-self-import": {
                "type": "problem",
                "schema": [],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-self-import.md",
                "description": "Forbid a module from importing itself",
                "recommended": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-default-export": {
                "type": "suggestion",
                "schema": [],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-default-export.md",
                "ts": {
                    "severity": "error"
                }
            },
            "no-webpack-loader-syntax": {
                "type": "problem",
                "schema": [],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-webpack-loader-syntax.md",
                "ts": {
                    "severity": "error"
                }
            },
            "no-deprecated": {
                "type": "suggestion",
                "schema": [],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-deprecated.md",
                "ts": {
                    "severity": "off"
                }
            },
            "no-extraneous-dependencies": {
                "type": "problem",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "devDependencies": {
                                "type": ["boolean", "array"]
                            },
                            "optionalDependencies": {
                                "type": ["boolean", "array"]
                            },
                            "peerDependencies": {
                                "type": ["boolean", "array"]
                            },
                            "bundledDependencies": {
                                "type": ["boolean", "array"]
                            },
                            "packageDir": {
                                "type": ["string", "array"]
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-extraneous-dependencies.md",
                "ts": {
                    "severity": "error",
                    "options": {
                        "devDependencies": [
                            "test/**",
                            "tests/**",
                            "spec/**",
                            "**/__tests__/**",
                            "**/__mocks__/**",
                            "test.{js,jsx}",
                            "test.{ts,tsx}",
                            "test-*.{js,jsx}",
                            "test-*.{ts,tsx}",
                            "**/*{.,_}{test,spec}.{js,jsx}",
                            "**/*{.,_}{test,spec}.{ts,tsx}",
                            "**/jest.config.js",
                            "**/jest.config.ts",
                            "**/jest.setup.js",
                            "**/jest.setup.ts",
                            "**/vue.config.js",
                            "**/vue.config.ts",
                            "**/webpack.config.js",
                            "**/webpack.config.ts",
                            "**/webpack.config.*.js",
                            "**/webpack.config.*.ts",
                            "**/rollup.config.js",
                            "**/rollup.config.ts",
                            "**/rollup.config.*.js",
                            "**/rollup.config.*.ts",
                            "**/gulpfile.js",
                            "**/gulpfile.ts",
                            "**/gulpfile.*.js",
                            "**/gulpfile.*.ts",
                            "**/Gruntfile{,.js}",
                            "**/Gruntfile{,.ts}",
                            "**/protractor.conf.js",
                            "**/protractor.conf.ts",
                            "**/protractor.conf.*.js",
                            "**/protractor.conf.*.ts",
                            "**/karma.conf.js",
                            "**/karma.conf.ts",
                            "**/.eslintrc.js",
                            "**/.eslintrc.ts"
                        ],
                        "optionalDependencies": false
                    }
                }
            },
            "order": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "groups": {
                                "type": "array"
                            },
                            "pathGroupsExcludedImportTypes": {
                                "type": "array"
                            },
                            "pathGroups": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "pattern": {
                                            "type": "string"
                                        },
                                        "patternOptions": {
                                            "type": "object"
                                        },
                                        "group": {
                                            "type": "string",
                                            "enum": [
                                                "builtin",
                                                "external",
                                                "internal",
                                                "unknown",
                                                "parent",
                                                "sibling",
                                                "index",
                                                "object",
                                                "type"
                                            ]
                                        },
                                        "position": {
                                            "type": "string",
                                            "enum": ["after", "before"]
                                        }
                                    },
                                    "required": ["pattern", "group"]
                                }
                            },
                            "newlines-between": {
                                "enum": [
                                    "ignore",
                                    "always",
                                    "always-and-inside-groups",
                                    "never"
                                ]
                            },
                            "alphabetize": {
                                "type": "object",
                                "properties": {
                                    "caseInsensitive": {
                                        "type": "boolean",
                                        "default": false
                                    },
                                    "order": {
                                        "enum": [
                                            "ignore",
                                            "asc",
                                            "desc"
                                        ],
                                        "default": "ignore"
                                    }
                                },
                                "additionalProperties": false
                            },
                            "warnOnUnassignedImports": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/order.md",
                "ts": {
                    "severity": "off"
                }
            },
            "no-internal-modules": {
                "type": "suggestion",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "allow": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "forbid": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-internal-modules.md",
                "ts": {
                    "severity": "off"
                }
            },
            "no-relative-packages": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commonjs": {
                                "type": "boolean"
                            },
                            "amd": {
                                "type": "boolean"
                            },
                            "esmodule": {
                                "type": "boolean"
                            },
                            "ignore": {
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/no-relative-packages.md",
                "ts": {
                    "severity": "error"
                }
            },
            "extensions": {
                "type": "suggestion",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "always",
                                        "ignorePackages",
                                        "never"
                                    ]
                                }
                            ],
                            "additionalItems": false
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "always",
                                        "ignorePackages",
                                        "never"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "pattern": {
                                            "type": "object",
                                            "patternProperties": {
                                                ".*": {
                                                    "enum": [
                                                        "always",
                                                        "ignorePackages",
                                                        "never"
                                                    ]
                                                }
                                            }
                                        },
                                        "ignorePackages": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            ],
                            "additionalItems": false
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "type": "object",
                                    "properties": {
                                        "pattern": {
                                            "type": "object",
                                            "patternProperties": {
                                                ".*": {
                                                    "enum": [
                                                        "always",
                                                        "ignorePackages",
                                                        "never"
                                                    ]
                                                }
                                            }
                                        },
                                        "ignorePackages": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            ],
                            "additionalItems": false
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        ".*": {
                                            "enum": [
                                                "always",
                                                "ignorePackages",
                                                "never"
                                            ]
                                        }
                                    }
                                }
                            ],
                            "additionalItems": false
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "always",
                                        "ignorePackages",
                                        "never"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        ".*": {
                                            "enum": [
                                                "always",
                                                "ignorePackages",
                                                "never"
                                            ]
                                        }
                                    }
                                }
                            ],
                            "additionalItems": false
                        }
                    ]
                },
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.26.0/docs/rules/extensions.md",
                "ts": {
                    "severity": "error"
                }
            }
        }
    },
    "eslint-plugin-rxjs": {
        "fields": [
            "fixable",
            "type",
            "category",
            "description",
            "recommended",
            "suggestion"
        ],
        "rules": {
            "no-unsafe-subject-next": {
                "messages": {
                    "forbidden": "Unsafe optional next calls are forbidden."
                },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-unsafe-subject-next.md",
                "category": "Possible Errors",
                "description": "Forbids unsafe optional `next` calls.",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "throw-error": {
                "messages": {
                    "forbidden": "Passing non-Error values are forbidden."
                },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/throw-error.md",
                "category": "Best Practices",
                "description": "Enforces the passing of `Error` values to error notifications.",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "finnish": {
                "messages": {
                    "shouldBeFinnish": "Finnish notation should be used here.",
                    "shouldNotBeFinnish": "Finnish notation should not be used here."
                },
                "schema": [
                    {
                        "properties": {
                            "functions": {
                                "type": "boolean"
                            },
                            "methods": {
                                "type": "boolean"
                            },
                            "names": {
                                "type": "object"
                            },
                            "parameters": {
                                "type": "boolean"
                            },
                            "properties": {
                                "type": "boolean"
                            },
                            "strict": {
                                "type": "boolean"
                            },
                            "types": {
                                "type": "object"
                            },
                            "variables": {
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                ],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/finnish.md",
                "category": "Stylistic Issues",
                "description": "Enforces the use of Finnish notation.",
                "recommended": false,
                "ts": {
                    "severity": "error",
                    "options": {
                        "names": {
                            "^(canActivate|canActivateChild|canDeactivate|canLoad|intercept|resolve|validate)$": false
                        },
                        "types": {
                            "^EventEmitter$": false
                        },
                        "functions": true,
                        "methods": true,
                        "parameters": true,
                        "properties": true,
                        "variables": true
                    }
                }
            },
            "no-implicit-any-catch": {
                "fixable": "code",
                "messages": {
                    "explicitAny": "Explicit `any` in `catchError`.",
                    "implicitAny": "Implicit `any` in `catchError`.",
                    "narrowed": "Error type must be `unknown` or `any`.",
                    "suggestExplicitUnknown": "Use `unknown` instead, this will force you to explicitly and safely assert the type is correct."
                },
                "schema": [
                    {
                        "additionalProperties": false,
                        "properties": {
                            "allowExplicitAny": {
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                ],
                "type": "suggestion",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-implicit-any-catch.md",
                "category": "Possible Errors",
                "description": "Forbids implicit `any` error parameters in `catchError` operators.",
                "recommended": "error",
                "suggestion": true,
                "ts": {
                    "severity": "error"
                }
            },
            "no-topromise": {
                "messages": {
                    "forbidden": "The toPromise method is forbidden."
                },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-topromise.md",
                "category": "Best Practices",
                "description": "Forbids the use of the `toPromise` method.",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-redundant-notify": {
                "messages": {
                    "forbidden": "Redundant notifications are forbidden."
                },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-redundant-notify.md",
                "category": "Best Practices",
                "description": "Forbids redundant notifications from completed or errored observables.",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-ignored-observable": {
                "messages": {
                    "forbidden": "Ignoring a returned Observable is forbidden."
                },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-ignored-observable.md",
                "category": "Best Practices",
                "description": "Forbids the ignoring of observables returned by functions.",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "suffix-subjects": {
                "messages": {
                    "forbidden": "Subject identifiers must end with \"{{suffix}}\"."
                },
                "schema": [
                    {
                        "properties": {
                            "parameters": {
                                "type": "boolean"
                            },
                            "properties": {
                                "type": "boolean"
                            },
                            "suffix": {
                                "type": "string"
                            },
                            "types": {
                                "type": "object"
                            },
                            "variables": {
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                ],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/suffix-subjects.md",
                "category": "Best Practices",
                "description": "Enforces the use of a suffix in subject identifiers.",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-explicit-generics": {
                "messages": {
                    "forbidden": "Explicit generic type arguments are forbidden."
                },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-explicit-generics.md",
                "category": "Best Practices",
                "description": "Forbids explicit generic type arguments.",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-exposed-subjects": {
                "messages": {
                    "forbidden": "Subject '{{subject}}' must be private.",
                    "forbiddenAllowProtected": "Subject '{{subject}}' must be private or protected."
                },
                "schema": [
                    {
                        "properties": {
                            "allowProtected": {
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                ],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-exposed-subjects.md",
                "category": "Best Practices",
                "description": "Forbids exposed (i.e. non-private) subjects.",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-unbound-methods": {
                "messages": {
                    "forbidden": "Unbound methods are forbidden."
                },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-unbound-methods.md",
                "category": "Best Practices",
                "description": "Forbids the passing of unbound methods.",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-unsafe-takeuntil": {
                "messages": {
                    "forbidden": "Applying operators after takeUntil is forbidden."
                },
                "schema": [
                    {
                        "properties": {
                            "alias": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "allow": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "type": "object",
                        "description": "An optional object with optional `alias` and `allow` properties.\nThe `alias` property is an array containing the names of operators that aliases for `takeUntil`.\nThe `allow` property is an array containing the names of the operators that are allowed to follow `takeUntil`."
                    }
                ],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-unsafe-takeuntil.md",
                "category": "Possible Errors",
                "description": "Forbids the application of operators after `takeUntil`.",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-sharereplay": {
                "messages": {
                    "forbidden": "shareReplay is forbidden.",
                    "forbiddenWithoutConfig": "shareReplay is forbidden unless a config argument is passed."
                },
                "schema": [
                    {
                        "properties": {
                            "allowConfig": {
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                ],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-sharereplay.md",
                "category": "Best Practices",
                "description": "Forbids using the `shareReplay` operator.",
                "recommended": "error",
                "ts": {
                    "severity": "error",
                    "options": {
                        "allowConfig": true
                    }
                }
            },
            "no-nested-subscribe": {
                "messages": {
                    "forbidden": "Nested subscribe calls are forbidden."
                },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-nested-subscribe.md",
                "category": "Best Practices",
                "description": "Forbids the calling of `subscribe` within a `subscribe` callback.",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-unsafe-catch": {
                "messages": {
                    "forbidden": "Unsafe catchError usage in effects and epics are forbidden."
                },
                "schema": [
                    {
                        "properties": {
                            "observable": {
                                "type": "string"
                            }
                        },
                        "type": "object",
                        "description": "An optional object with an optional `observable` property.\nThe property can be specified as a regular expression string and is used to identify the action observables from which effects and epics are composed."
                    }
                ],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-unsafe-catch.md",
                "category": "Possible Errors",
                "description": "Forbids unsafe `catchError` usage in effects and epics.",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-async-subscribe": {
                "messages": {
                    "forbidden": "Passing async functions to subscribe is forbidden."
                },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-async-subscribe.md",
                "category": "Possible Errors",
                "description": "Forbids passing `async` functions to `subscribe`.",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-create": {
                "messages": {
                    "forbidden": "Observable.create is forbidden; use new Observable."
                },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-create.md",
                "category": "Best Practices",
                "description": "Forbids the calling of `Observable.create`.",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-ignored-notifier": {
                "messages": {
                    "forbidden": "Ignoring the notifier is forbidden."
                },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-ignored-notifier.md",
                "category": "Possible Errors",
                "description": "Forbids observables not composed from the `repeatWhen` or `retryWhen` notifier.",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-ignored-replay-buffer": {
                "messages": {
                    "forbidden": "Ignoring the buffer size is forbidden."
                },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-ignored-replay-buffer.md",
                "category": "Best Practices",
                "description": "Forbids using `ReplaySubject`, `publishReplay` or `shareReplay` without specifying the buffer size.",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-ignored-takewhile-value": {
                "messages": {
                    "forbidden": "Ignoring the value within takeWhile is forbidden."
                },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-ignored-takewhile-value.md",
                "category": "Possible Errors",
                "description": "Forbids ignoring the value within `takeWhile`.",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-index": {
                "messages": {
                    "forbidden": "RxJS imports from index modules are forbidden."
                },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-index.md",
                "category": "Best Practices",
                "description": "Forbids the importation from index modules.",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-internal": {
                "fixable": "code",
                "messages": {
                    "forbidden": "RxJS imports from internal are forbidden.",
                    "suggest": "Import from a non-internal location."
                },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-internal.md",
                "category": "Best Practices",
                "description": "Forbids the importation of internals.",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-subject-unsubscribe": {
                "messages": {
                    "forbidden": "Calling unsubscribe on a subject is forbidden."
                },
                "schema": [],
                "type": "problem",
                "url": "https://github.com/cartant/eslint-plugin-rxjs/tree/main/docs/rules/no-subject-unsubscribe.md",
                "category": "Possible Errors",
                "description": "Forbids calling the `unsubscribe` method of a subject instance.",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            }
        }
    },
    "@angular-eslint/eslint-plugin": {
        "fields": [
            "type",
            "description",
            "recommended",
            "hasSuggestions",
            "fixable"
        ],
        "rules": {
            "component-max-inline-declarations": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "template": {
                                "minimum": 0,
                                "type": "number"
                            },
                            "styles": {
                                "minimum": 0,
                                "type": "number"
                            },
                            "animations": {
                                "minimum": 0,
                                "type": "number"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "componentMaxInlineDeclarations": "`{{propertyType}}` has too many lines ({{lineCount}}). Maximum allowed is {{max}} (https://angular.io/guide/styleguide#style-05-04)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/component-max-inline-declarations.md",
                "description": "Enforces a maximum number of lines in inline template, styles and animations. See more at https://angular.io/guide/styleguide#style-05-04",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-empty-lifecycle-method": {
                "type": "suggestion",
                "hasSuggestions": true,
                "schema": [],
                "messages": {
                    "noEmptyLifecycleMethod": "Lifecycle methods should not be empty",
                    "suggestRemoveLifecycleMethod": "Remove lifecycle method"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-empty-lifecycle-method.md",
                "description": "Disallows declaring empty lifecycle methods",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-input-rename": {
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowedNames": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "A list with allowed input names",
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "noInputRename": "Input bindings should not be aliased (https://angular.io/guide/styleguide#style-05-13)",
                    "suggestRemoveAliasName": "Remove alias name",
                    "suggestReplaceOriginalNameWithAliasName": "Remove alias name and use it as the original name"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-input-rename.md",
                "description": "Ensures that input bindings are not aliased",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-on-push-component-change-detection": {
                "type": "suggestion",
                "hasSuggestions": true,
                "schema": [],
                "messages": {
                    "preferOnPushComponentChangeDetection": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                    "suggestAddChangeDetectionOnPush": "Add `ChangeDetectionStrategy.OnPush`"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-on-push-component-change-detection.md",
                "description": "Ensures component's `changeDetection` is set to `ChangeDetectionStrategy.OnPush`",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "use-component-selector": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "useComponentSelector": "The selector of the component is mandatory"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/use-component-selector.md",
                "description": "Component selector must be declared",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-attribute-decorator": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "noAttributeDecorator": "@Attribute can only obtain a single value and is rarely what is required. Use @Input instead to retrieve a stream of values."
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-attribute-decorator.md",
                "description": "The @Attribute decorator is used to obtain a single value for an attribute. This is a much less common use-case than getting a stream of values (using @Input), so often the @Attribute decorator is mistakenly used when @Input was what was intended. This rule disallows usage of @Attribute decorator altogether in order to prevent these mistakes.",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-forward-ref": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "noForwardRef": "Avoid using `forwardRef`"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-forward-ref.md",
                "description": "Disallows usage of `forwardRef` references for DI",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-lifecycle-call": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "noLifecycleCall": "Avoid explicit calls to lifecycle methods"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-lifecycle-call.md",
                "description": "Disallows explicit calls to lifecycle methods",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-pipe-impure": {
                "type": "suggestion",
                "hasSuggestions": true,
                "schema": [],
                "messages": {
                    "noPipeImpure": "Impure pipes should be avoided because they are invoked on each change-detection cycle",
                    "suggestRemovePipeImpure": "Remove `pure` property"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-pipe-impure.md",
                "description": "Disallows the declaration of impure pipes",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-queries-metadata-property": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "noQueriesMetadataProperty": "Use @Output rather than the `queries` metadata property (https://angular.io/styleguide#style-05-12)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-queries-metadata-property.md",
                "description": "Disallows usage of the `queries` metadata property. See more at https://angular.io/styleguide#style-05-12.",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "prefer-output-readonly": {
                "type": "suggestion",
                "hasSuggestions": true,
                "schema": [],
                "messages": {
                    "preferOutputReadonly": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                    "suggestAddReadonlyModifier": "Add `readonly` modifier"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-output-readonly.md",
                "description": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "use-component-view-encapsulation": {
                "type": "suggestion",
                "hasSuggestions": true,
                "schema": [],
                "messages": {
                    "useComponentViewEncapsulation": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                    "suggestRemoveViewEncapsulationNone": "Remove `ViewEncapsulation.None`"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/use-component-view-encapsulation.md",
                "description": "Disallows using `ViewEncapsulation.None`",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "use-injectable-provided-in": {
                "type": "suggestion",
                "hasSuggestions": true,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "ignoreClassNamePattern": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "useInjectableProvidedIn": "The `providedIn` property is mandatory for `Injectables`",
                    "suggestInjector": "Use `providedIn: '{{injector}}'`"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/use-injectable-provided-in.md",
                "description": "Using the `providedIn` property makes `Injectables` tree-shakable",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            },
            "use-pipe-decorator": {
                "url": "__NOT__DEFINED__",
                "ts": {
                    "severity": "off"
                }
            },
            "component-class-suffix": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "suffixes": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "componentClassSuffix": "Component class names should end with one of these suffixes: {{suffixes}} (https://angular.io/styleguide#style-02-03)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/component-class-suffix.md",
                "description": "Classes decorated with @Component must have suffix \"Component\" (or custom) in their name. See more at https://angular.io/styleguide#style-02-03",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "component-selector": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "oneOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "enum": ["element", "attribute"]
                                        }
                                    }
                                ]
                            },
                            "prefix": {
                                "oneOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "array"
                                    }
                                ]
                            },
                            "style": {
                                "type": "string",
                                "enum": ["camelCase", "kebab-case"]
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "prefixFailure": "The selector should start with one of these prefixes: {{prefix}} (https://angular.io/guide/styleguide#style-02-07)",
                    "styleFailure": "The selector should be {{style}} (https://angular.io/guide/styleguide#style-05-02)",
                    "typeFailure": "The selector should be used as an {{type}} (https://angular.io/guide/styleguide#style-05-03)",
                    "shadowDomEncapsulatedStyleFailure": "The selector of a ShadowDom-encapsulated component should be `kebab-case` (https://github.com/angular-eslint/angular-eslint/issues/534)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/component-selector.md",
                "description": "Component selectors should follow given naming rules. See more at https://angular.io/guide/styleguide#style-02-07, https://angular.io/guide/styleguide#style-05-02\n      and https://angular.io/guide/styleguide#style-05-03.",
                "recommended": false,
                "ts": {
                    "severity": "error",
                    "options": {
                        "type": "element",
                        "prefix": "app",
                        "style": "kebab-case"
                    }
                }
            },
            "contextual-lifecycle": {
                "type": "problem",
                "schema": [],
                "messages": {
                    "contextualLifecycle": "Angular will not invoke the `{{methodName}}` lifecycle method within `@{{classDecoratorName}}()` classes"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/contextual-lifecycle.md",
                "description": "Ensures that lifecycle methods are used in a correct context",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "directive-class-suffix": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "suffixes": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "directiveClassSuffix": "Directive class names should end with one of these suffixes: {{suffixes}} (https://angular.io/styleguide#style-02-03)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/directive-class-suffix.md",
                "description": "Classes decorated with @Directive must have suffix \"Directive\" (or custom) in their name. See more at https://angular.io/styleguide#style-02-03",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "directive-selector": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "oneOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "enum": ["element", "attribute"]
                                        }
                                    }
                                ]
                            },
                            "prefix": {
                                "oneOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "array"
                                    }
                                ]
                            },
                            "style": {
                                "type": "string",
                                "enum": ["camelCase", "kebab-case"]
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "prefixFailure": "The selector should start with one of these prefixes: {{prefix}} (https://angular.io/guide/styleguide#style-02-08)",
                    "styleFailure": "The selector should be {{style}} (https://angular.io/guide/styleguide#style-02-06)",
                    "typeFailure": "The selector should be used as an {{type}} (https://angular.io/guide/styleguide#style-02-06)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/directive-selector.md",
                "description": "Directive selectors should follow given naming rules. See more at https://angular.io/guide/styleguide#style-02-06 and https://angular.io/guide/styleguide#style-02-08.",
                "recommended": false,
                "ts": {
                    "severity": "error",
                    "options": {
                        "type": "attribute",
                        "prefix": "app",
                        "style": "camelCase"
                    }
                }
            },
            "no-conflicting-lifecycle": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "noConflictingLifecycleInterface": "Implementing DoCheck and OnChanges in a class is not recommended",
                    "noConflictingLifecycleMethod": "Declaring ngDoCheck and ngOnChanges method in a class is not recommended"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-conflicting-lifecycle.md",
                "description": "Ensures that directives not implement conflicting lifecycle interfaces.",
                "recommended": false,
                "ts": {
                    "severity": "error"
                }
            },
            "no-host-metadata-property": {
                "type": "suggestion",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowStatic": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "noHostMetadataProperty": "Use @HostBinding or @HostListener rather than the `host` metadata property (https://angular.io/styleguide#style-06-03)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-host-metadata-property.md",
                "description": "Disallows usage of the `host` metadata property. See more at https://angular.io/styleguide#style-06-03",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-inputs-metadata-property": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "noInputsMetadataProperty": "Use `@Input` rather than the `inputs` metadata property (https://angular.io/styleguide#style-05-12)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-inputs-metadata-property.md",
                "description": "Disallows usage of the `inputs` metadata property. See more at https://angular.io/styleguide#style-05-12",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-output-native": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "noOutputNative": "Output bindings, including aliases, should not be named as standard DOM events"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-output-native.md",
                "description": "Ensures that output bindings, including aliases, are not named as standard DOM events",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-output-on-prefix": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "noOutputOnPrefix": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.io/guide/styleguide#style-05-16)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-output-on-prefix.md",
                "description": "Ensures that output bindings, including aliases, are not named \"on\", nor prefixed with it. See more at https://angular.io/guide/styleguide#style-05-16",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-output-rename": {
                "type": "suggestion",
                "fixable": "code",
                "hasSuggestions": true,
                "schema": [],
                "messages": {
                    "noOutputRename": "Output bindings should not be aliased (https://angular.io/guide/styleguide#style-05-13)",
                    "suggestRemoveAliasName": "Remove alias name",
                    "suggestReplaceOriginalNameWithAliasName": "Remove alias name and use it as the original name"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-output-rename.md",
                "description": "Ensures that output bindings are not aliased",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "no-outputs-metadata-property": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "noOutputsMetadataProperty": "Use `@Output` rather than the `outputs` metadata property (https://angular.io/styleguide#style-05-12)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/no-outputs-metadata-property.md",
                "description": "Disallows usage of the `outputs` metadata property. See more at https://angular.io/styleguide#style-05-12",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            },
            "use-lifecycle-interface": {
                "type": "suggestion",
                "schema": [],
                "messages": {
                    "useLifecycleInterface": "Lifecycle interface '{{interfaceName}}' should be implemented for method '{{methodName}}'. (https://angular.io/styleguide#style-09-01)"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/use-lifecycle-interface.md",
                "description": "Ensures that classes implement lifecycle interfaces corresponding to the declared lifecycle methods. See more at https://angular.io/styleguide#style-09-01",
                "recommended": "warn",
                "ts": {
                    "severity": "error"
                }
            },
            "use-pipe-transform-interface": {
                "type": "suggestion",
                "fixable": "code",
                "schema": [],
                "messages": {
                    "usePipeTransformInterface": "Pipes should implement `PipeTransform` interface"
                },
                "url": "https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/docs/rules/use-pipe-transform-interface.md",
                "description": "Ensures that `Pipes` implement `PipeTransform` interface",
                "recommended": "error",
                "ts": {
                    "severity": "error"
                }
            }
        }
    },
    "eslint-plugin-jsdoc": {
        "fields": [
            "fixable",
            "type",
            "description"
        ],
        "rules": {
            "no-types": {
                "fixable": "code",
                "schema": [
                    {
                        "additionalProperties": false,
                        "properties": {
                            "contexts": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    }
                ],
                "type": "suggestion",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-no-types",
                "description": "This rule reports types being used on `@param` or `@returns`.",
                "ts": {
                    "severity": "off"
                }
            },
            "newline-after-description": {
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": ["always", "never"],
                        "type": "string"
                    }
                ],
                "type": "layout",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-newline-after-description",
                "description": "Enforces a consistent padding of the block description.",
                "ts": {
                    "severity": "error"
                }
            },
            "check-alignment": {
                "fixable": "code",
                "type": "layout",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-check-alignment",
                "description": "Reports invalid alignment of JSDoc block asterisks.",
                "ts": {
                    "severity": "error"
                }
            }
        }
    },
    "eslint-plugin-no-null": {
        "fields": [],
        "rules": {
            "no-null": {
                "url": "__NOT__DEFINED__",
                "ts": {
                    "severity": "off"
                }
            }
        }
    },
    "eslint-plugin-prefer-arrow": {
        "fields": [
            "fixable",
            "description",
            "category",
            "recommended"
        ],
        "rules": {
            "prefer-arrow-functions": {
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "disallowPrototype": {
                                "type": "boolean"
                            },
                            "singleReturnOnly": {
                                "type": "boolean"
                            },
                            "classPropertiesAllowed": {
                                "type": "boolean"
                            },
                            "allowStandaloneDeclarations": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "url": "__NOT__DEFINED__",
                "description": "prefer arrow functions",
                "category": "emcascript6",
                "recommended": false,
                "ts": {
                    "severity": "off"
                }
            }
        }
    },
    "eslint-plugin-simple-import-sort": {
        "fields": ["type", "fixable"],
        "rules": {
            "exports": {
                "type": "layout",
                "fixable": "code",
                "schema": [],
                "messages": {
                    "sort": "Run autofix to sort these exports!"
                },
                "url": "https://github.com/lydell/eslint-plugin-simple-import-sort#sort-order",
                "ts": {
                    "severity": "error"
                }
            },
            "imports": {
                "type": "layout",
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "groups": {
                                "type": "array",
                                "items": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "sort": "Run autofix to sort these imports!"
                },
                "url": "https://github.com/lydell/eslint-plugin-simple-import-sort#sort-order",
                "ts": {
                    "severity": "error"
                }
            }
        }
    },
    "eslint-plugin-decorator-position": {
        "fields": [
            "type",
            "fixable",
            "description",
            "category",
            "recommended"
        ],
        "rules": {
            "decorator-position": {
                "type": "layout",
                "fixable": "code",
                "schema": {
                    "definitions": {
                        "decoratorConfig": {
                            "oneOf": [
                                {
                                    "type": "array",
                                    "minItems": 1,
                                    "maxItems": 2,
                                    "additionalItems": false,
                                    "items": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "object",
                                            "additionalProperties": false,
                                            "properties": {
                                                "withArgs": {
                                                    "type": "boolean"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        "alignmentOptions": {
                            "type": "string",
                            "enum": ["prefer-inline", "above"]
                        }
                    },
                    "additionalItems": false,
                    "items": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "printWidth": {
                                    "type": "number"
                                },
                                "properties": {
                                    "$ref": "#/definitions/alignmentOptions"
                                },
                                "methods": {
                                    "$ref": "#/definitions/alignmentOptions"
                                },
                                "overrides": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                        "above": {
                                            "type": "array",
                                            "uniqeItems": true,
                                            "items": {
                                                "$ref": "#/definitions/decoratorConfig"
                                            }
                                        },
                                        "prefer-inline": {
                                            "type": "array",
                                            "uniqeItems": true,
                                            "items": {
                                                "$ref": "#/definitions/decoratorConfig"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    ]
                },
                "messages": {
                    "expectedInline": "Expected @{{ name }} to be inline.",
                    "expectedAbove": "Expected @{{ name }} to be on the line above."
                },
                "url": "https://github.com/NullVoxPopuli/eslint-plugin-decorator-position/tree/master/docs/rules/decorator-position.md",
                "description": "enforce consistent decorator position on properties and methods",
                "category": "Style",
                "recommended": true,
                "ts": {
                    "severity": "error",
                    "options": {
                        "printWidth": 120,
                        "properties": "above",
                        "methods": "above"
                    }
                }
            }
        }
    }
}
